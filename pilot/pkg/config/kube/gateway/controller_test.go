// Copyright Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gateway

import (
	"testing"

	. "github.com/onsi/gomega"
	"k8s.io/client-go/kubernetes/fake"
	svc "sigs.k8s.io/service-apis/api/v1alpha1"

	networking "istio.io/api/networking/v1alpha3"
	"istio.io/istio/pilot/pkg/config/aggregate/fakes"
	"istio.io/istio/pilot/pkg/model"
	"istio.io/istio/pkg/config/constants"
	"istio.io/istio/pkg/config/schema/collections"
	"istio.io/istio/pkg/config/schema/resource"
)

var (
	gatewayClassSpec = &svc.GatewayClassSpec{
		Controller: ControllerName,
	}
	gatewaySpec = &svc.GatewaySpec{
		Class: "gwclass",
		Listeners: []svc.Listener{
			{
				Name: "test-listener",
				Address: &svc.ListenerAddress{
					Type:  svc.AddressType("IPV4"),
					Value: "1.2.3.4",
				},
				Port:     func(i int32) *int32 { return &i }(9009),
				Protocol: func(s string) *string { return &s }(svc.HTTPProtocol),
			},
		},
	}
	httpRouteSpec = &svc.HTTPRouteSpec{
		Hosts: []svc.HTTPRouteHost{
			{
				Hostname: "test.cluster.local",
			},
		},
	}

	expectedgw = &networking.Gateway{
		Servers: []*networking.Server{
			{
				Port: &networking.Port{
					Number:   9009,
					Name:     "http-9009-gateway-gwspec-ns1",
					Protocol: "HTTP",
				},
				Hosts: []string{"1.2.3.4"},
			},
		},
		Selector: map[string]string{
			"istio": "ingressgateway",
		},
	}

	expectedvs = &networking.VirtualService{
		Hosts: []string{
			"test.cluster.local",
		},
		Gateways: []string{
			"gwspec-istio-autogenerated-k8s-gateway",
		},
		Http: []*networking.HTTPRoute{},
	}
)

func TestListInvalidGroupVersionKind(t *testing.T) {
	g := NewGomegaWithT(t)
	clientSet := fake.NewSimpleClientset()
	store := &fakes.ConfigStoreCache{}
	controller := NewController(clientSet, store)

	typ := resource.GroupVersionKind{Kind: "wrong-kind"}
	c, err := controller.List(typ, "ns1")
	g.Expect(c).To(HaveLen(0))
	g.Expect(err).To(HaveOccurred())
}

func TestListGatewayResourceType(t *testing.T) {
	g := NewGomegaWithT(t)

	clientSet := fake.NewSimpleClientset()
	store := &fakes.ConfigStoreCache{}
	controller := NewController(clientSet, store)

	gwClassType := collections.K8SServiceApisV1Alpha1Gatewayclasses.Resource()
	gwSpecType := collections.K8SServiceApisV1Alpha1Gateways.Resource()
	gwType := collections.IstioNetworkingV1Alpha3Gateways.Resource()
	k8sHTTPRouteType := collections.K8SServiceApisV1Alpha1Httproutes.Resource()

	store.ListReturnsOnCall(0, []model.Config{
		{
			ConfigMeta: model.ConfigMeta{
				Type:      gwClassType.GroupVersionKind().Kind,
				Group:     gwClassType.GroupVersionKind().Group,
				Version:   gwClassType.GroupVersionKind().Version,
				Name:      "gwclass",
				Namespace: "ns1",
			},
			Spec: gatewayClassSpec,
		},
	}, nil)
	store.ListReturnsOnCall(1, []model.Config{
		{
			ConfigMeta: model.ConfigMeta{
				Type:      gwSpecType.GroupVersionKind().Kind,
				Group:     gwSpecType.GroupVersionKind().Group,
				Version:   gwSpecType.GroupVersionKind().Version,
				Name:      "gwspec",
				Namespace: "ns1",
			},
			Spec: gatewaySpec,
		},
	}, nil)
	store.ListReturnsOnCall(2, []model.Config{
		{
			ConfigMeta: model.ConfigMeta{
				Type:      k8sHTTPRouteType.GroupVersionKind().Kind,
				Group:     k8sHTTPRouteType.GroupVersionKind().Group,
				Version:   k8sHTTPRouteType.GroupVersionKind().Version,
				Name:      "http-route",
				Namespace: "ns1",
			},
			Spec: httpRouteSpec,
		},
	}, nil)

	cfg, err := controller.List(gwType.GroupVersionKind(), "ns1")
	g.Expect(err).ToNot(HaveOccurred())
	g.Expect(cfg).To(HaveLen(1))
	for _, c := range cfg {
		g.Expect(c.Type).To(Equal(gwType.GroupVersionKind().Kind))
		g.Expect(c.Group).To(Equal(gwType.GroupVersionKind().Group))
		g.Expect(c.Version).To(Equal(gwType.GroupVersionKind().Version))
		g.Expect(c.Name).To(Equal("gwspec" + "-" + constants.KubernetesGatewayName))
		g.Expect(c.Namespace).To(Equal("ns1"))
		g.Expect(c.Spec).To(Equal(expectedgw))
	}
}

func TestListVirtualServiceResourceType(t *testing.T) {
	g := NewGomegaWithT(t)

	clientSet := fake.NewSimpleClientset()
	store := &fakes.ConfigStoreCache{}
	controller := NewController(clientSet, store)

	gwClassType := collections.K8SServiceApisV1Alpha1Gatewayclasses.Resource()
	gwSpecType := collections.K8SServiceApisV1Alpha1Gateways.Resource()
	vsType = collections.IstioNetworkingV1Alpha3Virtualservices.Resource()
	k8sHTTPRouteType := collections.K8SServiceApisV1Alpha1Httproutes.Resource()

	store.ListReturnsOnCall(0, []model.Config{
		{
			ConfigMeta: model.ConfigMeta{
				Type:      gwClassType.GroupVersionKind().Kind,
				Group:     gwClassType.GroupVersionKind().Group,
				Version:   gwClassType.GroupVersionKind().Version,
				Name:      "gwclass",
				Namespace: "ns1",
			},
			Spec: gatewayClassSpec,
		},
	}, nil)
	store.ListReturnsOnCall(1, []model.Config{
		{
			ConfigMeta: model.ConfigMeta{
				Type:      gwSpecType.GroupVersionKind().Kind,
				Group:     gwSpecType.GroupVersionKind().Group,
				Version:   gwSpecType.GroupVersionKind().Version,
				Name:      "gwspec",
				Namespace: "ns1",
			},
			Spec: gatewaySpec,
		},
	}, nil)
	store.ListReturnsOnCall(2, []model.Config{
		{
			ConfigMeta: model.ConfigMeta{
				Type:      k8sHTTPRouteType.GroupVersionKind().Kind,
				Group:     k8sHTTPRouteType.GroupVersionKind().Group,
				Version:   k8sHTTPRouteType.GroupVersionKind().Version,
				Name:      "http-route",
				Namespace: "ns1",
			},
			Spec: httpRouteSpec,
		},
	}, nil)

	cfg, err := controller.List(vsType.GroupVersionKind(), "ns1")
	g.Expect(err).ToNot(HaveOccurred())
	g.Expect(cfg).To(HaveLen(1))
	for _, c := range cfg {
		g.Expect(c.Type).To(Equal(vsType.GroupVersionKind().Kind))
		g.Expect(c.Group).To(Equal(vsType.GroupVersionKind().Group))
		g.Expect(c.Version).To(Equal(vsType.GroupVersionKind().Version))
		g.Expect(c.Name).To(Equal("http-route" + "-" + constants.KubernetesGatewayName))
		g.Expect(c.Namespace).To(Equal("ns1"))
		g.Expect(c.Spec).To(Equal(expectedvs))
	}
}
