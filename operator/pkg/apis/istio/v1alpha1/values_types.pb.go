// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apis/istio/v1alpha1/values_types.proto

package v1alpha1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Throttling behavior for mixer.
type Mode int32

const (
	// Removes throttling behavior for mixer.
	Mode_disabled Mode = 0
	// Enables an advisory mode for throttling behavior for mixer.
	Mode_log_only Mode = 1
	// Turn on throttling behavior for mixer.
	Mode_enforce Mode = 2
)

var Mode_name = map[int32]string{
	0: "disabled",
	1: "log_only",
	2: "enforce",
}

var Mode_value = map[string]int32{
	"disabled": 0,
	"log_only": 1,
	"enforce":  2,
}

func (x Mode) String() string {
	return proto.EnumName(Mode_name, int32(x))
}

func (Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{0}
}

// Mode for the ingress controller.
type IngressControllerMode int32

const (
	// Selects all Ingress resources, with or without Istio annotation.
	IngressControllerMode_DEFAULT IngressControllerMode = 0
	// Selects only resources with istio annotation.
	IngressControllerMode_STRICT IngressControllerMode = 1
	// No ingress or sync.
	IngressControllerMode_OFF IngressControllerMode = 2
)

var IngressControllerMode_name = map[int32]string{
	0: "DEFAULT",
	1: "STRICT",
	2: "OFF",
}

var IngressControllerMode_value = map[string]int32{
	"DEFAULT": 0,
	"STRICT":  1,
	"OFF":     2,
}

func (x IngressControllerMode) String() string {
	return proto.EnumName(IngressControllerMode_name, int32(x))
}

func (IngressControllerMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{1}
}

// Configures the access log for sidecar to JSON or TEXT
type AccessLogEncoding int32

const (
	AccessLogEncoding_JSON AccessLogEncoding = 0
	AccessLogEncoding_TEXT AccessLogEncoding = 1
)

var AccessLogEncoding_name = map[int32]string{
	0: "JSON",
	1: "TEXT",
}

var AccessLogEncoding_value = map[string]int32{
	"JSON": 0,
	"TEXT": 1,
}

func (x AccessLogEncoding) String() string {
	return proto.EnumName(AccessLogEncoding_name, int32(x))
}

func (AccessLogEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{2}
}

// Specifies which tracer to use.
type Tracer int32

const (
	Tracer_zipkin      Tracer = 0
	Tracer_lightstep   Tracer = 1
	Tracer_datadog     Tracer = 2
	Tracer_stackdriver Tracer = 3
)

var Tracer_name = map[int32]string{
	0: "zipkin",
	1: "lightstep",
	2: "datadog",
	3: "stackdriver",
}

var Tracer_value = map[string]int32{
	"zipkin":      0,
	"lightstep":   1,
	"datadog":     2,
	"stackdriver": 3,
}

func (x Tracer) String() string {
	return proto.EnumName(Tracer_name, int32(x))
}

func (Tracer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{3}
}

// Specifies the sidecar's default behavior when handling outbound traffic from the application.
type OutboundTrafficPolicyConfig_Mode int32

const (
	// Outbound traffic to unknown destinations will be allowed, in case there are no services or ServiceEntries for the destination port
	OutboundTrafficPolicyConfig_ALLOW_ANY OutboundTrafficPolicyConfig_Mode = 0
	// Restrict outbound traffic to services defined in the service registry as well as those defined through ServiceEntries
	OutboundTrafficPolicyConfig_REGISTRY_ONLY OutboundTrafficPolicyConfig_Mode = 1
)

var OutboundTrafficPolicyConfig_Mode_name = map[int32]string{
	0: "ALLOW_ANY",
	1: "REGISTRY_ONLY",
}

var OutboundTrafficPolicyConfig_Mode_value = map[string]int32{
	"ALLOW_ANY":     0,
	"REGISTRY_ONLY": 1,
}

func (x OutboundTrafficPolicyConfig_Mode) String() string {
	return proto.EnumName(OutboundTrafficPolicyConfig_Mode_name, int32(x))
}

func (OutboundTrafficPolicyConfig_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{29, 0}
}

// ArchConfig specifies the pod scheduling target architecture(amd64, ppc64le, s390x) for all the Istio control plane components.
type ArchConfig struct {
	// Sets pod scheduling weight for amd64 arch
	Amd64 uint32 `protobuf:"varint,1,opt,name=amd64,proto3" json:"amd64,omitempty"`
	// Sets pod scheduling weight for ppc64le arch.
	Ppc64Le uint32 `protobuf:"varint,2,opt,name=ppc64le,proto3" json:"ppc64le,omitempty"`
	// Sets pod scheduling weight for s390x arch.
	S390X                uint32   `protobuf:"varint,3,opt,name=s390x,proto3" json:"s390x,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchConfig) Reset()         { *m = ArchConfig{} }
func (m *ArchConfig) String() string { return proto.CompactTextString(m) }
func (*ArchConfig) ProtoMessage()    {}
func (*ArchConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{0}
}
func (m *ArchConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchConfig.Merge(m, src)
}
func (m *ArchConfig) XXX_Size() int {
	return m.Size()
}
func (m *ArchConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ArchConfig proto.InternalMessageInfo

func (m *ArchConfig) GetAmd64() uint32 {
	if m != nil {
		return m.Amd64
	}
	return 0
}

func (m *ArchConfig) GetPpc64Le() uint32 {
	if m != nil {
		return m.Ppc64Le
	}
	return 0
}

func (m *ArchConfig) GetS390X() uint32 {
	if m != nil {
		return m.S390X
	}
	return 0
}

// Configuration for CNI.
type CNIConfig struct {
	// Controls whether CNI is enabled.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Hub                  string           `protobuf:"bytes,2,opt,name=hub,proto3" json:"hub,omitempty"`
	Tag                  *types.Value     `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Image                string           `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	PullPolicy           string           `protobuf:"bytes,5,opt,name=pullPolicy,proto3" json:"pullPolicy,omitempty"`
	CniBinDir            string           `protobuf:"bytes,6,opt,name=cniBinDir,proto3" json:"cniBinDir,omitempty"`
	CniConfDir           string           `protobuf:"bytes,7,opt,name=cniConfDir,proto3" json:"cniConfDir,omitempty"`
	CniConfFileName      string           `protobuf:"bytes,8,opt,name=cniConfFileName,proto3" json:"cniConfFileName,omitempty"`
	ExcludeNamespaces    []string         `protobuf:"bytes,9,rep,name=excludeNamespaces,proto3" json:"excludeNamespaces,omitempty"`
	PodAnnotations       *types.Struct    `protobuf:"bytes,10,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	PspClusterRole       string           `protobuf:"bytes,11,opt,name=psp_cluster_role,json=pspClusterRole,proto3" json:"psp_cluster_role,omitempty"`
	LogLevel             string           `protobuf:"bytes,12,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
	Repair               *CNIRepairConfig `protobuf:"bytes,13,opt,name=repair,proto3" json:"repair,omitempty"`
	Chained              *types.BoolValue `protobuf:"bytes,14,opt,name=chained,proto3" json:"chained,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CNIConfig) Reset()         { *m = CNIConfig{} }
func (m *CNIConfig) String() string { return proto.CompactTextString(m) }
func (*CNIConfig) ProtoMessage()    {}
func (*CNIConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{1}
}
func (m *CNIConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNIConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNIConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNIConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIConfig.Merge(m, src)
}
func (m *CNIConfig) XXX_Size() int {
	return m.Size()
}
func (m *CNIConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CNIConfig proto.InternalMessageInfo

func (m *CNIConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *CNIConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *CNIConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *CNIConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CNIConfig) GetPullPolicy() string {
	if m != nil {
		return m.PullPolicy
	}
	return ""
}

func (m *CNIConfig) GetCniBinDir() string {
	if m != nil {
		return m.CniBinDir
	}
	return ""
}

func (m *CNIConfig) GetCniConfDir() string {
	if m != nil {
		return m.CniConfDir
	}
	return ""
}

func (m *CNIConfig) GetCniConfFileName() string {
	if m != nil {
		return m.CniConfFileName
	}
	return ""
}

func (m *CNIConfig) GetExcludeNamespaces() []string {
	if m != nil {
		return m.ExcludeNamespaces
	}
	return nil
}

// Deprecated: Do not use.
func (m *CNIConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

func (m *CNIConfig) GetPspClusterRole() string {
	if m != nil {
		return m.PspClusterRole
	}
	return ""
}

func (m *CNIConfig) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *CNIConfig) GetRepair() *CNIRepairConfig {
	if m != nil {
		return m.Repair
	}
	return nil
}

func (m *CNIConfig) GetChained() *types.BoolValue {
	if m != nil {
		return m.Chained
	}
	return nil
}

type CNIRepairConfig struct {
	// Controls whether repair behavior is enabled.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Hub     string           `protobuf:"bytes,2,opt,name=hub,proto3" json:"hub,omitempty"`
	Tag     *types.Value     `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Image   string           `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// Controls whether various repair behaviors are enabled.
	LabelPods            bool     `protobuf:"varint,5,opt,name=labelPods,proto3" json:"labelPods,omitempty"`
	CreateEvents         string   `protobuf:"bytes,6,opt,name=createEvents,proto3" json:"createEvents,omitempty"` // Deprecated: Do not use.
	DeletePods           bool     `protobuf:"varint,7,opt,name=deletePods,proto3" json:"deletePods,omitempty"`
	BrokenPodLabelKey    string   `protobuf:"bytes,8,opt,name=brokenPodLabelKey,proto3" json:"brokenPodLabelKey,omitempty"`
	BrokenPodLabelValue  string   `protobuf:"bytes,9,opt,name=brokenPodLabelValue,proto3" json:"brokenPodLabelValue,omitempty"`
	InitContainerName    string   `protobuf:"bytes,10,opt,name=initContainerName,proto3" json:"initContainerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CNIRepairConfig) Reset()         { *m = CNIRepairConfig{} }
func (m *CNIRepairConfig) String() string { return proto.CompactTextString(m) }
func (*CNIRepairConfig) ProtoMessage()    {}
func (*CNIRepairConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{2}
}
func (m *CNIRepairConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNIRepairConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNIRepairConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNIRepairConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIRepairConfig.Merge(m, src)
}
func (m *CNIRepairConfig) XXX_Size() int {
	return m.Size()
}
func (m *CNIRepairConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIRepairConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CNIRepairConfig proto.InternalMessageInfo

func (m *CNIRepairConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *CNIRepairConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *CNIRepairConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *CNIRepairConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CNIRepairConfig) GetLabelPods() bool {
	if m != nil {
		return m.LabelPods
	}
	return false
}

// Deprecated: Do not use.
func (m *CNIRepairConfig) GetCreateEvents() string {
	if m != nil {
		return m.CreateEvents
	}
	return ""
}

func (m *CNIRepairConfig) GetDeletePods() bool {
	if m != nil {
		return m.DeletePods
	}
	return false
}

func (m *CNIRepairConfig) GetBrokenPodLabelKey() string {
	if m != nil {
		return m.BrokenPodLabelKey
	}
	return ""
}

func (m *CNIRepairConfig) GetBrokenPodLabelValue() string {
	if m != nil {
		return m.BrokenPodLabelValue
	}
	return ""
}

func (m *CNIRepairConfig) GetInitContainerName() string {
	if m != nil {
		return m.InitContainerName
	}
	return ""
}

// Configuration for CPU target utilization for HorizontalPodAutoscaler target.
type CPUTargetUtilizationConfig struct {
	// K8s utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	TargetAverageUtilization int32    `protobuf:"varint,1,opt,name=targetAverageUtilization,proto3" json:"targetAverageUtilization,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *CPUTargetUtilizationConfig) Reset()         { *m = CPUTargetUtilizationConfig{} }
func (m *CPUTargetUtilizationConfig) String() string { return proto.CompactTextString(m) }
func (*CPUTargetUtilizationConfig) ProtoMessage()    {}
func (*CPUTargetUtilizationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{3}
}
func (m *CPUTargetUtilizationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPUTargetUtilizationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPUTargetUtilizationConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPUTargetUtilizationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPUTargetUtilizationConfig.Merge(m, src)
}
func (m *CPUTargetUtilizationConfig) XXX_Size() int {
	return m.Size()
}
func (m *CPUTargetUtilizationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CPUTargetUtilizationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CPUTargetUtilizationConfig proto.InternalMessageInfo

func (m *CPUTargetUtilizationConfig) GetTargetAverageUtilization() int32 {
	if m != nil {
		return m.TargetAverageUtilization
	}
	return 0
}

// Mirrors Resources for unmarshaling.
type Resources struct {
	Limits               map[string]string `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Requests             map[string]string `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Resources) Reset()         { *m = Resources{} }
func (m *Resources) String() string { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()    {}
func (*Resources) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{4}
}
func (m *Resources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resources.Merge(m, src)
}
func (m *Resources) XXX_Size() int {
	return m.Size()
}
func (m *Resources) XXX_DiscardUnknown() {
	xxx_messageInfo_Resources.DiscardUnknown(m)
}

var xxx_messageInfo_Resources proto.InternalMessageInfo

func (m *Resources) GetLimits() map[string]string {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *Resources) GetRequests() map[string]string {
	if m != nil {
		return m.Requests
	}
	return nil
}

// Configuration for Core DNS.
type CoreDNSConfig struct {
	// Controls whether CoreDNS is enabled.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Image for Core DNS.
	CoreDNSImage       string `protobuf:"bytes,2,opt,name=coreDNSImage,proto3" json:"coreDNSImage,omitempty"`
	CoreDNSTag         string `protobuf:"bytes,3,opt,name=coreDNSTag,proto3" json:"coreDNSTag,omitempty"`
	CoreDNSPluginImage string `protobuf:"bytes,4,opt,name=coreDNSPluginImage,proto3" json:"coreDNSPluginImage,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector *types.Struct `protobuf:"bytes,5,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"` // Deprecated: Do not use.
	// Number of replicas for Core DNS.
	ReplicaCount uint32 `protobuf:"varint,6,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"` // Deprecated: Do not use.
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations *types.Struct `protobuf:"bytes,7,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *Resources `protobuf:"bytes,8,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxSurge *types.Value `protobuf:"bytes,9,opt,name=rollingMaxSurge,proto3" json:"rollingMaxSurge,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxUnavailable            *types.Value    `protobuf:"bytes,10,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"`                       // Deprecated: Do not use.
	PodAntiAffinityLabelSelector     []*types.Struct `protobuf:"bytes,11,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`         // Deprecated: Do not use.
	PodAntiAffinityTermLabelSelector []*types.Struct `protobuf:"bytes,12,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"` // Deprecated: Do not use.
	Tolerations                      []*types.Struct `protobuf:"bytes,13,rep,name=tolerations,proto3" json:"tolerations,omitempty"`                                           // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral             struct{}        `json:"-"`
	XXX_unrecognized                 []byte          `json:"-"`
	XXX_sizecache                    int32           `json:"-"`
}

func (m *CoreDNSConfig) Reset()         { *m = CoreDNSConfig{} }
func (m *CoreDNSConfig) String() string { return proto.CompactTextString(m) }
func (*CoreDNSConfig) ProtoMessage()    {}
func (*CoreDNSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{5}
}
func (m *CoreDNSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoreDNSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoreDNSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoreDNSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreDNSConfig.Merge(m, src)
}
func (m *CoreDNSConfig) XXX_Size() int {
	return m.Size()
}
func (m *CoreDNSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreDNSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CoreDNSConfig proto.InternalMessageInfo

func (m *CoreDNSConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *CoreDNSConfig) GetCoreDNSImage() string {
	if m != nil {
		return m.CoreDNSImage
	}
	return ""
}

func (m *CoreDNSConfig) GetCoreDNSTag() string {
	if m != nil {
		return m.CoreDNSTag
	}
	return ""
}

func (m *CoreDNSConfig) GetCoreDNSPluginImage() string {
	if m != nil {
		return m.CoreDNSPluginImage
	}
	return ""
}

// Deprecated: Do not use.
func (m *CoreDNSConfig) GetNodeSelector() *types.Struct {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *CoreDNSConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

// Deprecated: Do not use.
func (m *CoreDNSConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

// Deprecated: Do not use.
func (m *CoreDNSConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Deprecated: Do not use.
func (m *CoreDNSConfig) GetRollingMaxSurge() *types.Value {
	if m != nil {
		return m.RollingMaxSurge
	}
	return nil
}

// Deprecated: Do not use.
func (m *CoreDNSConfig) GetRollingMaxUnavailable() *types.Value {
	if m != nil {
		return m.RollingMaxUnavailable
	}
	return nil
}

// Deprecated: Do not use.
func (m *CoreDNSConfig) GetPodAntiAffinityLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *CoreDNSConfig) GetPodAntiAffinityTermLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *CoreDNSConfig) GetTolerations() []*types.Struct {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

// DefaultPodDisruptionBudgetConfig specifies the default pod disruption budget configuration.
//
// See https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
type DefaultPodDisruptionBudgetConfig struct {
	// Controls whether a PodDisruptionBudget with a default minAvailable value of 1 is created for each deployment.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DefaultPodDisruptionBudgetConfig) Reset()         { *m = DefaultPodDisruptionBudgetConfig{} }
func (m *DefaultPodDisruptionBudgetConfig) String() string { return proto.CompactTextString(m) }
func (*DefaultPodDisruptionBudgetConfig) ProtoMessage()    {}
func (*DefaultPodDisruptionBudgetConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{6}
}
func (m *DefaultPodDisruptionBudgetConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPodDisruptionBudgetConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefaultPodDisruptionBudgetConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefaultPodDisruptionBudgetConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPodDisruptionBudgetConfig.Merge(m, src)
}
func (m *DefaultPodDisruptionBudgetConfig) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPodDisruptionBudgetConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPodDisruptionBudgetConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPodDisruptionBudgetConfig proto.InternalMessageInfo

func (m *DefaultPodDisruptionBudgetConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// DefaultResourcesConfig specifies the default k8s resources settings for all Istio control plane components.
type DefaultResourcesConfig struct {
	// k8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Requests             *ResourcesRequestsConfig `protobuf:"bytes,1,opt,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DefaultResourcesConfig) Reset()         { *m = DefaultResourcesConfig{} }
func (m *DefaultResourcesConfig) String() string { return proto.CompactTextString(m) }
func (*DefaultResourcesConfig) ProtoMessage()    {}
func (*DefaultResourcesConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{7}
}
func (m *DefaultResourcesConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultResourcesConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefaultResourcesConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefaultResourcesConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultResourcesConfig.Merge(m, src)
}
func (m *DefaultResourcesConfig) XXX_Size() int {
	return m.Size()
}
func (m *DefaultResourcesConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultResourcesConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultResourcesConfig proto.InternalMessageInfo

func (m *DefaultResourcesConfig) GetRequests() *ResourcesRequestsConfig {
	if m != nil {
		return m.Requests
	}
	return nil
}

// Configuration for an egress gateway.
type EgressGatewayConfig struct {
	// Controls whether auto scaling with a HorizontalPodAutoscaler is enabled.
	AutoscaleEnabled *types.BoolValue `protobuf:"bytes,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// maxReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMax uint32 `protobuf:"varint,2,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// minReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMin   uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	ConnectTimeout string `protobuf:"bytes,4,opt,name=connectTimeout,proto3" json:"connectTimeout,omitempty"`
	// K8s utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu           *CPUTargetUtilizationConfig `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"` // Deprecated: Do not use.
	DrainDuration *types.Duration             `protobuf:"bytes,6,opt,name=drainDuration,proto3" json:"drainDuration,omitempty"`
	// Controls whether an egress gateway is enabled.
	Enabled *types.BoolValue `protobuf:"bytes,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Environment variables passed to the proxy container.
	Env    *types.Struct        `protobuf:"bytes,8,opt,name=env,proto3" json:"env,omitempty"`
	Labels *GatewayLabelsConfig `protobuf:"bytes,9,opt,name=labels,proto3" json:"labels,omitempty"`
	Name   string               `protobuf:"bytes,25,opt,name=name,proto3" json:"name,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector *types.Struct `protobuf:"bytes,10,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"` // Deprecated: Do not use.
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations *types.Struct `protobuf:"bytes,11,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	// Pod anti-affinity label selector.
	//
	// Specify the pod anti-affinity that allows you to constrain which nodes
	// your pod is eligible to be scheduled based on labels on pods that are
	// already running on the node rather than based on labels on nodes.
	// There are currently two types of anti-affinity:
	//    "requiredDuringSchedulingIgnoredDuringExecution"
	//    "preferredDuringSchedulingIgnoredDuringExecution"
	// which denote “hard” vs. “soft” requirements, you can define your values
	// in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
	// correspondingly.
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
	//
	// Examples:
	// podAntiAffinityLabelSelector:
	//  - key: security
	//    operator: In
	//    values: S1,S2
	//    topologyKey: "kubernetes.io/hostname"
	//  This pod anti-affinity rule says that the pod requires not to be scheduled
	//  onto a node if that node is already running a pod with label having key
	//  “security” and value “S1”.
	PodAntiAffinityLabelSelector []*types.Struct `protobuf:"bytes,12,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"` // Deprecated: Do not use.
	// See PodAntiAffinityLabelSelector.
	PodAntiAffinityTermLabelSelector []*types.Struct `protobuf:"bytes,13,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"` // Deprecated: Do not use.
	// Ports Configuration for the egress gateway service.
	Ports []*PortsConfig `protobuf:"bytes,14,rep,name=ports,proto3" json:"ports,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *Resources `protobuf:"bytes,15,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	// Config for secret volume mounts.
	SecretVolumes []*SecretVolume `protobuf:"bytes,16,rep,name=secretVolumes,proto3" json:"secretVolumes,omitempty"`
	// Annotations to add to the egress gateway service.
	ServiceAnnotations *types.Struct `protobuf:"bytes,17,opt,name=serviceAnnotations,proto3" json:"serviceAnnotations,omitempty"`
	// Service type.
	//
	// See https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type string `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	// Enables cross-cluster access using SNI matching.
	Zvpn        *ZeroVPNConfig  `protobuf:"bytes,19,opt,name=zvpn,proto3" json:"zvpn,omitempty"`
	Tolerations []*types.Struct `protobuf:"bytes,20,rep,name=tolerations,proto3" json:"tolerations,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxSurge *types.Value `protobuf:"bytes,21,opt,name=rollingMaxSurge,proto3" json:"rollingMaxSurge,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxUnavailable *types.Value    `protobuf:"bytes,22,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"` // Deprecated: Do not use.
	ConfigVolumes         []*types.Struct `protobuf:"bytes,23,rep,name=configVolumes,proto3" json:"configVolumes,omitempty"`
	AdditionalContainers  []*types.Struct `protobuf:"bytes,24,rep,name=additionalContainers,proto3" json:"additionalContainers,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}        `json:"-"`
	XXX_unrecognized      []byte          `json:"-"`
	XXX_sizecache         int32           `json:"-"`
}

func (m *EgressGatewayConfig) Reset()         { *m = EgressGatewayConfig{} }
func (m *EgressGatewayConfig) String() string { return proto.CompactTextString(m) }
func (*EgressGatewayConfig) ProtoMessage()    {}
func (*EgressGatewayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{8}
}
func (m *EgressGatewayConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EgressGatewayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EgressGatewayConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EgressGatewayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EgressGatewayConfig.Merge(m, src)
}
func (m *EgressGatewayConfig) XXX_Size() int {
	return m.Size()
}
func (m *EgressGatewayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EgressGatewayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EgressGatewayConfig proto.InternalMessageInfo

func (m *EgressGatewayConfig) GetAutoscaleEnabled() *types.BoolValue {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return nil
}

func (m *EgressGatewayConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

func (m *EgressGatewayConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

func (m *EgressGatewayConfig) GetConnectTimeout() string {
	if m != nil {
		return m.ConnectTimeout
	}
	return ""
}

// Deprecated: Do not use.
func (m *EgressGatewayConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *EgressGatewayConfig) GetDrainDuration() *types.Duration {
	if m != nil {
		return m.DrainDuration
	}
	return nil
}

func (m *EgressGatewayConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *EgressGatewayConfig) GetEnv() *types.Struct {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *EgressGatewayConfig) GetLabels() *GatewayLabelsConfig {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *EgressGatewayConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Deprecated: Do not use.
func (m *EgressGatewayConfig) GetNodeSelector() *types.Struct {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *EgressGatewayConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

// Deprecated: Do not use.
func (m *EgressGatewayConfig) GetPodAntiAffinityLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *EgressGatewayConfig) GetPodAntiAffinityTermLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (m *EgressGatewayConfig) GetPorts() []*PortsConfig {
	if m != nil {
		return m.Ports
	}
	return nil
}

// Deprecated: Do not use.
func (m *EgressGatewayConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *EgressGatewayConfig) GetSecretVolumes() []*SecretVolume {
	if m != nil {
		return m.SecretVolumes
	}
	return nil
}

func (m *EgressGatewayConfig) GetServiceAnnotations() *types.Struct {
	if m != nil {
		return m.ServiceAnnotations
	}
	return nil
}

func (m *EgressGatewayConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EgressGatewayConfig) GetZvpn() *ZeroVPNConfig {
	if m != nil {
		return m.Zvpn
	}
	return nil
}

// Deprecated: Do not use.
func (m *EgressGatewayConfig) GetTolerations() []*types.Struct {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

// Deprecated: Do not use.
func (m *EgressGatewayConfig) GetRollingMaxSurge() *types.Value {
	if m != nil {
		return m.RollingMaxSurge
	}
	return nil
}

// Deprecated: Do not use.
func (m *EgressGatewayConfig) GetRollingMaxUnavailable() *types.Value {
	if m != nil {
		return m.RollingMaxUnavailable
	}
	return nil
}

func (m *EgressGatewayConfig) GetConfigVolumes() []*types.Struct {
	if m != nil {
		return m.ConfigVolumes
	}
	return nil
}

func (m *EgressGatewayConfig) GetAdditionalContainers() []*types.Struct {
	if m != nil {
		return m.AdditionalContainers
	}
	return nil
}

// EnvoyMetricsConfig is a set of configuration options for Envoy metrics.
type EnvoyMetricsConfig struct {
	// Enables the Envoy Metrics Service.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Sets the destination Envoy Metrics Service address in Envoy.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Sets the destination Envoy Metrics Service port in Envoy.
	Port                 int32         `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	TlsSettings          *types.Struct `protobuf:"bytes,4,opt,name=tlsSettings,proto3" json:"tlsSettings,omitempty"`
	TcpKeepalive         *types.Struct `protobuf:"bytes,5,opt,name=tcpKeepalive,proto3" json:"tcpKeepalive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EnvoyMetricsConfig) Reset()         { *m = EnvoyMetricsConfig{} }
func (m *EnvoyMetricsConfig) String() string { return proto.CompactTextString(m) }
func (*EnvoyMetricsConfig) ProtoMessage()    {}
func (*EnvoyMetricsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{9}
}
func (m *EnvoyMetricsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvoyMetricsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvoyMetricsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnvoyMetricsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvoyMetricsConfig.Merge(m, src)
}
func (m *EnvoyMetricsConfig) XXX_Size() int {
	return m.Size()
}
func (m *EnvoyMetricsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvoyMetricsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EnvoyMetricsConfig proto.InternalMessageInfo

func (m *EnvoyMetricsConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *EnvoyMetricsConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *EnvoyMetricsConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *EnvoyMetricsConfig) GetTlsSettings() *types.Struct {
	if m != nil {
		return m.TlsSettings
	}
	return nil
}

func (m *EnvoyMetricsConfig) GetTcpKeepalive() *types.Struct {
	if m != nil {
		return m.TcpKeepalive
	}
	return nil
}

// GatewayLabelsConfig is a set of Configuration for gateway labels.
type GatewayLabelsConfig struct {
	App                  string   `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Istio                string   `protobuf:"bytes,2,opt,name=istio,proto3" json:"istio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayLabelsConfig) Reset()         { *m = GatewayLabelsConfig{} }
func (m *GatewayLabelsConfig) String() string { return proto.CompactTextString(m) }
func (*GatewayLabelsConfig) ProtoMessage()    {}
func (*GatewayLabelsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{10}
}
func (m *GatewayLabelsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayLabelsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayLabelsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayLabelsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayLabelsConfig.Merge(m, src)
}
func (m *GatewayLabelsConfig) XXX_Size() int {
	return m.Size()
}
func (m *GatewayLabelsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayLabelsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayLabelsConfig proto.InternalMessageInfo

func (m *GatewayLabelsConfig) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *GatewayLabelsConfig) GetIstio() string {
	if m != nil {
		return m.Istio
	}
	return ""
}

// Configuration for gateways.
type GatewaysConfig struct {
	// Configuration for an egress gateway.
	IstioEgressgateway *EgressGatewayConfig `protobuf:"bytes,1,opt,name=istio_egressgateway,json=istio-egressgateway,proto3" json:"istio_egressgateway,omitempty"`
	// Controls whether any gateways are enabled.
	Enabled *types.BoolValue `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Configuration for an ingress gateway.
	IstioIngressgateway  *IngressGatewayConfig `protobuf:"bytes,4,opt,name=istio_ingressgateway,json=istio-ingressgateway,proto3" json:"istio_ingressgateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GatewaysConfig) Reset()         { *m = GatewaysConfig{} }
func (m *GatewaysConfig) String() string { return proto.CompactTextString(m) }
func (*GatewaysConfig) ProtoMessage()    {}
func (*GatewaysConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{11}
}
func (m *GatewaysConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewaysConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewaysConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewaysConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewaysConfig.Merge(m, src)
}
func (m *GatewaysConfig) XXX_Size() int {
	return m.Size()
}
func (m *GatewaysConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewaysConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GatewaysConfig proto.InternalMessageInfo

func (m *GatewaysConfig) GetIstioEgressgateway() *EgressGatewayConfig {
	if m != nil {
		return m.IstioEgressgateway
	}
	return nil
}

func (m *GatewaysConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *GatewaysConfig) GetIstioIngressgateway() *IngressGatewayConfig {
	if m != nil {
		return m.IstioIngressgateway
	}
	return nil
}

// Global Configuration for Istio components.
type GlobalConfig struct {
	// Specifies pod scheduling arch(amd64, ppc64le, s390x) and weight as follows:
	//   0 - Never scheduled
	//   1 - Least preferred
	//   2 - No preference
	//   3 - Most preferred
	Arch         *ArchConfig     `protobuf:"bytes,1,opt,name=arch,proto3" json:"arch,omitempty"`
	Certificates []*types.Struct `protobuf:"bytes,40,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// Specifies the namespace for the configuration and validation component.
	ConfigNamespace     string `protobuf:"bytes,2,opt,name=configNamespace,proto3" json:"configNamespace,omitempty"`
	ConfigRootNamespace string `protobuf:"bytes,50,opt,name=configRootNamespace,proto3" json:"configRootNamespace,omitempty"`
	// Controls whether the server-side validation is enabled.
	ConfigValidation *types.BoolValue `protobuf:"bytes,3,opt,name=configValidation,proto3" json:"configValidation,omitempty"`
	// Controls whether the MTLS for communication between the control plane components is enabled.
	ControlPlaneSecurityEnabled     *types.BoolValue `protobuf:"bytes,4,opt,name=controlPlaneSecurityEnabled,proto3" json:"controlPlaneSecurityEnabled,omitempty"`
	DefaultConfigVisibilitySettings []string         `protobuf:"bytes,52,rep,name=defaultConfigVisibilitySettings,proto3" json:"defaultConfigVisibilitySettings,omitempty"`
	// Default k8s node selector for all the Istio control plane components
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	DefaultNodeSelector *types.Struct `protobuf:"bytes,6,opt,name=defaultNodeSelector,proto3" json:"defaultNodeSelector,omitempty"` // Deprecated: Do not use.
	// Specifies the default pod disruption budget configuration.
	DefaultPodDisruptionBudget *DefaultPodDisruptionBudgetConfig `protobuf:"bytes,7,opt,name=defaultPodDisruptionBudget,proto3" json:"defaultPodDisruptionBudget,omitempty"` // Deprecated: Do not use.
	// Controls whether the policy enforcement is enabled.
	DisablePolicyChecks *types.BoolValue `protobuf:"bytes,8,opt,name=disablePolicyChecks,proto3" json:"disablePolicyChecks,omitempty"`
	// Default k8s resources settings for all Istio control plane components.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	DefaultResources   *DefaultResourcesConfig `protobuf:"bytes,9,opt,name=defaultResources,proto3" json:"defaultResources,omitempty"`      // Deprecated: Do not use.
	DefaultTolerations []*types.Struct         `protobuf:"bytes,55,rep,name=defaultTolerations,proto3" json:"defaultTolerations,omitempty"` // Deprecated: Do not use.
	// Controls whether the helm test templates are enabled.
	EnableHelmTest *types.BoolValue `protobuf:"bytes,10,opt,name=enableHelmTest,proto3" json:"enableHelmTest,omitempty"`
	// Controls whether the distributed tracing for the applications is enabled.
	//
	// See https://opentracing.io/docs/overview/what-is-tracing/
	EnableTracing *types.BoolValue `protobuf:"bytes,11,opt,name=enableTracing,proto3" json:"enableTracing,omitempty"`
	// Specifies the docker hub for Istio images.
	Hub string `protobuf:"bytes,12,opt,name=hub,proto3" json:"hub,omitempty"`
	// Specifies the image pull policy for the Istio images. one of Always, Never, IfNotPresent.
	// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated.
	//
	// More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy  string   `protobuf:"bytes,13,opt,name=imagePullPolicy,proto3" json:"imagePullPolicy,omitempty"`
	ImagePullSecrets []string `protobuf:"bytes,37,rep,name=imagePullSecrets,proto3" json:"imagePullSecrets,omitempty"`
	// Specifies the default namespace for the Istio control plane components.
	IstioNamespace string `protobuf:"bytes,14,opt,name=istioNamespace,proto3" json:"istioNamespace,omitempty"`
	// Specifies the global locality load balancing settings.
	// Locality-weighted load balancing allows administrators to control the distribution of traffic to
	// endpoints based on the localities of where the traffic originates and where it will terminate.
	// Please set either failover or distribute configuration but not both.
	//
	// localityLbSetting:
	//   distribute:
	//   - from: "us-central1/*"
	//     to:
	//       "us-central1/*": 80
	//       "us-central2/*": 20
	//
	// localityLbSetting:
	//   failover:
	//   - from: us-east
	//     to: eu-west
	//   - from: us-west
	//     to: us-east
	LocalityLbSetting *types.Struct    `protobuf:"bytes,15,opt,name=localityLbSetting,proto3" json:"localityLbSetting,omitempty"`
	LogAsJson         *types.BoolValue `protobuf:"bytes,36,opt,name=logAsJson,proto3" json:"logAsJson,omitempty"`
	// Specifies the global logging level settings for the Istio control plane components.
	Logging *GlobalLoggingConfig `protobuf:"bytes,17,opt,name=logging,proto3" json:"logging,omitempty"`
	// Specifies the Configuration for Istio mesh expansion to bare metal.
	MeshExpansion *MeshExpansionConfig `protobuf:"bytes,18,opt,name=meshExpansion,proto3" json:"meshExpansion,omitempty"`
	MeshID        string               `protobuf:"bytes,53,opt,name=meshID,proto3" json:"meshID,omitempty"`
	// Configure the mesh networks to be used by the Split Horizon EDS.
	//
	// The following example defines two networks with different endpoints association methods.
	// For `network1` all endpoints that their IP belongs to the provided CIDR range will be
	// mapped to network1. The gateway for this network example is specified by its public IP
	// address and port.
	// The second network, `network2`, in this example is defined differently with all endpoints
	// retrieved through the specified Multi-Cluster registry being mapped to network2. The
	// gateway is also defined differently with the name of the gateway service on the remote
	// cluster. The public IP for the gateway will be determined from that remote service (only
	// LoadBalancer gateway service type is currently supported, for a NodePort type gateway service,
	// it still need to be configured manually).
	//
	// meshNetworks:
	//   network1:
	//     endpoints:
	//     - fromCidr: "192.168.0.1/24"
	//     gateways:
	//     - address: 1.1.1.1
	//       port: 80
	//   network2:
	//     endpoints:
	//     - fromRegistry: reg1
	//     gateways:
	//     - registryServiceName: istio-ingressgateway.istio-system.svc.cluster.local
	//       port: 443
	//
	MeshNetworks *types.Struct `protobuf:"bytes,19,opt,name=meshNetworks,proto3" json:"meshNetworks,omitempty"`
	// Specifies the monitor port number for all Istio control plane components.
	MonitoringPort uint32 `protobuf:"varint,20,opt,name=monitoringPort,proto3" json:"monitoringPort,omitempty"`
	// Specifies the MTLS settings for the applications that Istio manages.
	Mtls *MTLSConfig `protobuf:"bytes,21,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// Specifies the Configuration for Istio mesh across multiple clusters through Istio gateways.
	MultiCluster *MultiClusterConfig `protobuf:"bytes,22,opt,name=multiCluster,proto3" json:"multiCluster,omitempty"`
	Network      string              `protobuf:"bytes,39,opt,name=network,proto3" json:"network,omitempty"`
	// Custom DNS config for the pod to resolve names of services in other
	// clusters. Use this to add additional search domains, and other settings.
	// see https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#dns-config
	// This does not apply to gateway pods as they typically need a different
	// set of DNS settings than the normal application pods (e.g. in multicluster scenarios).
	PodDNSSearchNamespaces       []string         `protobuf:"bytes,43,rep,name=podDNSSearchNamespaces,proto3" json:"podDNSSearchNamespaces,omitempty"`
	OmitSidecarInjectorConfigMap *types.BoolValue `protobuf:"bytes,38,opt,name=omitSidecarInjectorConfigMap,proto3" json:"omitSidecarInjectorConfigMap,omitempty"`
	// Controls whether to restrict the applications namespace the controller manages;
	// If set it to false, the controller watches all namespaces.
	OneNamespace           *types.BoolValue `protobuf:"bytes,23,opt,name=oneNamespace,proto3" json:"oneNamespace,omitempty"`
	OperatorManageWebhooks *types.BoolValue `protobuf:"bytes,41,opt,name=operatorManageWebhooks,proto3" json:"operatorManageWebhooks,omitempty"`
	// Controls the default behavior of the sidecar for handling outbound traffic from the application.
	OutboundTrafficPolicy *OutboundTrafficPolicyConfig `protobuf:"bytes,24,opt,name=outboundTrafficPolicy,proto3" json:"outboundTrafficPolicy,omitempty"`
	// Controls whether to allow traffic in cases when the mixer policy service cannot be reached.
	PolicyCheckFailOpen *types.BoolValue `protobuf:"bytes,25,opt,name=policyCheckFailOpen,proto3" json:"policyCheckFailOpen,omitempty"`
	// Specifies the namespace for the policy component.
	PolicyNamespace string `protobuf:"bytes,26,opt,name=policyNamespace,proto3" json:"policyNamespace,omitempty"`
	// Specifies the k8s priorityClassName for the istio control plane components.
	//
	// See https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
	PriorityClassName   string `protobuf:"bytes,27,opt,name=priorityClassName,proto3" json:"priorityClassName,omitempty"` // Deprecated: Do not use.
	PrometheusNamespace string `protobuf:"bytes,51,opt,name=prometheusNamespace,proto3" json:"prometheusNamespace,omitempty"`
	// Specifies how proxies are configured within Istio.
	Proxy *ProxyConfig `protobuf:"bytes,28,opt,name=proxy,proto3" json:"proxy,omitempty"`
	// Specifies the Configuration for proxy_init container which sets the pods' networking to intercept the inbound/outbound traffic.
	ProxyInit *ProxyInitConfig `protobuf:"bytes,29,opt,name=proxy_init,proto3" json:"proxy_init,omitempty"`
	// Specifies the Configuration for the SecretDiscoveryService instead of using K8S secrets to mount the certificates.
	Sds *SDSConfig `protobuf:"bytes,30,opt,name=sds,proto3" json:"sds,omitempty"`
	// Specifies the tag for the Istio docker images.
	Tag *types.Value `protobuf:"bytes,31,opt,name=tag,proto3" json:"tag,omitempty"`
	// Specifies the namespace for the telemetry component.
	TelemetryNamespace string `protobuf:"bytes,32,opt,name=telemetryNamespace,proto3" json:"telemetryNamespace,omitempty"`
	// Specifies the Configuration for each of the supported tracers.
	Tracer *TracerConfig `protobuf:"bytes,33,opt,name=tracer,proto3" json:"tracer,omitempty"`
	// Specifies the trust domain that corresponds to the root cert of CA.
	TrustDomain string `protobuf:"bytes,34,opt,name=trustDomain,proto3" json:"trustDomain,omitempty"`
	// The trust domain aliases represent the aliases of trustDomain.
	TrustDomainAliases []string `protobuf:"bytes,42,rep,name=trustDomainAliases,proto3" json:"trustDomainAliases,omitempty"`
	// Controls whether to use of Mesh Configuration Protocol to distribute configuration.
	UseMCP *types.BoolValue `protobuf:"bytes,35,opt,name=useMCP,proto3" json:"useMCP,omitempty"`
	// Settings for remote cluster.
	// Controls whether to use the Istio remote control plane
	IstioRemote              *types.BoolValue `protobuf:"bytes,44,opt,name=istioRemote,proto3" json:"istioRemote,omitempty"`
	CreateRemoteSvcEndpoints *types.BoolValue `protobuf:"bytes,45,opt,name=createRemoteSvcEndpoints,proto3" json:"createRemoteSvcEndpoints,omitempty"`
	// If set, a selector-less service and endpoint for istio-pilot are created with the remotePilotAddress IP,
	// which ensures the istio-pilot. is DNS resolvable in the remote cluster.
	RemotePilotCreateSvcEndpoint *types.BoolValue `protobuf:"bytes,46,opt,name=remotePilotCreateSvcEndpoint,proto3" json:"remotePilotCreateSvcEndpoint,omitempty"`
	// Specifies the Istio control plane’s policy Pod IP address or remote cluster DNS resolvable hostname.
	RemotePolicyAddress string `protobuf:"bytes,47,opt,name=remotePolicyAddress,proto3" json:"remotePolicyAddress,omitempty"`
	// Specifies the Istio control plane’s pilot Pod IP address or remote cluster DNS resolvable hostname.
	RemotePilotAddress string `protobuf:"bytes,48,opt,name=remotePilotAddress,proto3" json:"remotePilotAddress,omitempty"`
	// Specifies the Istio control plane’s telemetry Pod IP address or remote cluster DNS resolvable hostname
	RemoteTelemetryAddress string `protobuf:"bytes,49,opt,name=remoteTelemetryAddress,proto3" json:"remoteTelemetryAddress,omitempty"`
	// Specifies the configution of istiod
	Istiod *IstiodConfig `protobuf:"bytes,54,opt,name=istiod,proto3" json:"istiod,omitempty"`
	// Configure the Pilot certificate provider.
	// Currently, two providers are supported: "kubernetes" and "citadel".
	PilotCertProvider string `protobuf:"bytes,56,opt,name=pilotCertProvider,proto3" json:"pilotCertProvider,omitempty"`
	// Configure the policy for validating JWT.
	// Currently, two options are supported: "third-party-jwt" and "first-party-jwt".
	JwtPolicy string `protobuf:"bytes,57,opt,name=jwtPolicy,proto3" json:"jwtPolicy,omitempty"`
	// Specifies the configuration for Security Token Service.
	Sts *STSConfig `protobuf:"bytes,58,opt,name=sts,proto3" json:"sts,omitempty"`
	// Configures the revision this control plane is a part of
	Revision string `protobuf:"bytes,59,opt,name=revision,proto3" json:"revision,omitempty"`
	// Controls whether the in-cluster MTLS key and certs are loaded from the secret volume mounts.
	MountMtlsCerts *types.BoolValue `protobuf:"bytes,60,opt,name=mountMtlsCerts,proto3" json:"mountMtlsCerts,omitempty"`
	// The address of the CA for CSR.
	CaAddress            string   `protobuf:"bytes,61,opt,name=caAddress,proto3" json:"caAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalConfig) Reset()         { *m = GlobalConfig{} }
func (m *GlobalConfig) String() string { return proto.CompactTextString(m) }
func (*GlobalConfig) ProtoMessage()    {}
func (*GlobalConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{12}
}
func (m *GlobalConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalConfig.Merge(m, src)
}
func (m *GlobalConfig) XXX_Size() int {
	return m.Size()
}
func (m *GlobalConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalConfig proto.InternalMessageInfo

func (m *GlobalConfig) GetArch() *ArchConfig {
	if m != nil {
		return m.Arch
	}
	return nil
}

func (m *GlobalConfig) GetCertificates() []*types.Struct {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *GlobalConfig) GetConfigNamespace() string {
	if m != nil {
		return m.ConfigNamespace
	}
	return ""
}

func (m *GlobalConfig) GetConfigRootNamespace() string {
	if m != nil {
		return m.ConfigRootNamespace
	}
	return ""
}

func (m *GlobalConfig) GetConfigValidation() *types.BoolValue {
	if m != nil {
		return m.ConfigValidation
	}
	return nil
}

func (m *GlobalConfig) GetControlPlaneSecurityEnabled() *types.BoolValue {
	if m != nil {
		return m.ControlPlaneSecurityEnabled
	}
	return nil
}

func (m *GlobalConfig) GetDefaultConfigVisibilitySettings() []string {
	if m != nil {
		return m.DefaultConfigVisibilitySettings
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalConfig) GetDefaultNodeSelector() *types.Struct {
	if m != nil {
		return m.DefaultNodeSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalConfig) GetDefaultPodDisruptionBudget() *DefaultPodDisruptionBudgetConfig {
	if m != nil {
		return m.DefaultPodDisruptionBudget
	}
	return nil
}

func (m *GlobalConfig) GetDisablePolicyChecks() *types.BoolValue {
	if m != nil {
		return m.DisablePolicyChecks
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalConfig) GetDefaultResources() *DefaultResourcesConfig {
	if m != nil {
		return m.DefaultResources
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalConfig) GetDefaultTolerations() []*types.Struct {
	if m != nil {
		return m.DefaultTolerations
	}
	return nil
}

func (m *GlobalConfig) GetEnableHelmTest() *types.BoolValue {
	if m != nil {
		return m.EnableHelmTest
	}
	return nil
}

func (m *GlobalConfig) GetEnableTracing() *types.BoolValue {
	if m != nil {
		return m.EnableTracing
	}
	return nil
}

func (m *GlobalConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *GlobalConfig) GetImagePullPolicy() string {
	if m != nil {
		return m.ImagePullPolicy
	}
	return ""
}

func (m *GlobalConfig) GetImagePullSecrets() []string {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

func (m *GlobalConfig) GetIstioNamespace() string {
	if m != nil {
		return m.IstioNamespace
	}
	return ""
}

func (m *GlobalConfig) GetLocalityLbSetting() *types.Struct {
	if m != nil {
		return m.LocalityLbSetting
	}
	return nil
}

func (m *GlobalConfig) GetLogAsJson() *types.BoolValue {
	if m != nil {
		return m.LogAsJson
	}
	return nil
}

func (m *GlobalConfig) GetLogging() *GlobalLoggingConfig {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *GlobalConfig) GetMeshExpansion() *MeshExpansionConfig {
	if m != nil {
		return m.MeshExpansion
	}
	return nil
}

func (m *GlobalConfig) GetMeshID() string {
	if m != nil {
		return m.MeshID
	}
	return ""
}

func (m *GlobalConfig) GetMeshNetworks() *types.Struct {
	if m != nil {
		return m.MeshNetworks
	}
	return nil
}

func (m *GlobalConfig) GetMonitoringPort() uint32 {
	if m != nil {
		return m.MonitoringPort
	}
	return 0
}

func (m *GlobalConfig) GetMtls() *MTLSConfig {
	if m != nil {
		return m.Mtls
	}
	return nil
}

func (m *GlobalConfig) GetMultiCluster() *MultiClusterConfig {
	if m != nil {
		return m.MultiCluster
	}
	return nil
}

func (m *GlobalConfig) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *GlobalConfig) GetPodDNSSearchNamespaces() []string {
	if m != nil {
		return m.PodDNSSearchNamespaces
	}
	return nil
}

func (m *GlobalConfig) GetOmitSidecarInjectorConfigMap() *types.BoolValue {
	if m != nil {
		return m.OmitSidecarInjectorConfigMap
	}
	return nil
}

func (m *GlobalConfig) GetOneNamespace() *types.BoolValue {
	if m != nil {
		return m.OneNamespace
	}
	return nil
}

func (m *GlobalConfig) GetOperatorManageWebhooks() *types.BoolValue {
	if m != nil {
		return m.OperatorManageWebhooks
	}
	return nil
}

func (m *GlobalConfig) GetOutboundTrafficPolicy() *OutboundTrafficPolicyConfig {
	if m != nil {
		return m.OutboundTrafficPolicy
	}
	return nil
}

func (m *GlobalConfig) GetPolicyCheckFailOpen() *types.BoolValue {
	if m != nil {
		return m.PolicyCheckFailOpen
	}
	return nil
}

func (m *GlobalConfig) GetPolicyNamespace() string {
	if m != nil {
		return m.PolicyNamespace
	}
	return ""
}

// Deprecated: Do not use.
func (m *GlobalConfig) GetPriorityClassName() string {
	if m != nil {
		return m.PriorityClassName
	}
	return ""
}

func (m *GlobalConfig) GetPrometheusNamespace() string {
	if m != nil {
		return m.PrometheusNamespace
	}
	return ""
}

func (m *GlobalConfig) GetProxy() *ProxyConfig {
	if m != nil {
		return m.Proxy
	}
	return nil
}

func (m *GlobalConfig) GetProxyInit() *ProxyInitConfig {
	if m != nil {
		return m.ProxyInit
	}
	return nil
}

func (m *GlobalConfig) GetSds() *SDSConfig {
	if m != nil {
		return m.Sds
	}
	return nil
}

func (m *GlobalConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *GlobalConfig) GetTelemetryNamespace() string {
	if m != nil {
		return m.TelemetryNamespace
	}
	return ""
}

func (m *GlobalConfig) GetTracer() *TracerConfig {
	if m != nil {
		return m.Tracer
	}
	return nil
}

func (m *GlobalConfig) GetTrustDomain() string {
	if m != nil {
		return m.TrustDomain
	}
	return ""
}

func (m *GlobalConfig) GetTrustDomainAliases() []string {
	if m != nil {
		return m.TrustDomainAliases
	}
	return nil
}

func (m *GlobalConfig) GetUseMCP() *types.BoolValue {
	if m != nil {
		return m.UseMCP
	}
	return nil
}

func (m *GlobalConfig) GetIstioRemote() *types.BoolValue {
	if m != nil {
		return m.IstioRemote
	}
	return nil
}

func (m *GlobalConfig) GetCreateRemoteSvcEndpoints() *types.BoolValue {
	if m != nil {
		return m.CreateRemoteSvcEndpoints
	}
	return nil
}

func (m *GlobalConfig) GetRemotePilotCreateSvcEndpoint() *types.BoolValue {
	if m != nil {
		return m.RemotePilotCreateSvcEndpoint
	}
	return nil
}

func (m *GlobalConfig) GetRemotePolicyAddress() string {
	if m != nil {
		return m.RemotePolicyAddress
	}
	return ""
}

func (m *GlobalConfig) GetRemotePilotAddress() string {
	if m != nil {
		return m.RemotePilotAddress
	}
	return ""
}

func (m *GlobalConfig) GetRemoteTelemetryAddress() string {
	if m != nil {
		return m.RemoteTelemetryAddress
	}
	return ""
}

func (m *GlobalConfig) GetIstiod() *IstiodConfig {
	if m != nil {
		return m.Istiod
	}
	return nil
}

func (m *GlobalConfig) GetPilotCertProvider() string {
	if m != nil {
		return m.PilotCertProvider
	}
	return ""
}

func (m *GlobalConfig) GetJwtPolicy() string {
	if m != nil {
		return m.JwtPolicy
	}
	return ""
}

func (m *GlobalConfig) GetSts() *STSConfig {
	if m != nil {
		return m.Sts
	}
	return nil
}

func (m *GlobalConfig) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *GlobalConfig) GetMountMtlsCerts() *types.BoolValue {
	if m != nil {
		return m.MountMtlsCerts
	}
	return nil
}

func (m *GlobalConfig) GetCaAddress() string {
	if m != nil {
		return m.CaAddress
	}
	return ""
}

// Configuration for Security Token Service (STS) server.
//
// See https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16
type STSConfig struct {
	ServicePort          uint32   `protobuf:"varint,1,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *STSConfig) Reset()         { *m = STSConfig{} }
func (m *STSConfig) String() string { return proto.CompactTextString(m) }
func (*STSConfig) ProtoMessage()    {}
func (*STSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{13}
}
func (m *STSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *STSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_STSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *STSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_STSConfig.Merge(m, src)
}
func (m *STSConfig) XXX_Size() int {
	return m.Size()
}
func (m *STSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_STSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_STSConfig proto.InternalMessageInfo

func (m *STSConfig) GetServicePort() uint32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

type IstiodConfig struct {
	// If enabled, all control plane functionality will be handled by a single deployment.
	// Deprecated. This field is always ignored and assumed true.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"` // Deprecated: Do not use.
	// If enabled, istiod will perform config analysis
	EnableAnalysis       *types.BoolValue `protobuf:"bytes,2,opt,name=enableAnalysis,proto3" json:"enableAnalysis,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *IstiodConfig) Reset()         { *m = IstiodConfig{} }
func (m *IstiodConfig) String() string { return proto.CompactTextString(m) }
func (*IstiodConfig) ProtoMessage()    {}
func (*IstiodConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{14}
}
func (m *IstiodConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstiodConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstiodConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstiodConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstiodConfig.Merge(m, src)
}
func (m *IstiodConfig) XXX_Size() int {
	return m.Size()
}
func (m *IstiodConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IstiodConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IstiodConfig proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *IstiodConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *IstiodConfig) GetEnableAnalysis() *types.BoolValue {
	if m != nil {
		return m.EnableAnalysis
	}
	return nil
}

// GlobalLoggingConfig specifies the global logging level settings for the Istio control plane components.
type GlobalLoggingConfig struct {
	// Comma-separated minimum per-scope logging level of messages to output, in the form of <scope>:<level>,<scope>:<level>
	// The control plane has different scopes depending on component, but can configure default log level across all components
	// If empty, default scope and level will be used as configured in code
	Level                string   `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalLoggingConfig) Reset()         { *m = GlobalLoggingConfig{} }
func (m *GlobalLoggingConfig) String() string { return proto.CompactTextString(m) }
func (*GlobalLoggingConfig) ProtoMessage()    {}
func (*GlobalLoggingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{15}
}
func (m *GlobalLoggingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalLoggingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalLoggingConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalLoggingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalLoggingConfig.Merge(m, src)
}
func (m *GlobalLoggingConfig) XXX_Size() int {
	return m.Size()
}
func (m *GlobalLoggingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalLoggingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalLoggingConfig proto.InternalMessageInfo

func (m *GlobalLoggingConfig) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

// Configuration for an ingress gateway.
type IngressGatewayConfig struct {
	// Controls whether auto scaling with a HorizontalPodAutoscaler is enabled.
	AutoscaleEnabled *types.BoolValue `protobuf:"bytes,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// maxReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMax uint32 `protobuf:"varint,2,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// minReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMin   uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	ConnectTimeout string `protobuf:"bytes,4,opt,name=connectTimeout,proto3" json:"connectTimeout,omitempty"`
	// K8s utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu           *CPUTargetUtilizationConfig `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"` // Deprecated: Do not use.
	CustomService *types.BoolValue            `protobuf:"bytes,6,opt,name=customService,proto3" json:"customService,omitempty"`
	Debug         string                      `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
	Domain        string                      `protobuf:"bytes,8,opt,name=domain,proto3" json:"domain,omitempty"`
	DrainDuration *types.Duration             `protobuf:"bytes,9,opt,name=drainDuration,proto3" json:"drainDuration,omitempty"`
	// Controls whether an ingress gateway is enabled.
	Enabled *types.BoolValue `protobuf:"bytes,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Environment variables passed to the proxy container.
	Env                      *types.Struct        `protobuf:"bytes,11,opt,name=env,proto3" json:"env,omitempty"`
	ExternalIPs              []string             `protobuf:"bytes,12,rep,name=externalIPs,proto3" json:"externalIPs,omitempty"`
	K8SIngress               *types.BoolValue     `protobuf:"bytes,13,opt,name=k8sIngress,proto3" json:"k8sIngress,omitempty"`
	K8SIngressHttps          *types.BoolValue     `protobuf:"bytes,14,opt,name=k8sIngressHttps,proto3" json:"k8sIngressHttps,omitempty"`
	Labels                   *GatewayLabelsConfig `protobuf:"bytes,15,opt,name=labels,proto3" json:"labels,omitempty"`
	LoadBalancerIP           string               `protobuf:"bytes,16,opt,name=loadBalancerIP,proto3" json:"loadBalancerIP,omitempty"`
	LoadBalancerSourceRanges []string             `protobuf:"bytes,17,rep,name=loadBalancerSourceRanges,proto3" json:"loadBalancerSourceRanges,omitempty"`
	MeshExpansionPorts       []*PortsConfig       `protobuf:"bytes,18,rep,name=meshExpansionPorts,proto3" json:"meshExpansionPorts,omitempty"`
	Name                     string               `protobuf:"bytes,44,opt,name=name,proto3" json:"name,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector *types.Struct `protobuf:"bytes,19,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"` // Deprecated: Do not use.
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations *types.Struct `protobuf:"bytes,20,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	// See EgressGatewayConfig.
	PodAntiAffinityLabelSelector []*types.Struct `protobuf:"bytes,21,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"` // Deprecated: Do not use.
	// See EgressGatewayConfig.
	PodAntiAffinityTermLabelSelector []*types.Struct `protobuf:"bytes,22,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"` // Deprecated: Do not use.
	// Port Configuration for the ingress gateway.
	Ports []*PortsConfig `protobuf:"bytes,23,rep,name=ports,proto3" json:"ports,omitempty"`
	// Number of replicas for the ingress gateway Deployment.
	ReplicaCount uint32 `protobuf:"varint,24,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"` // Deprecated: Do not use.
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *types.Struct `protobuf:"bytes,25,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	// Secret Discovery Service (SDS) Configuration for ingress gateway.
	Sds *IngressGatewaySdsConfig `protobuf:"bytes,26,opt,name=sds,proto3" json:"sds,omitempty"`
	// Config for secret volume mounts.
	SecretVolumes []*SecretVolume `protobuf:"bytes,27,rep,name=secretVolumes,proto3" json:"secretVolumes,omitempty"`
	// Annotations to add to the egress gateway service.
	ServiceAnnotations *types.Struct `protobuf:"bytes,28,opt,name=serviceAnnotations,proto3" json:"serviceAnnotations,omitempty"`
	// Service type.
	//
	// See https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type string `protobuf:"bytes,29,opt,name=type,proto3" json:"type,omitempty"`
	// Enables cross-cluster access using SNI matching.
	Zvpn *IngressGatewayZvpnConfig `protobuf:"bytes,30,opt,name=zvpn,proto3" json:"zvpn,omitempty"`
	// K8s rolling update strategy
	RollingMaxSurge *types.Value `protobuf:"bytes,31,opt,name=rollingMaxSurge,proto3" json:"rollingMaxSurge,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxUnavailable *types.Value `protobuf:"bytes,32,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"` // Deprecated: Do not use.
	// Ports to explicitly check for readiness
	ApplicationPorts       string           `protobuf:"bytes,33,opt,name=applicationPorts,proto3" json:"applicationPorts,omitempty"`
	ExternalTrafficPolicy  string           `protobuf:"bytes,34,opt,name=externalTrafficPolicy,proto3" json:"externalTrafficPolicy,omitempty"`
	Tolerations            []*types.Struct  `protobuf:"bytes,35,rep,name=tolerations,proto3" json:"tolerations,omitempty"` // Deprecated: Do not use.
	IngressPorts           []*types.Struct  `protobuf:"bytes,36,rep,name=ingressPorts,proto3" json:"ingressPorts,omitempty"`
	AdditionalContainers   []*types.Struct  `protobuf:"bytes,37,rep,name=additionalContainers,proto3" json:"additionalContainers,omitempty"`
	ConfigVolumes          []*types.Struct  `protobuf:"bytes,38,rep,name=configVolumes,proto3" json:"configVolumes,omitempty"`
	Certificates           *types.BoolValue `protobuf:"bytes,39,opt,name=certificates,proto3" json:"certificates,omitempty"`
	Tls                    *types.BoolValue `protobuf:"bytes,40,opt,name=tls,proto3" json:"tls,omitempty"`
	TelemetryAddonGateways *types.Struct    `protobuf:"bytes,41,opt,name=telemetry_addon_gateways,json=telemetryAddonGateways,proto3" json:"telemetry_addon_gateways,omitempty"`
	Hosts                  []*types.Struct  `protobuf:"bytes,42,rep,name=hosts,proto3" json:"hosts,omitempty"`
	TelemetryDomainName    string           `protobuf:"bytes,43,opt,name=telemetry_domain_name,json=telemetryDomainName,proto3" json:"telemetry_domain_name,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}         `json:"-"`
	XXX_unrecognized       []byte           `json:"-"`
	XXX_sizecache          int32            `json:"-"`
}

func (m *IngressGatewayConfig) Reset()         { *m = IngressGatewayConfig{} }
func (m *IngressGatewayConfig) String() string { return proto.CompactTextString(m) }
func (*IngressGatewayConfig) ProtoMessage()    {}
func (*IngressGatewayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{16}
}
func (m *IngressGatewayConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IngressGatewayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IngressGatewayConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IngressGatewayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressGatewayConfig.Merge(m, src)
}
func (m *IngressGatewayConfig) XXX_Size() int {
	return m.Size()
}
func (m *IngressGatewayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressGatewayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IngressGatewayConfig proto.InternalMessageInfo

func (m *IngressGatewayConfig) GetAutoscaleEnabled() *types.BoolValue {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return nil
}

func (m *IngressGatewayConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

func (m *IngressGatewayConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

func (m *IngressGatewayConfig) GetConnectTimeout() string {
	if m != nil {
		return m.ConnectTimeout
	}
	return ""
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *IngressGatewayConfig) GetCustomService() *types.BoolValue {
	if m != nil {
		return m.CustomService
	}
	return nil
}

func (m *IngressGatewayConfig) GetDebug() string {
	if m != nil {
		return m.Debug
	}
	return ""
}

func (m *IngressGatewayConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *IngressGatewayConfig) GetDrainDuration() *types.Duration {
	if m != nil {
		return m.DrainDuration
	}
	return nil
}

func (m *IngressGatewayConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *IngressGatewayConfig) GetEnv() *types.Struct {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *IngressGatewayConfig) GetExternalIPs() []string {
	if m != nil {
		return m.ExternalIPs
	}
	return nil
}

func (m *IngressGatewayConfig) GetK8SIngress() *types.BoolValue {
	if m != nil {
		return m.K8SIngress
	}
	return nil
}

func (m *IngressGatewayConfig) GetK8SIngressHttps() *types.BoolValue {
	if m != nil {
		return m.K8SIngressHttps
	}
	return nil
}

func (m *IngressGatewayConfig) GetLabels() *GatewayLabelsConfig {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *IngressGatewayConfig) GetLoadBalancerIP() string {
	if m != nil {
		return m.LoadBalancerIP
	}
	return ""
}

func (m *IngressGatewayConfig) GetLoadBalancerSourceRanges() []string {
	if m != nil {
		return m.LoadBalancerSourceRanges
	}
	return nil
}

func (m *IngressGatewayConfig) GetMeshExpansionPorts() []*PortsConfig {
	if m != nil {
		return m.MeshExpansionPorts
	}
	return nil
}

func (m *IngressGatewayConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetNodeSelector() *types.Struct {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetPodAntiAffinityLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetPodAntiAffinityTermLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (m *IngressGatewayConfig) GetPorts() []*PortsConfig {
	if m != nil {
		return m.Ports
	}
	return nil
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetResources() *types.Struct {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *IngressGatewayConfig) GetSds() *IngressGatewaySdsConfig {
	if m != nil {
		return m.Sds
	}
	return nil
}

func (m *IngressGatewayConfig) GetSecretVolumes() []*SecretVolume {
	if m != nil {
		return m.SecretVolumes
	}
	return nil
}

func (m *IngressGatewayConfig) GetServiceAnnotations() *types.Struct {
	if m != nil {
		return m.ServiceAnnotations
	}
	return nil
}

func (m *IngressGatewayConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *IngressGatewayConfig) GetZvpn() *IngressGatewayZvpnConfig {
	if m != nil {
		return m.Zvpn
	}
	return nil
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetRollingMaxSurge() *types.Value {
	if m != nil {
		return m.RollingMaxSurge
	}
	return nil
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetRollingMaxUnavailable() *types.Value {
	if m != nil {
		return m.RollingMaxUnavailable
	}
	return nil
}

func (m *IngressGatewayConfig) GetApplicationPorts() string {
	if m != nil {
		return m.ApplicationPorts
	}
	return ""
}

func (m *IngressGatewayConfig) GetExternalTrafficPolicy() string {
	if m != nil {
		return m.ExternalTrafficPolicy
	}
	return ""
}

// Deprecated: Do not use.
func (m *IngressGatewayConfig) GetTolerations() []*types.Struct {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *IngressGatewayConfig) GetIngressPorts() []*types.Struct {
	if m != nil {
		return m.IngressPorts
	}
	return nil
}

func (m *IngressGatewayConfig) GetAdditionalContainers() []*types.Struct {
	if m != nil {
		return m.AdditionalContainers
	}
	return nil
}

func (m *IngressGatewayConfig) GetConfigVolumes() []*types.Struct {
	if m != nil {
		return m.ConfigVolumes
	}
	return nil
}

func (m *IngressGatewayConfig) GetCertificates() *types.BoolValue {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *IngressGatewayConfig) GetTls() *types.BoolValue {
	if m != nil {
		return m.Tls
	}
	return nil
}

func (m *IngressGatewayConfig) GetTelemetryAddonGateways() *types.Struct {
	if m != nil {
		return m.TelemetryAddonGateways
	}
	return nil
}

func (m *IngressGatewayConfig) GetHosts() []*types.Struct {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *IngressGatewayConfig) GetTelemetryDomainName() string {
	if m != nil {
		return m.TelemetryDomainName
	}
	return ""
}

// Secret Discovery Service (SDS) Configuration for ingress gateway.
type IngressGatewaySdsConfig struct {
	// If true, ingress gateway fetches credentials from SDS server to handle TLS connections.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// SDS server that watches kubernetes secrets and provisions credentials to ingress gateway.
	// This server runs in the same pod as ingress gateway.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources            *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *IngressGatewaySdsConfig) Reset()         { *m = IngressGatewaySdsConfig{} }
func (m *IngressGatewaySdsConfig) String() string { return proto.CompactTextString(m) }
func (*IngressGatewaySdsConfig) ProtoMessage()    {}
func (*IngressGatewaySdsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{17}
}
func (m *IngressGatewaySdsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IngressGatewaySdsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IngressGatewaySdsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IngressGatewaySdsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressGatewaySdsConfig.Merge(m, src)
}
func (m *IngressGatewaySdsConfig) XXX_Size() int {
	return m.Size()
}
func (m *IngressGatewaySdsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressGatewaySdsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IngressGatewaySdsConfig proto.InternalMessageInfo

func (m *IngressGatewaySdsConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *IngressGatewaySdsConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

// Deprecated: Do not use.
func (m *IngressGatewaySdsConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

// IngressGatewayZvpnConfig enables cross-cluster access using SNI matching.
type IngressGatewayZvpnConfig struct {
	// Controls whether ZeroVPN is enabled.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Suffix               string           `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *IngressGatewayZvpnConfig) Reset()         { *m = IngressGatewayZvpnConfig{} }
func (m *IngressGatewayZvpnConfig) String() string { return proto.CompactTextString(m) }
func (*IngressGatewayZvpnConfig) ProtoMessage()    {}
func (*IngressGatewayZvpnConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{18}
}
func (m *IngressGatewayZvpnConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IngressGatewayZvpnConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IngressGatewayZvpnConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IngressGatewayZvpnConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressGatewayZvpnConfig.Merge(m, src)
}
func (m *IngressGatewayZvpnConfig) XXX_Size() int {
	return m.Size()
}
func (m *IngressGatewayZvpnConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressGatewayZvpnConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IngressGatewayZvpnConfig proto.InternalMessageInfo

func (m *IngressGatewayZvpnConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *IngressGatewayZvpnConfig) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

// Configuration for Kubernetes environment adapter in mixer.
type KubernetesEnvMixerAdapterConfig struct {
	// Enables the Kubernetes env adapter in Mixer.
	//
	// See: https://istio.io/docs/reference/config/policy-and-telemetry/adapters/kubernetesenv/
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *KubernetesEnvMixerAdapterConfig) Reset()         { *m = KubernetesEnvMixerAdapterConfig{} }
func (m *KubernetesEnvMixerAdapterConfig) String() string { return proto.CompactTextString(m) }
func (*KubernetesEnvMixerAdapterConfig) ProtoMessage()    {}
func (*KubernetesEnvMixerAdapterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{19}
}
func (m *KubernetesEnvMixerAdapterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesEnvMixerAdapterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubernetesEnvMixerAdapterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubernetesEnvMixerAdapterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesEnvMixerAdapterConfig.Merge(m, src)
}
func (m *KubernetesEnvMixerAdapterConfig) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesEnvMixerAdapterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesEnvMixerAdapterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesEnvMixerAdapterConfig proto.InternalMessageInfo

func (m *KubernetesEnvMixerAdapterConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// Configuration for when mixer starts rejecting grpc requests.
type LoadSheddingConfig struct {
	LatencyThreshold     string   `protobuf:"bytes,1,opt,name=latencyThreshold,proto3" json:"latencyThreshold,omitempty"`
	Mode                 Mode     `protobuf:"varint,2,opt,name=mode,proto3,enum=v1alpha1.Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadSheddingConfig) Reset()         { *m = LoadSheddingConfig{} }
func (m *LoadSheddingConfig) String() string { return proto.CompactTextString(m) }
func (*LoadSheddingConfig) ProtoMessage()    {}
func (*LoadSheddingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{20}
}
func (m *LoadSheddingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadSheddingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadSheddingConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadSheddingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadSheddingConfig.Merge(m, src)
}
func (m *LoadSheddingConfig) XXX_Size() int {
	return m.Size()
}
func (m *LoadSheddingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadSheddingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LoadSheddingConfig proto.InternalMessageInfo

func (m *LoadSheddingConfig) GetLatencyThreshold() string {
	if m != nil {
		return m.LatencyThreshold
	}
	return ""
}

func (m *LoadSheddingConfig) GetMode() Mode {
	if m != nil {
		return m.Mode
	}
	return Mode_disabled
}

// MTLS settings for the applications that Istio manages.
type MTLSConfig struct {
	// Enables MTLS for service to service traffic.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Auto                 *types.BoolValue `protobuf:"bytes,2,opt,name=auto,proto3" json:"auto,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MTLSConfig) Reset()         { *m = MTLSConfig{} }
func (m *MTLSConfig) String() string { return proto.CompactTextString(m) }
func (*MTLSConfig) ProtoMessage()    {}
func (*MTLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{21}
}
func (m *MTLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MTLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MTLSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MTLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MTLSConfig.Merge(m, src)
}
func (m *MTLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *MTLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MTLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MTLSConfig proto.InternalMessageInfo

func (m *MTLSConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *MTLSConfig) GetAuto() *types.BoolValue {
	if m != nil {
		return m.Auto
	}
	return nil
}

// Configuration for Istio mesh expansion to bare metal.
type MeshExpansionConfig struct {
	// Exposes Pilot and Citadel mTLS on the ingress gateway.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Exposes Pilot and Citadel mTLS and the plain text Pilot ports on an internal gateway.
	UseILB               *types.BoolValue `protobuf:"bytes,2,opt,name=useILB,proto3" json:"useILB,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MeshExpansionConfig) Reset()         { *m = MeshExpansionConfig{} }
func (m *MeshExpansionConfig) String() string { return proto.CompactTextString(m) }
func (*MeshExpansionConfig) ProtoMessage()    {}
func (*MeshExpansionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{22}
}
func (m *MeshExpansionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshExpansionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshExpansionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshExpansionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshExpansionConfig.Merge(m, src)
}
func (m *MeshExpansionConfig) XXX_Size() int {
	return m.Size()
}
func (m *MeshExpansionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshExpansionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MeshExpansionConfig proto.InternalMessageInfo

func (m *MeshExpansionConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *MeshExpansionConfig) GetUseILB() *types.BoolValue {
	if m != nil {
		return m.UseILB
	}
	return nil
}

// Configuration for Mixer Telemetry adapters.
type MixerTelemetryAdaptersConfig struct {
	// Configuration for Kubernetes environment adapter in mixer.
	Kubernetesenv *KubernetesEnvMixerAdapterConfig `protobuf:"bytes,1,opt,name=kubernetesenv,proto3" json:"kubernetesenv,omitempty"`
	// Configuration for Prometheus adapter in mixer.
	Prometheus *PrometheusMixerAdapterConfig `protobuf:"bytes,2,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	// Configuration for stdio adapter in mixer, recommended for debug usage only.
	Stdio *StdioMixerAdapterConfig `protobuf:"bytes,3,opt,name=stdio,proto3" json:"stdio,omitempty"`
	//
	Stackdriver *StackdriverMixerAdapterConfig `protobuf:"bytes,4,opt,name=stackdriver,proto3" json:"stackdriver,omitempty"`
	// Sets the --useAdapterCRDs mixer startup argument.
	UseAdapterCRDs       *types.BoolValue `protobuf:"bytes,5,opt,name=useAdapterCRDs,proto3" json:"useAdapterCRDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MixerTelemetryAdaptersConfig) Reset()         { *m = MixerTelemetryAdaptersConfig{} }
func (m *MixerTelemetryAdaptersConfig) String() string { return proto.CompactTextString(m) }
func (*MixerTelemetryAdaptersConfig) ProtoMessage()    {}
func (*MixerTelemetryAdaptersConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{23}
}
func (m *MixerTelemetryAdaptersConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixerTelemetryAdaptersConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixerTelemetryAdaptersConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixerTelemetryAdaptersConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixerTelemetryAdaptersConfig.Merge(m, src)
}
func (m *MixerTelemetryAdaptersConfig) XXX_Size() int {
	return m.Size()
}
func (m *MixerTelemetryAdaptersConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MixerTelemetryAdaptersConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MixerTelemetryAdaptersConfig proto.InternalMessageInfo

func (m *MixerTelemetryAdaptersConfig) GetKubernetesenv() *KubernetesEnvMixerAdapterConfig {
	if m != nil {
		return m.Kubernetesenv
	}
	return nil
}

func (m *MixerTelemetryAdaptersConfig) GetPrometheus() *PrometheusMixerAdapterConfig {
	if m != nil {
		return m.Prometheus
	}
	return nil
}

func (m *MixerTelemetryAdaptersConfig) GetStdio() *StdioMixerAdapterConfig {
	if m != nil {
		return m.Stdio
	}
	return nil
}

func (m *MixerTelemetryAdaptersConfig) GetStackdriver() *StackdriverMixerAdapterConfig {
	if m != nil {
		return m.Stackdriver
	}
	return nil
}

func (m *MixerTelemetryAdaptersConfig) GetUseAdapterCRDs() *types.BoolValue {
	if m != nil {
		return m.UseAdapterCRDs
	}
	return nil
}

// Configuration for Mixer Policy adapters.
type MixerPolicyAdaptersConfig struct {
	// Configuration for Kubernetes environment adapter in mixer.
	Kubernetesenv *KubernetesEnvMixerAdapterConfig `protobuf:"bytes,1,opt,name=kubernetesenv,proto3" json:"kubernetesenv,omitempty"`
	// Configuration for Prometheus adapter in mixer.
	Prometheus *PrometheusMixerAdapterConfig `protobuf:"bytes,2,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	// Configuration for stdio adapter in mixer, recommended for debug usage only.
	Stdio *StdioMixerAdapterConfig `protobuf:"bytes,3,opt,name=stdio,proto3" json:"stdio,omitempty"`
	//
	Stackdriver *StackdriverMixerAdapterConfig `protobuf:"bytes,4,opt,name=stackdriver,proto3" json:"stackdriver,omitempty"`
	// Sets the --useAdapterCRDs mixer startup argument.
	UseAdapterCRDs       *types.BoolValue `protobuf:"bytes,5,opt,name=useAdapterCRDs,proto3" json:"useAdapterCRDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MixerPolicyAdaptersConfig) Reset()         { *m = MixerPolicyAdaptersConfig{} }
func (m *MixerPolicyAdaptersConfig) String() string { return proto.CompactTextString(m) }
func (*MixerPolicyAdaptersConfig) ProtoMessage()    {}
func (*MixerPolicyAdaptersConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{24}
}
func (m *MixerPolicyAdaptersConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixerPolicyAdaptersConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixerPolicyAdaptersConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixerPolicyAdaptersConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixerPolicyAdaptersConfig.Merge(m, src)
}
func (m *MixerPolicyAdaptersConfig) XXX_Size() int {
	return m.Size()
}
func (m *MixerPolicyAdaptersConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MixerPolicyAdaptersConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MixerPolicyAdaptersConfig proto.InternalMessageInfo

func (m *MixerPolicyAdaptersConfig) GetKubernetesenv() *KubernetesEnvMixerAdapterConfig {
	if m != nil {
		return m.Kubernetesenv
	}
	return nil
}

func (m *MixerPolicyAdaptersConfig) GetPrometheus() *PrometheusMixerAdapterConfig {
	if m != nil {
		return m.Prometheus
	}
	return nil
}

func (m *MixerPolicyAdaptersConfig) GetStdio() *StdioMixerAdapterConfig {
	if m != nil {
		return m.Stdio
	}
	return nil
}

func (m *MixerPolicyAdaptersConfig) GetStackdriver() *StackdriverMixerAdapterConfig {
	if m != nil {
		return m.Stackdriver
	}
	return nil
}

func (m *MixerPolicyAdaptersConfig) GetUseAdapterCRDs() *types.BoolValue {
	if m != nil {
		return m.UseAdapterCRDs
	}
	return nil
}

// Configuration for Mixer.
type MixerConfig struct {
	// MixerPolicyConfig is set of configurations for Mixer Policy
	Policy *MixerPolicyConfig `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// MixerTelemetryConfig is set of configurations for Mixer Telemetry
	Telemetry *MixerTelemetryConfig `protobuf:"bytes,2,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	// Configuration for different mixer adapters.
	Adapters             *MixerTelemetryAdaptersConfig `protobuf:"bytes,3,opt,name=adapters,proto3" json:"adapters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *MixerConfig) Reset()         { *m = MixerConfig{} }
func (m *MixerConfig) String() string { return proto.CompactTextString(m) }
func (*MixerConfig) ProtoMessage()    {}
func (*MixerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{25}
}
func (m *MixerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixerConfig.Merge(m, src)
}
func (m *MixerConfig) XXX_Size() int {
	return m.Size()
}
func (m *MixerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MixerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MixerConfig proto.InternalMessageInfo

func (m *MixerConfig) GetPolicy() *MixerPolicyConfig {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *MixerConfig) GetTelemetry() *MixerTelemetryConfig {
	if m != nil {
		return m.Telemetry
	}
	return nil
}

func (m *MixerConfig) GetAdapters() *MixerTelemetryAdaptersConfig {
	if m != nil {
		return m.Adapters
	}
	return nil
}

// Configuration for Mixer Policy.
type MixerPolicyConfig struct {
	// Controls whether a HorizontalPodAutoscaler is installed for Mixer Policy.
	AutoscaleEnabled *types.BoolValue `protobuf:"bytes,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// Maximum number of replicas in the HorizontalPodAutoscaler for Mixer Policy.
	AutoscaleMax uint32 `protobuf:"varint,2,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// Minimum number of replicas in the HorizontalPodAutoscaler for Mixer Policy.
	AutoscaleMin uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// Target CPU utilization used in HorizontalPodAutoscaler.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu *CPUTargetUtilizationConfig `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty"` // Deprecated: Do not use.
	// Controls whether Mixer Policy is enabled
	Enabled *types.BoolValue `protobuf:"bytes,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Image name used for Mixer Policy.
	//
	// This can be set either to image name if hub is also set, or can be set to the full hub:name string.
	//
	// Examples: custom-mixer, docker.io/someuser:custom-mixer
	Image string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	// K8s annotations to attach to mixer policy deployment
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations *types.Struct `protobuf:"bytes,7,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	// Number of replicas in the Mixer Policy Deployment
	ReplicaCount uint32 `protobuf:"varint,8,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"` // Deprecated: Do not use.
	// Configuration for different mixer adapters.
	Adapters *MixerPolicyAdaptersConfig `protobuf:"bytes,9,opt,name=adapters,proto3" json:"adapters,omitempty"`
	// Controls whether to enable the sticky session setting when choosing backend pods.
	SessionAffinityEnabled *types.BoolValue `protobuf:"bytes,10,opt,name=sessionAffinityEnabled,proto3" json:"sessionAffinityEnabled,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *Resources `protobuf:"bytes,11,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxSurge *types.Value `protobuf:"bytes,12,opt,name=rollingMaxSurge,proto3" json:"rollingMaxSurge,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxUnavailable            *types.Value    `protobuf:"bytes,13,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"`                       // Deprecated: Do not use.
	PodAntiAffinityLabelSelector     []*types.Struct `protobuf:"bytes,14,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`         // Deprecated: Do not use.
	PodAntiAffinityTermLabelSelector []*types.Struct `protobuf:"bytes,15,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"` // Deprecated: Do not use.
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector *types.Struct `protobuf:"bytes,16,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"` // Deprecated: Do not use.
	// Environment variables passed to the Mixer container.
	//
	// Examples:
	// env:
	//   ENV_VAR_1: value1
	//   ENV_VAR_2: value2
	Env                  *types.Struct   `protobuf:"bytes,17,opt,name=env,proto3" json:"env,omitempty"`
	Tolerations          []*types.Struct `protobuf:"bytes,18,rep,name=tolerations,proto3" json:"tolerations,omitempty"` // Deprecated: Do not use.
	Hub                  string          `protobuf:"bytes,19,opt,name=hub,proto3" json:"hub,omitempty"`
	Tag                  *types.Value    `protobuf:"bytes,20,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MixerPolicyConfig) Reset()         { *m = MixerPolicyConfig{} }
func (m *MixerPolicyConfig) String() string { return proto.CompactTextString(m) }
func (*MixerPolicyConfig) ProtoMessage()    {}
func (*MixerPolicyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{26}
}
func (m *MixerPolicyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixerPolicyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixerPolicyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixerPolicyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixerPolicyConfig.Merge(m, src)
}
func (m *MixerPolicyConfig) XXX_Size() int {
	return m.Size()
}
func (m *MixerPolicyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MixerPolicyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MixerPolicyConfig proto.InternalMessageInfo

func (m *MixerPolicyConfig) GetAutoscaleEnabled() *types.BoolValue {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return nil
}

func (m *MixerPolicyConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

func (m *MixerPolicyConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *MixerPolicyConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *MixerPolicyConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *MixerPolicyConfig) GetAdapters() *MixerPolicyAdaptersConfig {
	if m != nil {
		return m.Adapters
	}
	return nil
}

func (m *MixerPolicyConfig) GetSessionAffinityEnabled() *types.BoolValue {
	if m != nil {
		return m.SessionAffinityEnabled
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetRollingMaxSurge() *types.Value {
	if m != nil {
		return m.RollingMaxSurge
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetRollingMaxUnavailable() *types.Value {
	if m != nil {
		return m.RollingMaxUnavailable
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetPodAntiAffinityLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetPodAntiAffinityTermLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetNodeSelector() *types.Struct {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *MixerPolicyConfig) GetEnv() *types.Struct {
	if m != nil {
		return m.Env
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerPolicyConfig) GetTolerations() []*types.Struct {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *MixerPolicyConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *MixerPolicyConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

// Configuration for Mixer Telemetry.
type MixerTelemetryConfig struct {
	// Controls whether a HorizontalPodAutoscaler is installed for Mixer Telemetry.
	AutoscaleEnabled *types.BoolValue `protobuf:"bytes,2,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// Maximum number of replicas in the HorizontalPodAutoscaler for Mixer Telemetry.
	AutoscaleMax uint32 `protobuf:"varint,3,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// Minimum number of replicas in the HorizontalPodAutoscaler for Mixer Telemetry.
	AutoscaleMin uint32 `protobuf:"varint,4,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// Target CPU utilization used in HorizontalPodAutoscaler.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu *CPUTargetUtilizationConfig `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"` // Deprecated: Do not use.
	// Controls whether Mixer Telemetry is enabled.
	Enabled *types.BoolValue `protobuf:"bytes,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Environment variables passed to the Mixer container.
	//
	// Examples:
	// env:
	//   ENV_VAR_1: value1
	//   ENV_VAR_2: value2
	Env *types.Struct `protobuf:"bytes,7,opt,name=env,proto3" json:"env,omitempty"`
	// Image name used for Mixer Telemetry.
	//
	// This can be set either to image name if hub is also set, or can be set to the full hub:name string.
	//
	// Examples: custom-mixer, docker.io/someuser:custom-mixer
	Image string `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	// LoadSheddingConfig configs when mixer starts rejecting grpc requests.
	Loadshedding *LoadSheddingConfig `protobuf:"bytes,9,opt,name=loadshedding,proto3" json:"loadshedding,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector *types.Struct `protobuf:"bytes,10,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"` // Deprecated: Do not use.
	// K8s annotations to attach to mixer telemetry deployment
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations *types.Struct `protobuf:"bytes,11,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	// Number of replicas in the Mixer Telemetry Deployment.
	ReplicaCount uint32 `protobuf:"varint,12,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxSurge string `protobuf:"bytes,15,opt,name=rollingMaxSurge,proto3" json:"rollingMaxSurge,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxUnavailable string `protobuf:"bytes,16,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"` // Deprecated: Do not use.
	// Controls whether to use of Mesh Configuration Protocol to distribute configuration.
	UseMCP                *types.BoolValue `protobuf:"bytes,17,opt,name=useMCP,proto3" json:"useMCP,omitempty"`
	ReportBatchMaxTime    string           `protobuf:"bytes,18,opt,name=reportBatchMaxTime,proto3" json:"reportBatchMaxTime,omitempty"`
	ReportBatchMaxEntries uint32           `protobuf:"varint,19,opt,name=reportBatchMaxEntries,proto3" json:"reportBatchMaxEntries,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *Resources `protobuf:"bytes,13,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	// Controls whether to enable the sticky session setting when choosing backend pods.
	SessionAffinityEnabled           *types.BoolValue `protobuf:"bytes,14,opt,name=sessionAffinityEnabled,proto3" json:"sessionAffinityEnabled,omitempty"`
	PodAntiAffinityLabelSelector     []*types.Struct  `protobuf:"bytes,20,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`         // Deprecated: Do not use.
	PodAntiAffinityTermLabelSelector []*types.Struct  `protobuf:"bytes,21,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"` // Deprecated: Do not use.
	Tolerations                      []*types.Struct  `protobuf:"bytes,22,rep,name=tolerations,proto3" json:"tolerations,omitempty"`                                           // Deprecated: Do not use.
	Hub                              string           `protobuf:"bytes,23,opt,name=hub,proto3" json:"hub,omitempty"`
	Tag                              *types.Value     `protobuf:"bytes,24,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}         `json:"-"`
	XXX_unrecognized                 []byte           `json:"-"`
	XXX_sizecache                    int32            `json:"-"`
}

func (m *MixerTelemetryConfig) Reset()         { *m = MixerTelemetryConfig{} }
func (m *MixerTelemetryConfig) String() string { return proto.CompactTextString(m) }
func (*MixerTelemetryConfig) ProtoMessage()    {}
func (*MixerTelemetryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{27}
}
func (m *MixerTelemetryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixerTelemetryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixerTelemetryConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixerTelemetryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixerTelemetryConfig.Merge(m, src)
}
func (m *MixerTelemetryConfig) XXX_Size() int {
	return m.Size()
}
func (m *MixerTelemetryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MixerTelemetryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MixerTelemetryConfig proto.InternalMessageInfo

func (m *MixerTelemetryConfig) GetAutoscaleEnabled() *types.BoolValue {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return nil
}

func (m *MixerTelemetryConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

func (m *MixerTelemetryConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *MixerTelemetryConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *MixerTelemetryConfig) GetEnv() *types.Struct {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *MixerTelemetryConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *MixerTelemetryConfig) GetLoadshedding() *LoadSheddingConfig {
	if m != nil {
		return m.Loadshedding
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetNodeSelector() *types.Struct {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetRollingMaxSurge() string {
	if m != nil {
		return m.RollingMaxSurge
	}
	return ""
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetRollingMaxUnavailable() string {
	if m != nil {
		return m.RollingMaxUnavailable
	}
	return ""
}

func (m *MixerTelemetryConfig) GetUseMCP() *types.BoolValue {
	if m != nil {
		return m.UseMCP
	}
	return nil
}

func (m *MixerTelemetryConfig) GetReportBatchMaxTime() string {
	if m != nil {
		return m.ReportBatchMaxTime
	}
	return ""
}

func (m *MixerTelemetryConfig) GetReportBatchMaxEntries() uint32 {
	if m != nil {
		return m.ReportBatchMaxEntries
	}
	return 0
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *MixerTelemetryConfig) GetSessionAffinityEnabled() *types.BoolValue {
	if m != nil {
		return m.SessionAffinityEnabled
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetPodAntiAffinityLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetPodAntiAffinityTermLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *MixerTelemetryConfig) GetTolerations() []*types.Struct {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *MixerTelemetryConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *MixerTelemetryConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

// MultiClusterConfig specifies the Configuration for Istio mesh across multiple clusters through the istio gateways.
type MultiClusterConfig struct {
	// Enables the connection between two kubernetes clusters via their respective ingressgateway services.
	// Use if the pods in each cluster cannot directly talk to one another.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClusterName          string           `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MultiClusterConfig) Reset()         { *m = MultiClusterConfig{} }
func (m *MultiClusterConfig) String() string { return proto.CompactTextString(m) }
func (*MultiClusterConfig) ProtoMessage()    {}
func (*MultiClusterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{28}
}
func (m *MultiClusterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiClusterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiClusterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiClusterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiClusterConfig.Merge(m, src)
}
func (m *MultiClusterConfig) XXX_Size() int {
	return m.Size()
}
func (m *MultiClusterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiClusterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MultiClusterConfig proto.InternalMessageInfo

func (m *MultiClusterConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *MultiClusterConfig) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

// OutboundTrafficPolicyConfig controls the default behavior of the sidecar for handling outbound traffic from the application.
type OutboundTrafficPolicyConfig struct {
	Mode                 OutboundTrafficPolicyConfig_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=v1alpha1.OutboundTrafficPolicyConfig_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *OutboundTrafficPolicyConfig) Reset()         { *m = OutboundTrafficPolicyConfig{} }
func (m *OutboundTrafficPolicyConfig) String() string { return proto.CompactTextString(m) }
func (*OutboundTrafficPolicyConfig) ProtoMessage()    {}
func (*OutboundTrafficPolicyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{29}
}
func (m *OutboundTrafficPolicyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundTrafficPolicyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundTrafficPolicyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundTrafficPolicyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundTrafficPolicyConfig.Merge(m, src)
}
func (m *OutboundTrafficPolicyConfig) XXX_Size() int {
	return m.Size()
}
func (m *OutboundTrafficPolicyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundTrafficPolicyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundTrafficPolicyConfig proto.InternalMessageInfo

func (m *OutboundTrafficPolicyConfig) GetMode() OutboundTrafficPolicyConfig_Mode {
	if m != nil {
		return m.Mode
	}
	return OutboundTrafficPolicyConfig_ALLOW_ANY
}

// Configuration for Pilot.
type PilotConfig struct {
	// Controls whether Pilot is enabled.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Controls whether a HorizontalPodAutoscaler is installed for Pilot.
	AutoscaleEnabled *types.BoolValue `protobuf:"bytes,2,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// Minimum number of replicas in the HorizontalPodAutoscaler for Pilot.
	AutoscaleMin uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// Maximum number of replicas in the HorizontalPodAutoscaler for Pilot.
	AutoscaleMax uint32 `protobuf:"varint,4,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// Number of replicas in the Pilot Deployment.
	ReplicaCount uint32 `protobuf:"varint,5,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"` // Deprecated: Do not use.
	// Image name used for Pilot.
	//
	// This can be set either to image name if hub is also set, or can be set to the full hub:name string.
	//
	// Examples: custom-pilot, docker.io/someuser:custom-pilot
	Image string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	// Controls whether a sidecar proxy is installed in the Pilot pod.
	//
	// Setting to true installs a proxy in the Pilot pod, used primarily for collecting Pilot telemetry.
	Sidecar *types.BoolValue `protobuf:"bytes,7,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
	// Trace sampling fraction.
	//
	// Used to set the fraction of time that traces are sampled. Higher values are more accurate but add CPU overhead.
	//
	// Allowed values: 0.0 to 1.0
	TraceSampling float64 `protobuf:"fixed64,8,opt,name=traceSampling,proto3" json:"traceSampling,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *Resources `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	// Namespace that the configuration management feature is installed into, if different from Pilot namespace.
	ConfigNamespace string `protobuf:"bytes,10,opt,name=configNamespace,proto3" json:"configNamespace,omitempty"`
	// Target CPU utilization used in HorizontalPodAutoscaler.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu *CPUTargetUtilizationConfig `protobuf:"bytes,11,opt,name=cpu,proto3" json:"cpu,omitempty"` // Deprecated: Do not use.
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector *types.Struct `protobuf:"bytes,12,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"` // Deprecated: Do not use.
	// Maximum duration that a sidecar can be connected to a pilot.
	//
	// This setting balances out load across pilot instances, but adds some resource overhead.
	//
	// Examples: 300s, 30m, 1h
	KeepaliveMaxServerConnectionAge *types.Duration `protobuf:"bytes,13,opt,name=keepaliveMaxServerConnectionAge,proto3" json:"keepaliveMaxServerConnectionAge,omitempty"`
	// Labels that are added to Pilot pods.
	//
	// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	DeploymentLabels *types.Struct `protobuf:"bytes,14,opt,name=deploymentLabels,proto3" json:"deploymentLabels,omitempty"`
	// See EgressGatewayConfig.
	PodAntiAffinityLabelSelector []*types.Struct `protobuf:"bytes,16,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"` // Deprecated: Do not use.
	// See EgressGatewayConfig.
	PodAntiAffinityTermLabelSelector []*types.Struct `protobuf:"bytes,17,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"` // Deprecated: Do not use.
	// Configuration settings passed to Pilot as a ConfigMap.
	//
	// This controls whether the mesh config map, generated from values.yaml is generated.
	// If false, pilot wil use default values or user-supplied values, in that order of preference.
	ConfigMap *types.BoolValue `protobuf:"bytes,18,opt,name=configMap,proto3" json:"configMap,omitempty"`
	// Controls legacy k8s ingress. Only one pilot profile should enable ingress support.
	Ingress *PilotIngressConfig `protobuf:"bytes,19,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// Controls whether Pilot is configured through the Mesh Control Protocol (MCP).
	//
	// If set to true, Pilot requires an MCP server (like Galley) to be installed.
	UseMCP *types.BoolValue `protobuf:"bytes,20,opt,name=useMCP,proto3" json:"useMCP,omitempty"`
	// Environment variables passed to the Pilot container.
	//
	// Examples:
	// env:
	//   ENV_VAR_1: value1
	//   ENV_VAR_2: value2
	Env *types.Struct `protobuf:"bytes,21,opt,name=env,proto3" json:"env,omitempty"`
	// Controls whether Istio policy is applied to Pilot.
	Policy *PilotPolicyConfig `protobuf:"bytes,22,opt,name=policy,proto3" json:"policy,omitempty"`
	// K8s rolling update strategy
	RollingMaxSurge *types.Value `protobuf:"bytes,24,opt,name=rollingMaxSurge,proto3" json:"rollingMaxSurge,omitempty"` // Deprecated: Do not use.
	// K8s rolling update strategy
	RollingMaxUnavailable *types.Value `protobuf:"bytes,25,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"` // Deprecated: Do not use.
	//
	Tolerations   []*types.Struct `protobuf:"bytes,26,rep,name=tolerations,proto3" json:"tolerations,omitempty"` // Deprecated: Do not use.
	AppNamespaces []*types.Struct `protobuf:"bytes,27,rep,name=appNamespaces,proto3" json:"appNamespaces,omitempty"`
	// if protocol sniffing is enabled for outbound
	EnableProtocolSniffingForOutbound *types.BoolValue `protobuf:"bytes,28,opt,name=enableProtocolSniffingForOutbound,proto3" json:"enableProtocolSniffingForOutbound,omitempty"`
	// if protocol sniffing is enabled for inbound
	EnableProtocolSniffingForInbound *types.BoolValue `protobuf:"bytes,29,opt,name=enableProtocolSniffingForInbound,proto3" json:"enableProtocolSniffingForInbound,omitempty"`
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations *types.Struct `protobuf:"bytes,30,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	// ConfigSource describes a source of configuration data for networking
	// rules, and other Istio configuration artifacts. Multiple data sources
	// can be configured for a single control plane.
	ConfigSource            *PilotConfigSource `protobuf:"bytes,31,opt,name=configSource,proto3" json:"configSource,omitempty"`
	JwksResolverExtraRootCA string             `protobuf:"bytes,32,opt,name=jwksResolverExtraRootCA,proto3" json:"jwksResolverExtraRootCA,omitempty"`
	Plugins                 []*types.Struct    `protobuf:"bytes,33,rep,name=plugins,proto3" json:"plugins,omitempty"`
	Hub                     string             `protobuf:"bytes,34,opt,name=hub,proto3" json:"hub,omitempty"`
	Tag                     *types.Value       `protobuf:"bytes,35,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}           `json:"-"`
	XXX_unrecognized        []byte             `json:"-"`
	XXX_sizecache           int32              `json:"-"`
}

func (m *PilotConfig) Reset()         { *m = PilotConfig{} }
func (m *PilotConfig) String() string { return proto.CompactTextString(m) }
func (*PilotConfig) ProtoMessage()    {}
func (*PilotConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{30}
}
func (m *PilotConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PilotConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PilotConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PilotConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PilotConfig.Merge(m, src)
}
func (m *PilotConfig) XXX_Size() int {
	return m.Size()
}
func (m *PilotConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PilotConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PilotConfig proto.InternalMessageInfo

func (m *PilotConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *PilotConfig) GetAutoscaleEnabled() *types.BoolValue {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return nil
}

func (m *PilotConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

func (m *PilotConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

// Deprecated: Do not use.
func (m *PilotConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *PilotConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PilotConfig) GetSidecar() *types.BoolValue {
	if m != nil {
		return m.Sidecar
	}
	return nil
}

func (m *PilotConfig) GetTraceSampling() float64 {
	if m != nil {
		return m.TraceSampling
	}
	return 0
}

// Deprecated: Do not use.
func (m *PilotConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *PilotConfig) GetConfigNamespace() string {
	if m != nil {
		return m.ConfigNamespace
	}
	return ""
}

// Deprecated: Do not use.
func (m *PilotConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

// Deprecated: Do not use.
func (m *PilotConfig) GetNodeSelector() *types.Struct {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *PilotConfig) GetKeepaliveMaxServerConnectionAge() *types.Duration {
	if m != nil {
		return m.KeepaliveMaxServerConnectionAge
	}
	return nil
}

func (m *PilotConfig) GetDeploymentLabels() *types.Struct {
	if m != nil {
		return m.DeploymentLabels
	}
	return nil
}

// Deprecated: Do not use.
func (m *PilotConfig) GetPodAntiAffinityLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *PilotConfig) GetPodAntiAffinityTermLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (m *PilotConfig) GetConfigMap() *types.BoolValue {
	if m != nil {
		return m.ConfigMap
	}
	return nil
}

func (m *PilotConfig) GetIngress() *PilotIngressConfig {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *PilotConfig) GetUseMCP() *types.BoolValue {
	if m != nil {
		return m.UseMCP
	}
	return nil
}

func (m *PilotConfig) GetEnv() *types.Struct {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *PilotConfig) GetPolicy() *PilotPolicyConfig {
	if m != nil {
		return m.Policy
	}
	return nil
}

// Deprecated: Do not use.
func (m *PilotConfig) GetRollingMaxSurge() *types.Value {
	if m != nil {
		return m.RollingMaxSurge
	}
	return nil
}

// Deprecated: Do not use.
func (m *PilotConfig) GetRollingMaxUnavailable() *types.Value {
	if m != nil {
		return m.RollingMaxUnavailable
	}
	return nil
}

// Deprecated: Do not use.
func (m *PilotConfig) GetTolerations() []*types.Struct {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *PilotConfig) GetAppNamespaces() []*types.Struct {
	if m != nil {
		return m.AppNamespaces
	}
	return nil
}

func (m *PilotConfig) GetEnableProtocolSniffingForOutbound() *types.BoolValue {
	if m != nil {
		return m.EnableProtocolSniffingForOutbound
	}
	return nil
}

func (m *PilotConfig) GetEnableProtocolSniffingForInbound() *types.BoolValue {
	if m != nil {
		return m.EnableProtocolSniffingForInbound
	}
	return nil
}

// Deprecated: Do not use.
func (m *PilotConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

func (m *PilotConfig) GetConfigSource() *PilotConfigSource {
	if m != nil {
		return m.ConfigSource
	}
	return nil
}

func (m *PilotConfig) GetJwksResolverExtraRootCA() string {
	if m != nil {
		return m.JwksResolverExtraRootCA
	}
	return ""
}

func (m *PilotConfig) GetPlugins() []*types.Struct {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func (m *PilotConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *PilotConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

// Controls legacy k8s ingress. Only one pilot profile should enable ingress support.
type PilotIngressConfig struct {
	// Sets the type ingress service for Pilot.
	//
	// If empty, node-port is assumed.
	//
	// Allowed values: node-port, istio-ingressgateway, ingress
	IngressService        string                `protobuf:"bytes,1,opt,name=ingressService,proto3" json:"ingressService,omitempty"`
	IngressControllerMode IngressControllerMode `protobuf:"varint,2,opt,name=ingressControllerMode,proto3,enum=v1alpha1.IngressControllerMode" json:"ingressControllerMode,omitempty"`
	// If mode is STRICT, this value must be set on "kubernetes.io/ingress.class" annotation to activate.
	IngressClass         string   `protobuf:"bytes,3,opt,name=ingressClass,proto3" json:"ingressClass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PilotIngressConfig) Reset()         { *m = PilotIngressConfig{} }
func (m *PilotIngressConfig) String() string { return proto.CompactTextString(m) }
func (*PilotIngressConfig) ProtoMessage()    {}
func (*PilotIngressConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{31}
}
func (m *PilotIngressConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PilotIngressConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PilotIngressConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PilotIngressConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PilotIngressConfig.Merge(m, src)
}
func (m *PilotIngressConfig) XXX_Size() int {
	return m.Size()
}
func (m *PilotIngressConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PilotIngressConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PilotIngressConfig proto.InternalMessageInfo

func (m *PilotIngressConfig) GetIngressService() string {
	if m != nil {
		return m.IngressService
	}
	return ""
}

func (m *PilotIngressConfig) GetIngressControllerMode() IngressControllerMode {
	if m != nil {
		return m.IngressControllerMode
	}
	return IngressControllerMode_DEFAULT
}

func (m *PilotIngressConfig) GetIngressClass() string {
	if m != nil {
		return m.IngressClass
	}
	return ""
}

// Controls whether Istio policy is applied to Pilot.
type PilotPolicyConfig struct {
	// Controls whether Istio policy is applied to Pilot.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PilotPolicyConfig) Reset()         { *m = PilotPolicyConfig{} }
func (m *PilotPolicyConfig) String() string { return proto.CompactTextString(m) }
func (*PilotPolicyConfig) ProtoMessage()    {}
func (*PilotPolicyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{32}
}
func (m *PilotPolicyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PilotPolicyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PilotPolicyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PilotPolicyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PilotPolicyConfig.Merge(m, src)
}
func (m *PilotPolicyConfig) XXX_Size() int {
	return m.Size()
}
func (m *PilotPolicyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PilotPolicyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PilotPolicyConfig proto.InternalMessageInfo

func (m *PilotPolicyConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// Controls telemetry configuration
type TelemetryConfig struct {
	// Controls whether telemetry is exported for Pilot.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Use telemetry v1.
	V1 *TelemetryV1Config `protobuf:"bytes,2,opt,name=v1,proto3" json:"v1,omitempty"`
	// Use telemetry v2.
	V2                   *TelemetryV2Config `protobuf:"bytes,3,opt,name=v2,proto3" json:"v2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TelemetryConfig) Reset()         { *m = TelemetryConfig{} }
func (m *TelemetryConfig) String() string { return proto.CompactTextString(m) }
func (*TelemetryConfig) ProtoMessage()    {}
func (*TelemetryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{33}
}
func (m *TelemetryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryConfig.Merge(m, src)
}
func (m *TelemetryConfig) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryConfig proto.InternalMessageInfo

func (m *TelemetryConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *TelemetryConfig) GetV1() *TelemetryV1Config {
	if m != nil {
		return m.V1
	}
	return nil
}

func (m *TelemetryConfig) GetV2() *TelemetryV2Config {
	if m != nil {
		return m.V2
	}
	return nil
}

// Controls whether pilot will configure telemetry v1.
type TelemetryV1Config struct {
	// Controls whether pilot will configure telemetry v1.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TelemetryV1Config) Reset()         { *m = TelemetryV1Config{} }
func (m *TelemetryV1Config) String() string { return proto.CompactTextString(m) }
func (*TelemetryV1Config) ProtoMessage()    {}
func (*TelemetryV1Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{34}
}
func (m *TelemetryV1Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryV1Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryV1Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetryV1Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryV1Config.Merge(m, src)
}
func (m *TelemetryV1Config) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryV1Config) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryV1Config.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryV1Config proto.InternalMessageInfo

func (m *TelemetryV1Config) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// Controls whether pilot will configure telemetry v2.
type TelemetryV2Config struct {
	// Controls whether pilot will configure telemetry v2.
	Enabled              *types.BoolValue                   `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MetadataExchange     *TelemetryV2MetadataExchangeConfig `protobuf:"bytes,4,opt,name=metadata_exchange,json=metadataExchange,proto3" json:"metadata_exchange,omitempty"`
	Prometheus           *TelemetryV2PrometheusConfig       `protobuf:"bytes,2,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	Stackdriver          *TelemetryV2StackDriverConfig      `protobuf:"bytes,3,opt,name=stackdriver,proto3" json:"stackdriver,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *TelemetryV2Config) Reset()         { *m = TelemetryV2Config{} }
func (m *TelemetryV2Config) String() string { return proto.CompactTextString(m) }
func (*TelemetryV2Config) ProtoMessage()    {}
func (*TelemetryV2Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{35}
}
func (m *TelemetryV2Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryV2Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryV2Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetryV2Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryV2Config.Merge(m, src)
}
func (m *TelemetryV2Config) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryV2Config) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryV2Config.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryV2Config proto.InternalMessageInfo

func (m *TelemetryV2Config) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *TelemetryV2Config) GetMetadataExchange() *TelemetryV2MetadataExchangeConfig {
	if m != nil {
		return m.MetadataExchange
	}
	return nil
}

func (m *TelemetryV2Config) GetPrometheus() *TelemetryV2PrometheusConfig {
	if m != nil {
		return m.Prometheus
	}
	return nil
}

func (m *TelemetryV2Config) GetStackdriver() *TelemetryV2StackDriverConfig {
	if m != nil {
		return m.Stackdriver
	}
	return nil
}

type TelemetryV2MetadataExchangeConfig struct {
	// Controls whether enabled WebAssembly runtime for metadata exchange filter.
	WasmEnabled          *types.BoolValue `protobuf:"bytes,2,opt,name=wasmEnabled,proto3" json:"wasmEnabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TelemetryV2MetadataExchangeConfig) Reset()         { *m = TelemetryV2MetadataExchangeConfig{} }
func (m *TelemetryV2MetadataExchangeConfig) String() string { return proto.CompactTextString(m) }
func (*TelemetryV2MetadataExchangeConfig) ProtoMessage()    {}
func (*TelemetryV2MetadataExchangeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{36}
}
func (m *TelemetryV2MetadataExchangeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryV2MetadataExchangeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryV2MetadataExchangeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetryV2MetadataExchangeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryV2MetadataExchangeConfig.Merge(m, src)
}
func (m *TelemetryV2MetadataExchangeConfig) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryV2MetadataExchangeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryV2MetadataExchangeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryV2MetadataExchangeConfig proto.InternalMessageInfo

func (m *TelemetryV2MetadataExchangeConfig) GetWasmEnabled() *types.BoolValue {
	if m != nil {
		return m.WasmEnabled
	}
	return nil
}

// Conrols telemetry v2 prometheus settings.
type TelemetryV2PrometheusConfig struct {
	// Controls whether stats envoyfilter would be enabled or not.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Controls whether enabled WebAssembly runtime for stats filter.
	WasmEnabled          *types.BoolValue `protobuf:"bytes,2,opt,name=wasmEnabled,proto3" json:"wasmEnabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TelemetryV2PrometheusConfig) Reset()         { *m = TelemetryV2PrometheusConfig{} }
func (m *TelemetryV2PrometheusConfig) String() string { return proto.CompactTextString(m) }
func (*TelemetryV2PrometheusConfig) ProtoMessage()    {}
func (*TelemetryV2PrometheusConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{37}
}
func (m *TelemetryV2PrometheusConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryV2PrometheusConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryV2PrometheusConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetryV2PrometheusConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryV2PrometheusConfig.Merge(m, src)
}
func (m *TelemetryV2PrometheusConfig) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryV2PrometheusConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryV2PrometheusConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryV2PrometheusConfig proto.InternalMessageInfo

func (m *TelemetryV2PrometheusConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *TelemetryV2PrometheusConfig) GetWasmEnabled() *types.BoolValue {
	if m != nil {
		return m.WasmEnabled
	}
	return nil
}

// Conrols telemetry v2 stackdriver settings.
type TelemetryV2StackDriverConfig struct {
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Logging              *types.BoolValue `protobuf:"bytes,2,opt,name=logging,proto3" json:"logging,omitempty"`
	Monitoring           *types.BoolValue `protobuf:"bytes,3,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
	Topology             *types.BoolValue `protobuf:"bytes,4,opt,name=topology,proto3" json:"topology,omitempty"`
	DisableOutbound      *types.BoolValue `protobuf:"bytes,6,opt,name=disableOutbound,proto3" json:"disableOutbound,omitempty"`
	ConfigOverride       *types.Struct    `protobuf:"bytes,5,opt,name=configOverride,proto3" json:"configOverride,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TelemetryV2StackDriverConfig) Reset()         { *m = TelemetryV2StackDriverConfig{} }
func (m *TelemetryV2StackDriverConfig) String() string { return proto.CompactTextString(m) }
func (*TelemetryV2StackDriverConfig) ProtoMessage()    {}
func (*TelemetryV2StackDriverConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{38}
}
func (m *TelemetryV2StackDriverConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryV2StackDriverConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryV2StackDriverConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetryV2StackDriverConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryV2StackDriverConfig.Merge(m, src)
}
func (m *TelemetryV2StackDriverConfig) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryV2StackDriverConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryV2StackDriverConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryV2StackDriverConfig proto.InternalMessageInfo

func (m *TelemetryV2StackDriverConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *TelemetryV2StackDriverConfig) GetLogging() *types.BoolValue {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *TelemetryV2StackDriverConfig) GetMonitoring() *types.BoolValue {
	if m != nil {
		return m.Monitoring
	}
	return nil
}

func (m *TelemetryV2StackDriverConfig) GetTopology() *types.BoolValue {
	if m != nil {
		return m.Topology
	}
	return nil
}

func (m *TelemetryV2StackDriverConfig) GetDisableOutbound() *types.BoolValue {
	if m != nil {
		return m.DisableOutbound
	}
	return nil
}

func (m *TelemetryV2StackDriverConfig) GetConfigOverride() *types.Struct {
	if m != nil {
		return m.ConfigOverride
	}
	return nil
}

// PilotConfigSource describes information about a configuration store inside a
// mesh. A single control plane instance can interact with one or more data
// sources.
type PilotConfigSource struct {
	// Describes the source of configuration, if nothing is specified default is MCP.
	SubscribedResources  []string `protobuf:"bytes,1,rep,name=subscribedResources,proto3" json:"subscribedResources,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PilotConfigSource) Reset()         { *m = PilotConfigSource{} }
func (m *PilotConfigSource) String() string { return proto.CompactTextString(m) }
func (*PilotConfigSource) ProtoMessage()    {}
func (*PilotConfigSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{39}
}
func (m *PilotConfigSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PilotConfigSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PilotConfigSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PilotConfigSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PilotConfigSource.Merge(m, src)
}
func (m *PilotConfigSource) XXX_Size() int {
	return m.Size()
}
func (m *PilotConfigSource) XXX_DiscardUnknown() {
	xxx_messageInfo_PilotConfigSource.DiscardUnknown(m)
}

var xxx_messageInfo_PilotConfigSource proto.InternalMessageInfo

func (m *PilotConfigSource) GetSubscribedResources() []string {
	if m != nil {
		return m.SubscribedResources
	}
	return nil
}

// Configuration for a port.
type PortsConfig struct {
	// Port name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Port number.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// NodePort number.
	NodePort int32 `protobuf:"varint,3,opt,name=nodePort,proto3" json:"nodePort,omitempty"`
	// Target port number.
	TargetPort           int32    `protobuf:"varint,4,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortsConfig) Reset()         { *m = PortsConfig{} }
func (m *PortsConfig) String() string { return proto.CompactTextString(m) }
func (*PortsConfig) ProtoMessage()    {}
func (*PortsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{40}
}
func (m *PortsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PortsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortsConfig.Merge(m, src)
}
func (m *PortsConfig) XXX_Size() int {
	return m.Size()
}
func (m *PortsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PortsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PortsConfig proto.InternalMessageInfo

func (m *PortsConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PortsConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortsConfig) GetNodePort() int32 {
	if m != nil {
		return m.NodePort
	}
	return 0
}

func (m *PortsConfig) GetTargetPort() int32 {
	if m != nil {
		return m.TargetPort
	}
	return 0
}

// Configuration for Prometheus.
type PrometheusConfig struct {
	CreatePrometheusResource         *types.BoolValue          `protobuf:"bytes,1,opt,name=createPrometheusResource,proto3" json:"createPrometheusResource,omitempty"`
	Enabled                          *types.BoolValue          `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ReplicaCount                     uint32                    `protobuf:"varint,3,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"` // Deprecated: Do not use.
	Hub                              string                    `protobuf:"bytes,4,opt,name=hub,proto3" json:"hub,omitempty"`
	Tag                              *types.Value              `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	Retention                        string                    `protobuf:"bytes,6,opt,name=retention,proto3" json:"retention,omitempty"`
	NodeSelector                     *types.Struct             `protobuf:"bytes,7,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"` // Deprecated: Do not use.
	ScrapeInterval                   *types.Duration           `protobuf:"bytes,8,opt,name=scrapeInterval,proto3" json:"scrapeInterval,omitempty"`
	ContextPath                      string                    `protobuf:"bytes,9,opt,name=contextPath,proto3" json:"contextPath,omitempty"`
	Service                          *PrometheusServiceConfig  `protobuf:"bytes,11,opt,name=service,proto3" json:"service,omitempty"`
	Security                         *PrometheusSecurityConfig `protobuf:"bytes,12,opt,name=security,proto3" json:"security,omitempty"`
	Tolerations                      []*types.Struct           `protobuf:"bytes,13,rep,name=tolerations,proto3" json:"tolerations,omitempty"`                                           // Deprecated: Do not use.
	PodAntiAffinityLabelSelector     []*types.Struct           `protobuf:"bytes,14,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`         // Deprecated: Do not use.
	PodAntiAffinityTermLabelSelector []*types.Struct           `protobuf:"bytes,15,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"` // Deprecated: Do not use.
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources   *Resources      `protobuf:"bytes,16,opt,name=resources,proto3" json:"resources,omitempty"`     // Deprecated: Do not use.
	Datasources []*types.Struct `protobuf:"bytes,17,rep,name=datasources,proto3" json:"datasources,omitempty"` // Deprecated: Do not use.
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations *types.Struct `protobuf:"bytes,18,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	Image          string        `protobuf:"bytes,19,opt,name=image,proto3" json:"image,omitempty"`                   // Deprecated: Do not use.
	// Configure whether provisions a certificate to Prometheus through Istio Agent.
	// When this option is set as true, a sidecar is deployed along Prometheus to
	// provision a certificate through Istio Agent to Prometheus. The provisioned certificate
	// is shared with Prometheus through mounted files.
	// When this option is set as false, this certificate provisioning mechanism is disabled.
	ProvisionPrometheusCert *types.BoolValue `protobuf:"bytes,20,opt,name=provisionPrometheusCert,proto3" json:"provisionPrometheusCert,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}         `json:"-"`
	XXX_unrecognized        []byte           `json:"-"`
	XXX_sizecache           int32            `json:"-"`
}

func (m *PrometheusConfig) Reset()         { *m = PrometheusConfig{} }
func (m *PrometheusConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusConfig) ProtoMessage()    {}
func (*PrometheusConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{41}
}
func (m *PrometheusConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrometheusConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrometheusConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrometheusConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusConfig.Merge(m, src)
}
func (m *PrometheusConfig) XXX_Size() int {
	return m.Size()
}
func (m *PrometheusConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusConfig proto.InternalMessageInfo

func (m *PrometheusConfig) GetCreatePrometheusResource() *types.BoolValue {
	if m != nil {
		return m.CreatePrometheusResource
	}
	return nil
}

func (m *PrometheusConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// Deprecated: Do not use.
func (m *PrometheusConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *PrometheusConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *PrometheusConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *PrometheusConfig) GetRetention() string {
	if m != nil {
		return m.Retention
	}
	return ""
}

// Deprecated: Do not use.
func (m *PrometheusConfig) GetNodeSelector() *types.Struct {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *PrometheusConfig) GetScrapeInterval() *types.Duration {
	if m != nil {
		return m.ScrapeInterval
	}
	return nil
}

func (m *PrometheusConfig) GetContextPath() string {
	if m != nil {
		return m.ContextPath
	}
	return ""
}

func (m *PrometheusConfig) GetService() *PrometheusServiceConfig {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *PrometheusConfig) GetSecurity() *PrometheusSecurityConfig {
	if m != nil {
		return m.Security
	}
	return nil
}

// Deprecated: Do not use.
func (m *PrometheusConfig) GetTolerations() []*types.Struct {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

// Deprecated: Do not use.
func (m *PrometheusConfig) GetPodAntiAffinityLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *PrometheusConfig) GetPodAntiAffinityTermLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *PrometheusConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Deprecated: Do not use.
func (m *PrometheusConfig) GetDatasources() []*types.Struct {
	if m != nil {
		return m.Datasources
	}
	return nil
}

// Deprecated: Do not use.
func (m *PrometheusConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

// Deprecated: Do not use.
func (m *PrometheusConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PrometheusConfig) GetProvisionPrometheusCert() *types.BoolValue {
	if m != nil {
		return m.ProvisionPrometheusCert
	}
	return nil
}

// Configuration for Prometheus adapter in mixer.
type PrometheusMixerAdapterConfig struct {
	// Enables the Prometheus adapter in Mixer.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Sets the duration after which Prometheus registry purges a metric.
	//
	// See: https://istio.io/docs/reference/config/policy-and-telemetry/adapters/prometheus/#Params
	MetricsExpiryDuration *types.Duration `protobuf:"bytes,2,opt,name=metricsExpiryDuration,proto3" json:"metricsExpiryDuration,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}        `json:"-"`
	XXX_unrecognized      []byte          `json:"-"`
	XXX_sizecache         int32           `json:"-"`
}

func (m *PrometheusMixerAdapterConfig) Reset()         { *m = PrometheusMixerAdapterConfig{} }
func (m *PrometheusMixerAdapterConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusMixerAdapterConfig) ProtoMessage()    {}
func (*PrometheusMixerAdapterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{42}
}
func (m *PrometheusMixerAdapterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrometheusMixerAdapterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrometheusMixerAdapterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrometheusMixerAdapterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusMixerAdapterConfig.Merge(m, src)
}
func (m *PrometheusMixerAdapterConfig) XXX_Size() int {
	return m.Size()
}
func (m *PrometheusMixerAdapterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusMixerAdapterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusMixerAdapterConfig proto.InternalMessageInfo

func (m *PrometheusMixerAdapterConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *PrometheusMixerAdapterConfig) GetMetricsExpiryDuration() *types.Duration {
	if m != nil {
		return m.MetricsExpiryDuration
	}
	return nil
}

// Configuration for Prometheus adapter security.
type PrometheusSecurityConfig struct {
	// Controls whether Prometheus security is enabled.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PrometheusSecurityConfig) Reset()         { *m = PrometheusSecurityConfig{} }
func (m *PrometheusSecurityConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusSecurityConfig) ProtoMessage()    {}
func (*PrometheusSecurityConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{43}
}
func (m *PrometheusSecurityConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrometheusSecurityConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrometheusSecurityConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrometheusSecurityConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusSecurityConfig.Merge(m, src)
}
func (m *PrometheusSecurityConfig) XXX_Size() int {
	return m.Size()
}
func (m *PrometheusSecurityConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusSecurityConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusSecurityConfig proto.InternalMessageInfo

func (m *PrometheusSecurityConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// Configuration for Prometheus adapter service.
type PrometheusServiceConfig struct {
	Annotations          *types.Struct                    `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty"`
	NodePort             *PrometheusServiceNodePortConfig `protobuf:"bytes,2,opt,name=nodePort,proto3" json:"nodePort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PrometheusServiceConfig) Reset()         { *m = PrometheusServiceConfig{} }
func (m *PrometheusServiceConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusServiceConfig) ProtoMessage()    {}
func (*PrometheusServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{44}
}
func (m *PrometheusServiceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrometheusServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrometheusServiceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrometheusServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusServiceConfig.Merge(m, src)
}
func (m *PrometheusServiceConfig) XXX_Size() int {
	return m.Size()
}
func (m *PrometheusServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusServiceConfig proto.InternalMessageInfo

func (m *PrometheusServiceConfig) GetAnnotations() *types.Struct {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PrometheusServiceConfig) GetNodePort() *PrometheusServiceNodePortConfig {
	if m != nil {
		return m.NodePort
	}
	return nil
}

// Configuration for Prometheus Service NodePort.
type PrometheusServiceNodePortConfig struct {
	// Controls whether Prometheus NodePort config is enabled.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Port                 uint32           `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PrometheusServiceNodePortConfig) Reset()         { *m = PrometheusServiceNodePortConfig{} }
func (m *PrometheusServiceNodePortConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusServiceNodePortConfig) ProtoMessage()    {}
func (*PrometheusServiceNodePortConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{45}
}
func (m *PrometheusServiceNodePortConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrometheusServiceNodePortConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrometheusServiceNodePortConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrometheusServiceNodePortConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusServiceNodePortConfig.Merge(m, src)
}
func (m *PrometheusServiceNodePortConfig) XXX_Size() int {
	return m.Size()
}
func (m *PrometheusServiceNodePortConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusServiceNodePortConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusServiceNodePortConfig proto.InternalMessageInfo

func (m *PrometheusServiceNodePortConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *PrometheusServiceNodePortConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Configuration for Proxy.
type ProxyConfig struct {
	Enabled *types.BoolValue `protobuf:"bytes,35,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Specifies the path to write the sidecar access log file.
	AccessLogFile string `protobuf:"bytes,1,opt,name=accessLogFile,proto3" json:"accessLogFile,omitempty"`
	// Configures how and what fields are displayed in sidecar access log.
	AccessLogFormat   string            `protobuf:"bytes,2,opt,name=accessLogFormat,proto3" json:"accessLogFormat,omitempty"`
	AccessLogEncoding AccessLogEncoding `protobuf:"varint,3,opt,name=accessLogEncoding,proto3,enum=v1alpha1.AccessLogEncoding" json:"accessLogEncoding,omitempty"`
	AutoInject        string            `protobuf:"bytes,4,opt,name=autoInject,proto3" json:"autoInject,omitempty"`
	// Domain for the cluster, default: "cluster.local".
	//
	// K8s allows this to be customized, see https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/
	ClusterDomain string `protobuf:"bytes,5,opt,name=clusterDomain,proto3" json:"clusterDomain,omitempty"`
	// Per Component log level for proxy, applies to gateways and sidecars.
	//
	// If a component level is not set, then the global "logLevel" will be used. If left empty, "misc:error" is used.
	ComponentLogLevel string `protobuf:"bytes,6,opt,name=componentLogLevel,proto3" json:"componentLogLevel,omitempty"`
	// Controls number of proxy worker threads.
	//
	// If set to 0 (default), then start worker thread for each CPU thread/core.
	Concurrency uint32 `protobuf:"varint,7,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	// Enables core dumps for newly injected sidecars.
	//
	// If set, newly injected sidecars will have core dumps enabled.
	EnableCoreDump *types.BoolValue `protobuf:"bytes,9,opt,name=enableCoreDump,proto3" json:"enableCoreDump,omitempty"`
	// Configures Envoy Metrics Service.
	EnvoyMetricsService *EnvoyMetricsConfig `protobuf:"bytes,10,opt,name=envoyMetricsService,proto3" json:"envoyMetricsService,omitempty"`
	// Configures statsd export in Envoy.
	EnvoyStatsd *EnvoyMetricsConfig `protobuf:"bytes,11,opt,name=envoyStatsd,proto3" json:"envoyStatsd,omitempty"`
	// Specifies the Istio ingress ports not to capture.
	ExcludeInboundPorts string `protobuf:"bytes,12,opt,name=excludeInboundPorts,proto3" json:"excludeInboundPorts,omitempty"`
	// Lists the excluded IP ranges of Istio egress traffic that the sidecar captures.
	ExcludeIPRanges string `protobuf:"bytes,13,opt,name=excludeIPRanges,proto3" json:"excludeIPRanges,omitempty"`
	// Image name or path for the proxy, default: "proxyv2".
	//
	// If registry or tag are not specified, global.hub and global.tag are used.
	//
	// Examples: my-proxy (uses global.hub/tag), docker.io/myrepo/my-proxy:v1.0.0
	Image string `protobuf:"bytes,14,opt,name=image,proto3" json:"image,omitempty"`
	// Lists the IP ranges of Istio egress traffic that the sidecar captures.
	//
	// Example: "172.30.0.0/16,172.20.0.0/16"
	// This would only capture egress traffic on those two IP Ranges, all other outbound traffic would # be allowed by the sidecar."
	IncludeIPRanges string `protobuf:"bytes,16,opt,name=includeIPRanges,proto3" json:"includeIPRanges,omitempty"`
	// Log level for proxy, applies to gateways and sidecars. If left empty, "warning" is used. Expected values are: trace\|debug\|info\|warning\|error\|critical\|off
	LogLevel string `protobuf:"bytes,18,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
	// Enables privileged securityContext for the istio-proxy container.
	//
	// See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	Privileged *types.BoolValue `protobuf:"bytes,19,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// Sets the initial delay for readiness probes in seconds.
	ReadinessInitialDelaySeconds uint32 `protobuf:"varint,20,opt,name=readinessInitialDelaySeconds,proto3" json:"readinessInitialDelaySeconds,omitempty"`
	// Sets the interval between readiness probes in seconds.
	ReadinessPeriodSeconds uint32 `protobuf:"varint,21,opt,name=readinessPeriodSeconds,proto3" json:"readinessPeriodSeconds,omitempty"`
	// Sets the number of successive failed probes before indicating readiness failure.
	ReadinessFailureThreshold uint32 `protobuf:"varint,22,opt,name=readinessFailureThreshold,proto3" json:"readinessFailureThreshold,omitempty"`
	// Default port used for the Pilot agent's health checks.
	StatusPort uint32 `protobuf:"varint,23,opt,name=statusPort,proto3" json:"statusPort,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources                *Resources            `protobuf:"bytes,24,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	Tracer                   Tracer                `protobuf:"varint,25,opt,name=tracer,proto3,enum=v1alpha1.Tracer" json:"tracer,omitempty"`
	ProtocolDetectionTimeout string                `protobuf:"bytes,26,opt,name=protocolDetectionTimeout,proto3" json:"protocolDetectionTimeout,omitempty"`
	EnvoyAccessLogService    *EnvoyAccessLogConfig `protobuf:"bytes,27,opt,name=envoyAccessLogService,proto3" json:"envoyAccessLogService,omitempty"`
	ExcludeOutboundPorts     string                `protobuf:"bytes,28,opt,name=excludeOutboundPorts,proto3" json:"excludeOutboundPorts,omitempty"`
	DrainDuration            *types.Duration       `protobuf:"bytes,29,opt,name=drainDuration,proto3" json:"drainDuration,omitempty"`
	ConnectTimeout           string                `protobuf:"bytes,30,opt,name=connectTimeout,proto3" json:"connectTimeout,omitempty"`
	ParentShutdownDuration   *types.Duration       `protobuf:"bytes,32,opt,name=parentShutdownDuration,proto3" json:"parentShutdownDuration,omitempty"`
	EnableCoreDumpImage      string                `protobuf:"bytes,33,opt,name=enableCoreDumpImage,proto3" json:"enableCoreDumpImage,omitempty"` // Deprecated: Do not use.
	OutlierLogPath           string                `protobuf:"bytes,34,opt,name=outlierLogPath,proto3" json:"outlierLogPath,omitempty"`
	Lifecycle                *types.Struct         `protobuf:"bytes,36,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}              `json:"-"`
	XXX_unrecognized         []byte                `json:"-"`
	XXX_sizecache            int32                 `json:"-"`
}

func (m *ProxyConfig) Reset()         { *m = ProxyConfig{} }
func (m *ProxyConfig) String() string { return proto.CompactTextString(m) }
func (*ProxyConfig) ProtoMessage()    {}
func (*ProxyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{46}
}
func (m *ProxyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyConfig.Merge(m, src)
}
func (m *ProxyConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProxyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyConfig proto.InternalMessageInfo

func (m *ProxyConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *ProxyConfig) GetAccessLogFile() string {
	if m != nil {
		return m.AccessLogFile
	}
	return ""
}

func (m *ProxyConfig) GetAccessLogFormat() string {
	if m != nil {
		return m.AccessLogFormat
	}
	return ""
}

func (m *ProxyConfig) GetAccessLogEncoding() AccessLogEncoding {
	if m != nil {
		return m.AccessLogEncoding
	}
	return AccessLogEncoding_JSON
}

func (m *ProxyConfig) GetAutoInject() string {
	if m != nil {
		return m.AutoInject
	}
	return ""
}

func (m *ProxyConfig) GetClusterDomain() string {
	if m != nil {
		return m.ClusterDomain
	}
	return ""
}

func (m *ProxyConfig) GetComponentLogLevel() string {
	if m != nil {
		return m.ComponentLogLevel
	}
	return ""
}

func (m *ProxyConfig) GetConcurrency() uint32 {
	if m != nil {
		return m.Concurrency
	}
	return 0
}

func (m *ProxyConfig) GetEnableCoreDump() *types.BoolValue {
	if m != nil {
		return m.EnableCoreDump
	}
	return nil
}

func (m *ProxyConfig) GetEnvoyMetricsService() *EnvoyMetricsConfig {
	if m != nil {
		return m.EnvoyMetricsService
	}
	return nil
}

func (m *ProxyConfig) GetEnvoyStatsd() *EnvoyMetricsConfig {
	if m != nil {
		return m.EnvoyStatsd
	}
	return nil
}

func (m *ProxyConfig) GetExcludeInboundPorts() string {
	if m != nil {
		return m.ExcludeInboundPorts
	}
	return ""
}

func (m *ProxyConfig) GetExcludeIPRanges() string {
	if m != nil {
		return m.ExcludeIPRanges
	}
	return ""
}

func (m *ProxyConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ProxyConfig) GetIncludeIPRanges() string {
	if m != nil {
		return m.IncludeIPRanges
	}
	return ""
}

func (m *ProxyConfig) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *ProxyConfig) GetPrivileged() *types.BoolValue {
	if m != nil {
		return m.Privileged
	}
	return nil
}

func (m *ProxyConfig) GetReadinessInitialDelaySeconds() uint32 {
	if m != nil {
		return m.ReadinessInitialDelaySeconds
	}
	return 0
}

func (m *ProxyConfig) GetReadinessPeriodSeconds() uint32 {
	if m != nil {
		return m.ReadinessPeriodSeconds
	}
	return 0
}

func (m *ProxyConfig) GetReadinessFailureThreshold() uint32 {
	if m != nil {
		return m.ReadinessFailureThreshold
	}
	return 0
}

func (m *ProxyConfig) GetStatusPort() uint32 {
	if m != nil {
		return m.StatusPort
	}
	return 0
}

// Deprecated: Do not use.
func (m *ProxyConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ProxyConfig) GetTracer() Tracer {
	if m != nil {
		return m.Tracer
	}
	return Tracer_zipkin
}

func (m *ProxyConfig) GetProtocolDetectionTimeout() string {
	if m != nil {
		return m.ProtocolDetectionTimeout
	}
	return ""
}

func (m *ProxyConfig) GetEnvoyAccessLogService() *EnvoyAccessLogConfig {
	if m != nil {
		return m.EnvoyAccessLogService
	}
	return nil
}

func (m *ProxyConfig) GetExcludeOutboundPorts() string {
	if m != nil {
		return m.ExcludeOutboundPorts
	}
	return ""
}

func (m *ProxyConfig) GetDrainDuration() *types.Duration {
	if m != nil {
		return m.DrainDuration
	}
	return nil
}

func (m *ProxyConfig) GetConnectTimeout() string {
	if m != nil {
		return m.ConnectTimeout
	}
	return ""
}

func (m *ProxyConfig) GetParentShutdownDuration() *types.Duration {
	if m != nil {
		return m.ParentShutdownDuration
	}
	return nil
}

// Deprecated: Do not use.
func (m *ProxyConfig) GetEnableCoreDumpImage() string {
	if m != nil {
		return m.EnableCoreDumpImage
	}
	return ""
}

func (m *ProxyConfig) GetOutlierLogPath() string {
	if m != nil {
		return m.OutlierLogPath
	}
	return ""
}

func (m *ProxyConfig) GetLifecycle() *types.Struct {
	if m != nil {
		return m.Lifecycle
	}
	return nil
}

type EnvoyAccessLogConfig struct {
	Enabled              *types.BoolValue           `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Host                 string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port                 string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	TlsSettings          *EnvoyAccessLogtlsSettings `protobuf:"bytes,4,opt,name=tlsSettings,proto3" json:"tlsSettings,omitempty"`
	TcpKeepalive         *types.Struct              `protobuf:"bytes,5,opt,name=tcpKeepalive,proto3" json:"tcpKeepalive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *EnvoyAccessLogConfig) Reset()         { *m = EnvoyAccessLogConfig{} }
func (m *EnvoyAccessLogConfig) String() string { return proto.CompactTextString(m) }
func (*EnvoyAccessLogConfig) ProtoMessage()    {}
func (*EnvoyAccessLogConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{47}
}
func (m *EnvoyAccessLogConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvoyAccessLogConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvoyAccessLogConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnvoyAccessLogConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvoyAccessLogConfig.Merge(m, src)
}
func (m *EnvoyAccessLogConfig) XXX_Size() int {
	return m.Size()
}
func (m *EnvoyAccessLogConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvoyAccessLogConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EnvoyAccessLogConfig proto.InternalMessageInfo

func (m *EnvoyAccessLogConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *EnvoyAccessLogConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *EnvoyAccessLogConfig) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *EnvoyAccessLogConfig) GetTlsSettings() *EnvoyAccessLogtlsSettings {
	if m != nil {
		return m.TlsSettings
	}
	return nil
}

func (m *EnvoyAccessLogConfig) GetTcpKeepalive() *types.Struct {
	if m != nil {
		return m.TcpKeepalive
	}
	return nil
}

type EnvoyAccessLogtlsSettings struct {
	Mode                 string   `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	ClientCertificate    string   `protobuf:"bytes,2,opt,name=clientCertificate,proto3" json:"clientCertificate,omitempty"`
	PrivateKey           string   `protobuf:"bytes,3,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	CaCertificates       string   `protobuf:"bytes,4,opt,name=caCertificates,proto3" json:"caCertificates,omitempty"`
	Sni                  string   `protobuf:"bytes,5,opt,name=sni,proto3" json:"sni,omitempty"`
	SubjectAltNames      []string `protobuf:"bytes,6,rep,name=subjectAltNames,proto3" json:"subjectAltNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvoyAccessLogtlsSettings) Reset()         { *m = EnvoyAccessLogtlsSettings{} }
func (m *EnvoyAccessLogtlsSettings) String() string { return proto.CompactTextString(m) }
func (*EnvoyAccessLogtlsSettings) ProtoMessage()    {}
func (*EnvoyAccessLogtlsSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{48}
}
func (m *EnvoyAccessLogtlsSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvoyAccessLogtlsSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvoyAccessLogtlsSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnvoyAccessLogtlsSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvoyAccessLogtlsSettings.Merge(m, src)
}
func (m *EnvoyAccessLogtlsSettings) XXX_Size() int {
	return m.Size()
}
func (m *EnvoyAccessLogtlsSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvoyAccessLogtlsSettings.DiscardUnknown(m)
}

var xxx_messageInfo_EnvoyAccessLogtlsSettings proto.InternalMessageInfo

func (m *EnvoyAccessLogtlsSettings) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *EnvoyAccessLogtlsSettings) GetClientCertificate() string {
	if m != nil {
		return m.ClientCertificate
	}
	return ""
}

func (m *EnvoyAccessLogtlsSettings) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *EnvoyAccessLogtlsSettings) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *EnvoyAccessLogtlsSettings) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *EnvoyAccessLogtlsSettings) GetSubjectAltNames() []string {
	if m != nil {
		return m.SubjectAltNames
	}
	return nil
}

// Configuration for proxy_init container which sets the pods' networking to intercept the inbound/outbound traffic.
type ProxyInitConfig struct {
	// Specifies the image for the proxy_init container.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources            *Resources `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProxyInitConfig) Reset()         { *m = ProxyInitConfig{} }
func (m *ProxyInitConfig) String() string { return proto.CompactTextString(m) }
func (*ProxyInitConfig) ProtoMessage()    {}
func (*ProxyInitConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{49}
}
func (m *ProxyInitConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyInitConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyInitConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyInitConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyInitConfig.Merge(m, src)
}
func (m *ProxyInitConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProxyInitConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyInitConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyInitConfig proto.InternalMessageInfo

func (m *ProxyInitConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

// Deprecated: Do not use.
func (m *ProxyInitConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Configuration for K8s resource requests.
type ResourcesRequestsConfig struct {
	Cpu                  string   `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory               string   `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourcesRequestsConfig) Reset()         { *m = ResourcesRequestsConfig{} }
func (m *ResourcesRequestsConfig) String() string { return proto.CompactTextString(m) }
func (*ResourcesRequestsConfig) ProtoMessage()    {}
func (*ResourcesRequestsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{50}
}
func (m *ResourcesRequestsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourcesRequestsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourcesRequestsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourcesRequestsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcesRequestsConfig.Merge(m, src)
}
func (m *ResourcesRequestsConfig) XXX_Size() int {
	return m.Size()
}
func (m *ResourcesRequestsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcesRequestsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcesRequestsConfig proto.InternalMessageInfo

func (m *ResourcesRequestsConfig) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

func (m *ResourcesRequestsConfig) GetMemory() string {
	if m != nil {
		return m.Memory
	}
	return ""
}

// Configuration for the SecretDiscoveryService instead of using K8S secrets to mount the certificates.
type SDSConfig struct {
	// Controls whether the SecretDiscoveryService is enabled.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"` // Deprecated: Do not use.
	// Specifies the Unix Domain Socket through which Envoy communicates with NodeAgent SDS to get key/cert for mTLS.
	UdsPath string `protobuf:"bytes,2,opt,name=udsPath,proto3" json:"udsPath,omitempty"` // Deprecated: Do not use.
	// Enables SDS use of k8s normal JWT to request for certificates.
	UseNormalJwt *types.BoolValue `protobuf:"bytes,3,opt,name=useNormalJwt,proto3" json:"useNormalJwt,omitempty"` // Deprecated: Do not use.
	// Enables SDS use of trustworthy JWT to request for certificates.
	UseTrustworthyJwt    *types.BoolValue `protobuf:"bytes,4,opt,name=useTrustworthyJwt,proto3" json:"useTrustworthyJwt,omitempty"` // Deprecated: Do not use.
	Token                *types.Struct    `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`                         // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SDSConfig) Reset()         { *m = SDSConfig{} }
func (m *SDSConfig) String() string { return proto.CompactTextString(m) }
func (*SDSConfig) ProtoMessage()    {}
func (*SDSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{51}
}
func (m *SDSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SDSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SDSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SDSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SDSConfig.Merge(m, src)
}
func (m *SDSConfig) XXX_Size() int {
	return m.Size()
}
func (m *SDSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SDSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SDSConfig proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *SDSConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// Deprecated: Do not use.
func (m *SDSConfig) GetUdsPath() string {
	if m != nil {
		return m.UdsPath
	}
	return ""
}

// Deprecated: Do not use.
func (m *SDSConfig) GetUseNormalJwt() *types.BoolValue {
	if m != nil {
		return m.UseNormalJwt
	}
	return nil
}

// Deprecated: Do not use.
func (m *SDSConfig) GetUseTrustworthyJwt() *types.BoolValue {
	if m != nil {
		return m.UseTrustworthyJwt
	}
	return nil
}

// Deprecated: Do not use.
func (m *SDSConfig) GetToken() *types.Struct {
	if m != nil {
		return m.Token
	}
	return nil
}

// Configuration for secret volume mounts.
//
// See https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets.
type SecretVolume struct {
	MountPath            string   `protobuf:"bytes,1,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SecretName           string   `protobuf:"bytes,3,opt,name=secretName,proto3" json:"secretName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecretVolume) Reset()         { *m = SecretVolume{} }
func (m *SecretVolume) String() string { return proto.CompactTextString(m) }
func (*SecretVolume) ProtoMessage()    {}
func (*SecretVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{52}
}
func (m *SecretVolume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretVolume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecretVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretVolume.Merge(m, src)
}
func (m *SecretVolume) XXX_Size() int {
	return m.Size()
}
func (m *SecretVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretVolume.DiscardUnknown(m)
}

var xxx_messageInfo_SecretVolume proto.InternalMessageInfo

func (m *SecretVolume) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *SecretVolume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecretVolume) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

// ServiceConfig is described in istio.io documentation.
type ServiceConfig struct {
	Annotations          *types.Struct `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty"`
	ExternalPort         uint32        `protobuf:"varint,2,opt,name=externalPort,proto3" json:"externalPort,omitempty"`
	Name                 string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string        `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServiceConfig) Reset()         { *m = ServiceConfig{} }
func (m *ServiceConfig) String() string { return proto.CompactTextString(m) }
func (*ServiceConfig) ProtoMessage()    {}
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{53}
}
func (m *ServiceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConfig.Merge(m, src)
}
func (m *ServiceConfig) XXX_Size() int {
	return m.Size()
}
func (m *ServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConfig proto.InternalMessageInfo

func (m *ServiceConfig) GetAnnotations() *types.Struct {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceConfig) GetExternalPort() uint32 {
	if m != nil {
		return m.ExternalPort
	}
	return 0
}

func (m *ServiceConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// SidecarInjectorConfig is described in istio.io documentation.
type SidecarInjectorConfig struct {
	// Enables sidecar auto-injection in namespaces by default.
	EnableNamespacesByDefault *types.BoolValue `protobuf:"bytes,2,opt,name=enableNamespacesByDefault,proto3" json:"enableNamespacesByDefault,omitempty"`
	// Instructs Istio to not inject the sidecar on those pods, based on labels that are present in those pods.
	//
	// Annotations in the pods have higher precedence than the label selectors.
	// Order of evaluation: Pod Annotations → NeverInjectSelector → AlwaysInjectSelector → Default Policy.
	// See https://istio.io/docs/setup/kubernetes/additional-setup/sidecar-injection/#more-control-adding-exceptions
	NeverInjectSelector []*types.Struct `protobuf:"bytes,11,rep,name=neverInjectSelector,proto3" json:"neverInjectSelector,omitempty"`
	// See NeverInjectSelector.
	AlwaysInjectSelector []*types.Struct `protobuf:"bytes,12,rep,name=alwaysInjectSelector,proto3" json:"alwaysInjectSelector,omitempty"`
	//  If true, webhook or istioctl injector will rewrite PodSpec for liveness health check to redirect request to sidecar. This makes liveness check work even when mTLS is enabled.
	RewriteAppHTTPProbe *types.BoolValue `protobuf:"bytes,16,opt,name=rewriteAppHTTPProbe,proto3" json:"rewriteAppHTTPProbe,omitempty"`
	InjectLabel         string           `protobuf:"bytes,18,opt,name=injectLabel,proto3" json:"injectLabel,omitempty"`
	// injectedAnnotations are additional annotations that will be added to the pod spec after injection
	// This is primarily to support PSP annotations.
	InjectedAnnotations *types.Struct `protobuf:"bytes,19,opt,name=injectedAnnotations,proto3" json:"injectedAnnotations,omitempty"`
	// Enable objectSelector to filter out pods with no need for sidecar before calling istio-sidecar-injector.
	ObjectSelector       *types.Struct `protobuf:"bytes,21,opt,name=objectSelector,proto3" json:"objectSelector,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SidecarInjectorConfig) Reset()         { *m = SidecarInjectorConfig{} }
func (m *SidecarInjectorConfig) String() string { return proto.CompactTextString(m) }
func (*SidecarInjectorConfig) ProtoMessage()    {}
func (*SidecarInjectorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{54}
}
func (m *SidecarInjectorConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SidecarInjectorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SidecarInjectorConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SidecarInjectorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidecarInjectorConfig.Merge(m, src)
}
func (m *SidecarInjectorConfig) XXX_Size() int {
	return m.Size()
}
func (m *SidecarInjectorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SidecarInjectorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SidecarInjectorConfig proto.InternalMessageInfo

func (m *SidecarInjectorConfig) GetEnableNamespacesByDefault() *types.BoolValue {
	if m != nil {
		return m.EnableNamespacesByDefault
	}
	return nil
}

func (m *SidecarInjectorConfig) GetNeverInjectSelector() []*types.Struct {
	if m != nil {
		return m.NeverInjectSelector
	}
	return nil
}

func (m *SidecarInjectorConfig) GetAlwaysInjectSelector() []*types.Struct {
	if m != nil {
		return m.AlwaysInjectSelector
	}
	return nil
}

func (m *SidecarInjectorConfig) GetRewriteAppHTTPProbe() *types.BoolValue {
	if m != nil {
		return m.RewriteAppHTTPProbe
	}
	return nil
}

func (m *SidecarInjectorConfig) GetInjectLabel() string {
	if m != nil {
		return m.InjectLabel
	}
	return ""
}

func (m *SidecarInjectorConfig) GetInjectedAnnotations() *types.Struct {
	if m != nil {
		return m.InjectedAnnotations
	}
	return nil
}

func (m *SidecarInjectorConfig) GetObjectSelector() *types.Struct {
	if m != nil {
		return m.ObjectSelector
	}
	return nil
}

// Configuration for stdio adapter in mixer, recommended for debug usage only.
type StdioMixerAdapterConfig struct {
	// Enable stdio adapter to output logs and metrics to local machine.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Whether to output a console-friendly or json-friendly format.
	OutputAsJson         *types.BoolValue `protobuf:"bytes,2,opt,name=outputAsJson,proto3" json:"outputAsJson,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StdioMixerAdapterConfig) Reset()         { *m = StdioMixerAdapterConfig{} }
func (m *StdioMixerAdapterConfig) String() string { return proto.CompactTextString(m) }
func (*StdioMixerAdapterConfig) ProtoMessage()    {}
func (*StdioMixerAdapterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{55}
}
func (m *StdioMixerAdapterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdioMixerAdapterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdioMixerAdapterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdioMixerAdapterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdioMixerAdapterConfig.Merge(m, src)
}
func (m *StdioMixerAdapterConfig) XXX_Size() int {
	return m.Size()
}
func (m *StdioMixerAdapterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StdioMixerAdapterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StdioMixerAdapterConfig proto.InternalMessageInfo

func (m *StdioMixerAdapterConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *StdioMixerAdapterConfig) GetOutputAsJson() *types.BoolValue {
	if m != nil {
		return m.OutputAsJson
	}
	return nil
}

// Configuration for stackdriver adapter in mixer.
type StackdriverMixerAdapterConfig struct {
	Enabled              *types.BoolValue                             `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Auth                 *StackdriverAuthConfig                       `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Tracer               *StackdriverTracerConfig                     `protobuf:"bytes,3,opt,name=tracer,proto3" json:"tracer,omitempty"`
	ContextGraph         *StackdriverContextGraph                     `protobuf:"bytes,4,opt,name=contextGraph,proto3" json:"contextGraph,omitempty"`
	Logging              *StackdriverMixerAdapterConfig_EnabledConfig `protobuf:"bytes,5,opt,name=logging,proto3" json:"logging,omitempty"`
	Metrics              *StackdriverMixerAdapterConfig_EnabledConfig `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *StackdriverMixerAdapterConfig) Reset()         { *m = StackdriverMixerAdapterConfig{} }
func (m *StackdriverMixerAdapterConfig) String() string { return proto.CompactTextString(m) }
func (*StackdriverMixerAdapterConfig) ProtoMessage()    {}
func (*StackdriverMixerAdapterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{56}
}
func (m *StackdriverMixerAdapterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StackdriverMixerAdapterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StackdriverMixerAdapterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StackdriverMixerAdapterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackdriverMixerAdapterConfig.Merge(m, src)
}
func (m *StackdriverMixerAdapterConfig) XXX_Size() int {
	return m.Size()
}
func (m *StackdriverMixerAdapterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StackdriverMixerAdapterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StackdriverMixerAdapterConfig proto.InternalMessageInfo

func (m *StackdriverMixerAdapterConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *StackdriverMixerAdapterConfig) GetAuth() *StackdriverAuthConfig {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *StackdriverMixerAdapterConfig) GetTracer() *StackdriverTracerConfig {
	if m != nil {
		return m.Tracer
	}
	return nil
}

func (m *StackdriverMixerAdapterConfig) GetContextGraph() *StackdriverContextGraph {
	if m != nil {
		return m.ContextGraph
	}
	return nil
}

func (m *StackdriverMixerAdapterConfig) GetLogging() *StackdriverMixerAdapterConfig_EnabledConfig {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *StackdriverMixerAdapterConfig) GetMetrics() *StackdriverMixerAdapterConfig_EnabledConfig {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type StackdriverMixerAdapterConfig_EnabledConfig struct {
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StackdriverMixerAdapterConfig_EnabledConfig) Reset() {
	*m = StackdriverMixerAdapterConfig_EnabledConfig{}
}
func (m *StackdriverMixerAdapterConfig_EnabledConfig) String() string {
	return proto.CompactTextString(m)
}
func (*StackdriverMixerAdapterConfig_EnabledConfig) ProtoMessage() {}
func (*StackdriverMixerAdapterConfig_EnabledConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{56, 0}
}
func (m *StackdriverMixerAdapterConfig_EnabledConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StackdriverMixerAdapterConfig_EnabledConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StackdriverMixerAdapterConfig_EnabledConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StackdriverMixerAdapterConfig_EnabledConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackdriverMixerAdapterConfig_EnabledConfig.Merge(m, src)
}
func (m *StackdriverMixerAdapterConfig_EnabledConfig) XXX_Size() int {
	return m.Size()
}
func (m *StackdriverMixerAdapterConfig_EnabledConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StackdriverMixerAdapterConfig_EnabledConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StackdriverMixerAdapterConfig_EnabledConfig proto.InternalMessageInfo

func (m *StackdriverMixerAdapterConfig_EnabledConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

type StackdriverAuthConfig struct {
	AppCredentials       *types.BoolValue `protobuf:"bytes,1,opt,name=appCredentials,proto3" json:"appCredentials,omitempty"`
	ApiKey               string           `protobuf:"bytes,2,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	ServiceAccountPath   string           `protobuf:"bytes,3,opt,name=serviceAccountPath,proto3" json:"serviceAccountPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StackdriverAuthConfig) Reset()         { *m = StackdriverAuthConfig{} }
func (m *StackdriverAuthConfig) String() string { return proto.CompactTextString(m) }
func (*StackdriverAuthConfig) ProtoMessage()    {}
func (*StackdriverAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{57}
}
func (m *StackdriverAuthConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StackdriverAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StackdriverAuthConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StackdriverAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackdriverAuthConfig.Merge(m, src)
}
func (m *StackdriverAuthConfig) XXX_Size() int {
	return m.Size()
}
func (m *StackdriverAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StackdriverAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StackdriverAuthConfig proto.InternalMessageInfo

func (m *StackdriverAuthConfig) GetAppCredentials() *types.BoolValue {
	if m != nil {
		return m.AppCredentials
	}
	return nil
}

func (m *StackdriverAuthConfig) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *StackdriverAuthConfig) GetServiceAccountPath() string {
	if m != nil {
		return m.ServiceAccountPath
	}
	return ""
}

type StackdriverTracerConfig struct {
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	SampleProbability    uint32           `protobuf:"varint,2,opt,name=sampleProbability,proto3" json:"sampleProbability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StackdriverTracerConfig) Reset()         { *m = StackdriverTracerConfig{} }
func (m *StackdriverTracerConfig) String() string { return proto.CompactTextString(m) }
func (*StackdriverTracerConfig) ProtoMessage()    {}
func (*StackdriverTracerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{58}
}
func (m *StackdriverTracerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StackdriverTracerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StackdriverTracerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StackdriverTracerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackdriverTracerConfig.Merge(m, src)
}
func (m *StackdriverTracerConfig) XXX_Size() int {
	return m.Size()
}
func (m *StackdriverTracerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StackdriverTracerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StackdriverTracerConfig proto.InternalMessageInfo

func (m *StackdriverTracerConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *StackdriverTracerConfig) GetSampleProbability() uint32 {
	if m != nil {
		return m.SampleProbability
	}
	return 0
}

type StackdriverContextGraph struct {
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StackdriverContextGraph) Reset()         { *m = StackdriverContextGraph{} }
func (m *StackdriverContextGraph) String() string { return proto.CompactTextString(m) }
func (*StackdriverContextGraph) ProtoMessage()    {}
func (*StackdriverContextGraph) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{59}
}
func (m *StackdriverContextGraph) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StackdriverContextGraph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StackdriverContextGraph.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StackdriverContextGraph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackdriverContextGraph.Merge(m, src)
}
func (m *StackdriverContextGraph) XXX_Size() int {
	return m.Size()
}
func (m *StackdriverContextGraph) XXX_DiscardUnknown() {
	xxx_messageInfo_StackdriverContextGraph.DiscardUnknown(m)
}

var xxx_messageInfo_StackdriverContextGraph proto.InternalMessageInfo

func (m *StackdriverContextGraph) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// Configuration for each of the supported tracers.
type TracerConfig struct {
	// Configuration for the datadog tracing service.
	Datadog *TracerDatadogConfig `protobuf:"bytes,1,opt,name=datadog,proto3" json:"datadog,omitempty"`
	// Configuration for the lightstep tracing service.
	Lightstep *TracerLightStepConfig `protobuf:"bytes,2,opt,name=lightstep,proto3" json:"lightstep,omitempty"`
	// Configuration for the zipkin tracing service.
	Zipkin *TracerZipkinConfig `protobuf:"bytes,3,opt,name=zipkin,proto3" json:"zipkin,omitempty"`
	// Configuration for the stackdriver tracing service.
	Stackdriver          *TracerStackdriverConfig `protobuf:"bytes,4,opt,name=stackdriver,proto3" json:"stackdriver,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TracerConfig) Reset()         { *m = TracerConfig{} }
func (m *TracerConfig) String() string { return proto.CompactTextString(m) }
func (*TracerConfig) ProtoMessage()    {}
func (*TracerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{60}
}
func (m *TracerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerConfig.Merge(m, src)
}
func (m *TracerConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracerConfig proto.InternalMessageInfo

func (m *TracerConfig) GetDatadog() *TracerDatadogConfig {
	if m != nil {
		return m.Datadog
	}
	return nil
}

func (m *TracerConfig) GetLightstep() *TracerLightStepConfig {
	if m != nil {
		return m.Lightstep
	}
	return nil
}

func (m *TracerConfig) GetZipkin() *TracerZipkinConfig {
	if m != nil {
		return m.Zipkin
	}
	return nil
}

func (m *TracerConfig) GetStackdriver() *TracerStackdriverConfig {
	if m != nil {
		return m.Stackdriver
	}
	return nil
}

// Configuration for the datadog tracing service.
type TracerDatadogConfig struct {
	// Address in host:port format for reporting trace data to the Datadog agent.
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerDatadogConfig) Reset()         { *m = TracerDatadogConfig{} }
func (m *TracerDatadogConfig) String() string { return proto.CompactTextString(m) }
func (*TracerDatadogConfig) ProtoMessage()    {}
func (*TracerDatadogConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{61}
}
func (m *TracerDatadogConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracerDatadogConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracerDatadogConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracerDatadogConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerDatadogConfig.Merge(m, src)
}
func (m *TracerDatadogConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracerDatadogConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerDatadogConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracerDatadogConfig proto.InternalMessageInfo

func (m *TracerDatadogConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Configuration for the lightstep tracing service.
type TracerLightStepConfig struct {
	// Sets the lightstep satellite pool address in host:port format for reporting trace data.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Sets the lightstep access token.
	AccessToken string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	// Sets path to the file containing the cacert to use when verifying TLS.
	CacertPath string `protobuf:"bytes,3,opt,name=cacertPath,proto3" json:"cacertPath,omitempty"`
	// Enables lightstep secure connection.
	Secure               *types.BoolValue `protobuf:"bytes,4,opt,name=secure,proto3" json:"secure,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TracerLightStepConfig) Reset()         { *m = TracerLightStepConfig{} }
func (m *TracerLightStepConfig) String() string { return proto.CompactTextString(m) }
func (*TracerLightStepConfig) ProtoMessage()    {}
func (*TracerLightStepConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{62}
}
func (m *TracerLightStepConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracerLightStepConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracerLightStepConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracerLightStepConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerLightStepConfig.Merge(m, src)
}
func (m *TracerLightStepConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracerLightStepConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerLightStepConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracerLightStepConfig proto.InternalMessageInfo

func (m *TracerLightStepConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TracerLightStepConfig) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *TracerLightStepConfig) GetCacertPath() string {
	if m != nil {
		return m.CacertPath
	}
	return ""
}

func (m *TracerLightStepConfig) GetSecure() *types.BoolValue {
	if m != nil {
		return m.Secure
	}
	return nil
}

// Configuration for the zipkin tracing service.
type TracerZipkinConfig struct {
	// Address of zipkin instance in host:port format for reporting trace data.
	//
	// Example: <zipkin-collector-service>.<zipkin-collector-namespace>:941
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerZipkinConfig) Reset()         { *m = TracerZipkinConfig{} }
func (m *TracerZipkinConfig) String() string { return proto.CompactTextString(m) }
func (*TracerZipkinConfig) ProtoMessage()    {}
func (*TracerZipkinConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{63}
}
func (m *TracerZipkinConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracerZipkinConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracerZipkinConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracerZipkinConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerZipkinConfig.Merge(m, src)
}
func (m *TracerZipkinConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracerZipkinConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerZipkinConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracerZipkinConfig proto.InternalMessageInfo

func (m *TracerZipkinConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Configuration for the stackdriver tracing service.
type TracerStackdriverConfig struct {
	// enables trace output to stdout.
	Debug *types.BoolValue `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	// The global default max number of attributes per span.
	MaxNumberOfAttributes uint32 `protobuf:"varint,2,opt,name=maxNumberOfAttributes,proto3" json:"maxNumberOfAttributes,omitempty"`
	// The global default max number of annotation events per span.
	MaxNumberOfAnnotations uint32 `protobuf:"varint,3,opt,name=maxNumberOfAnnotations,proto3" json:"maxNumberOfAnnotations,omitempty"`
	// The global default max number of message events per span.
	MaxNumberOfMessageEvents uint32   `protobuf:"varint,4,opt,name=maxNumberOfMessageEvents,proto3" json:"maxNumberOfMessageEvents,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *TracerStackdriverConfig) Reset()         { *m = TracerStackdriverConfig{} }
func (m *TracerStackdriverConfig) String() string { return proto.CompactTextString(m) }
func (*TracerStackdriverConfig) ProtoMessage()    {}
func (*TracerStackdriverConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{64}
}
func (m *TracerStackdriverConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracerStackdriverConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracerStackdriverConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracerStackdriverConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerStackdriverConfig.Merge(m, src)
}
func (m *TracerStackdriverConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracerStackdriverConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerStackdriverConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracerStackdriverConfig proto.InternalMessageInfo

func (m *TracerStackdriverConfig) GetDebug() *types.BoolValue {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *TracerStackdriverConfig) GetMaxNumberOfAttributes() uint32 {
	if m != nil {
		return m.MaxNumberOfAttributes
	}
	return 0
}

func (m *TracerStackdriverConfig) GetMaxNumberOfAnnotations() uint32 {
	if m != nil {
		return m.MaxNumberOfAnnotations
	}
	return 0
}

func (m *TracerStackdriverConfig) GetMaxNumberOfMessageEvents() uint32 {
	if m != nil {
		return m.MaxNumberOfMessageEvents
	}
	return 0
}

// Configurations for different tracing system to be installed.
type TracingConfig struct {
	// Enables tracing systems installation.
	Enabled *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Defines Configuration for addon Jaeger tracing.
	Jaeger *TracingJaegerConfig `protobuf:"bytes,3,opt,name=jaeger,proto3" json:"jaeger,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector *types.Struct `protobuf:"bytes,4,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"` // Deprecated: Do not use.
	// Configures which tracing system to be installed.
	Provider string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	// Controls K8s service for addon tracing components.
	Service *ServiceConfig `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
	// Defines Configuration for addon Zipkin tracing.
	Zipkin      *TracingZipkinConfig     `protobuf:"bytes,7,opt,name=zipkin,proto3" json:"zipkin,omitempty"`
	Opencensus  *TracingOpencensusConfig `protobuf:"bytes,8,opt,name=opencensus,proto3" json:"opencensus,omitempty"`
	ContextPath string                   `protobuf:"bytes,9,opt,name=contextPath,proto3" json:"contextPath,omitempty"`
	// See EgressGatewayConfig.
	PodAntiAffinityLabelSelector []*types.Struct `protobuf:"bytes,13,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"` // Deprecated: Do not use.
	// See EgressGatewayConfig.
	PodAntiAffinityTermLabelSelector []*types.Struct `protobuf:"bytes,14,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"` // Deprecated: Do not use.
	Tolerations                      []*types.Struct `protobuf:"bytes,15,rep,name=tolerations,proto3" json:"tolerations,omitempty"`                                           // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral             struct{}        `json:"-"`
	XXX_unrecognized                 []byte          `json:"-"`
	XXX_sizecache                    int32           `json:"-"`
}

func (m *TracingConfig) Reset()         { *m = TracingConfig{} }
func (m *TracingConfig) String() string { return proto.CompactTextString(m) }
func (*TracingConfig) ProtoMessage()    {}
func (*TracingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{65}
}
func (m *TracingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracingConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingConfig.Merge(m, src)
}
func (m *TracingConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingConfig proto.InternalMessageInfo

func (m *TracingConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *TracingConfig) GetJaeger() *TracingJaegerConfig {
	if m != nil {
		return m.Jaeger
	}
	return nil
}

// Deprecated: Do not use.
func (m *TracingConfig) GetNodeSelector() *types.Struct {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *TracingConfig) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *TracingConfig) GetService() *ServiceConfig {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *TracingConfig) GetZipkin() *TracingZipkinConfig {
	if m != nil {
		return m.Zipkin
	}
	return nil
}

func (m *TracingConfig) GetOpencensus() *TracingOpencensusConfig {
	if m != nil {
		return m.Opencensus
	}
	return nil
}

func (m *TracingConfig) GetContextPath() string {
	if m != nil {
		return m.ContextPath
	}
	return ""
}

// Deprecated: Do not use.
func (m *TracingConfig) GetPodAntiAffinityLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *TracingConfig) GetPodAntiAffinityTermLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *TracingConfig) GetTolerations() []*types.Struct {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

type TracingOpencensusConfig struct {
	// Image hub for Opencensus tracing deployment.
	Hub string `protobuf:"bytes,1,opt,name=hub,proto3" json:"hub,omitempty"`
	// Image tag for Opencensus tracing deployment.
	Tag       *types.Value                      `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Exporters *TracingOpencensusExportersConfig `protobuf:"bytes,3,opt,name=exporters,proto3" json:"exporters,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *types.Struct `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations       *types.Struct `protobuf:"bytes,6,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TracingOpencensusConfig) Reset()         { *m = TracingOpencensusConfig{} }
func (m *TracingOpencensusConfig) String() string { return proto.CompactTextString(m) }
func (*TracingOpencensusConfig) ProtoMessage()    {}
func (*TracingOpencensusConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{66}
}
func (m *TracingOpencensusConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracingOpencensusConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracingOpencensusConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracingOpencensusConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingOpencensusConfig.Merge(m, src)
}
func (m *TracingOpencensusConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracingOpencensusConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingOpencensusConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingOpencensusConfig proto.InternalMessageInfo

func (m *TracingOpencensusConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *TracingOpencensusConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *TracingOpencensusConfig) GetExporters() *TracingOpencensusExportersConfig {
	if m != nil {
		return m.Exporters
	}
	return nil
}

// Deprecated: Do not use.
func (m *TracingOpencensusConfig) GetResources() *types.Struct {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Deprecated: Do not use.
func (m *TracingOpencensusConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

type TracingOpencensusExportersConfig struct {
	Stackdriver          *types.Struct `protobuf:"bytes,1,opt,name=stackdriver,proto3" json:"stackdriver,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TracingOpencensusExportersConfig) Reset()         { *m = TracingOpencensusExportersConfig{} }
func (m *TracingOpencensusExportersConfig) String() string { return proto.CompactTextString(m) }
func (*TracingOpencensusExportersConfig) ProtoMessage()    {}
func (*TracingOpencensusExportersConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{67}
}
func (m *TracingOpencensusExportersConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracingOpencensusExportersConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracingOpencensusExportersConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracingOpencensusExportersConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingOpencensusExportersConfig.Merge(m, src)
}
func (m *TracingOpencensusExportersConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracingOpencensusExportersConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingOpencensusExportersConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingOpencensusExportersConfig proto.InternalMessageInfo

func (m *TracingOpencensusExportersConfig) GetStackdriver() *types.Struct {
	if m != nil {
		return m.Stackdriver
	}
	return nil
}

// Configuration for addon Jaeger tracing.
type TracingJaegerConfig struct {
	// Image hub for Jaeger tracing deployment.
	Hub string `protobuf:"bytes,1,opt,name=hub,proto3" json:"hub,omitempty"`
	// Image tag for Jaeger tracing deployment.
	Tag   *types.Value `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Image string       `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	// Configures Jaeger in-memory storage setting.
	Memory           *TracingJaegerMemoryConfig `protobuf:"bytes,3,opt,name=memory,proto3" json:"memory,omitempty"`
	SpanStorageType  string                     `protobuf:"bytes,4,opt,name=spanStorageType,proto3" json:"spanStorageType,omitempty"`
	Persist          *types.BoolValue           `protobuf:"bytes,5,opt,name=persist,proto3" json:"persist,omitempty"`
	StorageClassName string                     `protobuf:"bytes,6,opt,name=storageClassName,proto3" json:"storageClassName,omitempty"`
	AccessMode       string                     `protobuf:"bytes,7,opt,name=accessMode,proto3" json:"accessMode,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *types.Struct `protobuf:"bytes,8,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations       *types.Struct `protobuf:"bytes,9,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TracingJaegerConfig) Reset()         { *m = TracingJaegerConfig{} }
func (m *TracingJaegerConfig) String() string { return proto.CompactTextString(m) }
func (*TracingJaegerConfig) ProtoMessage()    {}
func (*TracingJaegerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{68}
}
func (m *TracingJaegerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracingJaegerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracingJaegerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracingJaegerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingJaegerConfig.Merge(m, src)
}
func (m *TracingJaegerConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracingJaegerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingJaegerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingJaegerConfig proto.InternalMessageInfo

func (m *TracingJaegerConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *TracingJaegerConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *TracingJaegerConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *TracingJaegerConfig) GetMemory() *TracingJaegerMemoryConfig {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *TracingJaegerConfig) GetSpanStorageType() string {
	if m != nil {
		return m.SpanStorageType
	}
	return ""
}

func (m *TracingJaegerConfig) GetPersist() *types.BoolValue {
	if m != nil {
		return m.Persist
	}
	return nil
}

func (m *TracingJaegerConfig) GetStorageClassName() string {
	if m != nil {
		return m.StorageClassName
	}
	return ""
}

func (m *TracingJaegerConfig) GetAccessMode() string {
	if m != nil {
		return m.AccessMode
	}
	return ""
}

// Deprecated: Do not use.
func (m *TracingJaegerConfig) GetResources() *types.Struct {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Deprecated: Do not use.
func (m *TracingJaegerConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

// Configuration for Jaeger in-memory storage setting.
type TracingJaegerMemoryConfig struct {
	// Set limit of the amount of traces stored in memory for Jaeger
	MaxTraces            uint32   `protobuf:"varint,1,opt,name=max_traces,json=maxTraces,proto3" json:"max_traces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracingJaegerMemoryConfig) Reset()         { *m = TracingJaegerMemoryConfig{} }
func (m *TracingJaegerMemoryConfig) String() string { return proto.CompactTextString(m) }
func (*TracingJaegerMemoryConfig) ProtoMessage()    {}
func (*TracingJaegerMemoryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{69}
}
func (m *TracingJaegerMemoryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracingJaegerMemoryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracingJaegerMemoryConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracingJaegerMemoryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingJaegerMemoryConfig.Merge(m, src)
}
func (m *TracingJaegerMemoryConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracingJaegerMemoryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingJaegerMemoryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingJaegerMemoryConfig proto.InternalMessageInfo

func (m *TracingJaegerMemoryConfig) GetMaxTraces() uint32 {
	if m != nil {
		return m.MaxTraces
	}
	return 0
}

// Configuration for Zipkin.
type TracingZipkinConfig struct {
	// Image hub for Zipkin tracing deployment.
	Hub string `protobuf:"bytes,1,opt,name=hub,proto3" json:"hub,omitempty"`
	// Image tag for Zipkin tracing deployment.
	Tag   *types.Value `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Image string       `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	// InitialDelaySeconds of readiness probe for Zipkin deployment
	ProbeStartupDelay uint32 `protobuf:"varint,3,opt,name=probeStartupDelay,proto3" json:"probeStartupDelay,omitempty"`
	// InitialDelaySeconds of liveness probe for Zipkin deployment
	LivenessProbeStartupDelay uint32 `protobuf:"varint,11,opt,name=livenessProbeStartupDelay,proto3" json:"livenessProbeStartupDelay,omitempty"`
	// Container port for Zipkin deployment
	QueryPort uint32 `protobuf:"varint,4,opt,name=queryPort,proto3" json:"queryPort,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *Resources `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"` // Deprecated: Do not use.
	// Configure java heap opts for Zipkin deployment
	JavaOptsHeap uint32 `protobuf:"varint,6,opt,name=javaOptsHeap,proto3" json:"javaOptsHeap,omitempty"`
	// Configures number of max spans to keep in Zipkin memory storage.
	//
	// Example: A safe estimate is 1K of memory per span (each span with 2 annotations + 1 binary annotation), plus 100 MB for a safety buffer
	MaxSpans uint32 `protobuf:"varint,7,opt,name=maxSpans,proto3" json:"maxSpans,omitempty"`
	// Configures GC values of JAVA_OPTS for Zipkin deployment
	Node *TracingZipkinNodeConfig `protobuf:"bytes,8,opt,name=node,proto3" json:"node,omitempty"`
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations       *types.Struct `protobuf:"bytes,10,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TracingZipkinConfig) Reset()         { *m = TracingZipkinConfig{} }
func (m *TracingZipkinConfig) String() string { return proto.CompactTextString(m) }
func (*TracingZipkinConfig) ProtoMessage()    {}
func (*TracingZipkinConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{70}
}
func (m *TracingZipkinConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracingZipkinConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracingZipkinConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracingZipkinConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingZipkinConfig.Merge(m, src)
}
func (m *TracingZipkinConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracingZipkinConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingZipkinConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingZipkinConfig proto.InternalMessageInfo

func (m *TracingZipkinConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *TracingZipkinConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *TracingZipkinConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *TracingZipkinConfig) GetProbeStartupDelay() uint32 {
	if m != nil {
		return m.ProbeStartupDelay
	}
	return 0
}

func (m *TracingZipkinConfig) GetLivenessProbeStartupDelay() uint32 {
	if m != nil {
		return m.LivenessProbeStartupDelay
	}
	return 0
}

func (m *TracingZipkinConfig) GetQueryPort() uint32 {
	if m != nil {
		return m.QueryPort
	}
	return 0
}

// Deprecated: Do not use.
func (m *TracingZipkinConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *TracingZipkinConfig) GetJavaOptsHeap() uint32 {
	if m != nil {
		return m.JavaOptsHeap
	}
	return 0
}

func (m *TracingZipkinConfig) GetMaxSpans() uint32 {
	if m != nil {
		return m.MaxSpans
	}
	return 0
}

func (m *TracingZipkinConfig) GetNode() *TracingZipkinNodeConfig {
	if m != nil {
		return m.Node
	}
	return nil
}

// Deprecated: Do not use.
func (m *TracingZipkinConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

// Configuration for GC values of JAVA_OPTS for Zipkin deployment
type TracingZipkinNodeConfig struct {
	// Configures -XX:ConcGCThreads value of JAVA_OPTS for Zipkin deployment
	Cpus                 uint32   `protobuf:"varint,1,opt,name=cpus,proto3" json:"cpus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracingZipkinNodeConfig) Reset()         { *m = TracingZipkinNodeConfig{} }
func (m *TracingZipkinNodeConfig) String() string { return proto.CompactTextString(m) }
func (*TracingZipkinNodeConfig) ProtoMessage()    {}
func (*TracingZipkinNodeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{71}
}
func (m *TracingZipkinNodeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracingZipkinNodeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracingZipkinNodeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracingZipkinNodeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingZipkinNodeConfig.Merge(m, src)
}
func (m *TracingZipkinNodeConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracingZipkinNodeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingZipkinNodeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingZipkinNodeConfig proto.InternalMessageInfo

func (m *TracingZipkinNodeConfig) GetCpus() uint32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

type KialiSecurityConfig struct {
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CertFile             string           `protobuf:"bytes,2,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	PrivateKeyFile       string           `protobuf:"bytes,3,opt,name=private_key_file,json=privateKeyFile,proto3" json:"private_key_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *KialiSecurityConfig) Reset()         { *m = KialiSecurityConfig{} }
func (m *KialiSecurityConfig) String() string { return proto.CompactTextString(m) }
func (*KialiSecurityConfig) ProtoMessage()    {}
func (*KialiSecurityConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{72}
}
func (m *KialiSecurityConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KialiSecurityConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KialiSecurityConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KialiSecurityConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KialiSecurityConfig.Merge(m, src)
}
func (m *KialiSecurityConfig) XXX_Size() int {
	return m.Size()
}
func (m *KialiSecurityConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KialiSecurityConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KialiSecurityConfig proto.InternalMessageInfo

func (m *KialiSecurityConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *KialiSecurityConfig) GetCertFile() string {
	if m != nil {
		return m.CertFile
	}
	return ""
}

func (m *KialiSecurityConfig) GetPrivateKeyFile() string {
	if m != nil {
		return m.PrivateKeyFile
	}
	return ""
}

type KialiServiceConfig struct {
	Annotations *types.Struct `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty"`
	// Service type.
	//
	// See https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type                 string   `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KialiServiceConfig) Reset()         { *m = KialiServiceConfig{} }
func (m *KialiServiceConfig) String() string { return proto.CompactTextString(m) }
func (*KialiServiceConfig) ProtoMessage()    {}
func (*KialiServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{73}
}
func (m *KialiServiceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KialiServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KialiServiceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KialiServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KialiServiceConfig.Merge(m, src)
}
func (m *KialiServiceConfig) XXX_Size() int {
	return m.Size()
}
func (m *KialiServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KialiServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KialiServiceConfig proto.InternalMessageInfo

func (m *KialiServiceConfig) GetAnnotations() *types.Struct {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *KialiServiceConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type KialiDashboardConfig struct {
	SecretName           string           `protobuf:"bytes,1,opt,name=secretName,proto3" json:"secretName,omitempty"`
	UsernameKey          string           `protobuf:"bytes,2,opt,name=usernameKey,proto3" json:"usernameKey,omitempty"`
	PassphraseKey        string           `protobuf:"bytes,3,opt,name=passphraseKey,proto3" json:"passphraseKey,omitempty"`
	ViewOnlyMode         *types.BoolValue `protobuf:"bytes,4,opt,name=viewOnlyMode,proto3" json:"viewOnlyMode,omitempty"`
	GrafanaURL           string           `protobuf:"bytes,5,opt,name=grafanaURL,proto3" json:"grafanaURL,omitempty"`
	JaegerURL            string           `protobuf:"bytes,6,opt,name=jaegerURL,proto3" json:"jaegerURL,omitempty"`
	Auth                 *types.Struct    `protobuf:"bytes,7,opt,name=auth,proto3" json:"auth,omitempty"`
	GrafanaInClusterURL  string           `protobuf:"bytes,8,opt,name=grafanaInClusterURL,proto3" json:"grafanaInClusterURL,omitempty"`
	JaegerInClusterURL   string           `protobuf:"bytes,9,opt,name=jaegerInClusterURL,proto3" json:"jaegerInClusterURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *KialiDashboardConfig) Reset()         { *m = KialiDashboardConfig{} }
func (m *KialiDashboardConfig) String() string { return proto.CompactTextString(m) }
func (*KialiDashboardConfig) ProtoMessage()    {}
func (*KialiDashboardConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{74}
}
func (m *KialiDashboardConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KialiDashboardConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KialiDashboardConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KialiDashboardConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KialiDashboardConfig.Merge(m, src)
}
func (m *KialiDashboardConfig) XXX_Size() int {
	return m.Size()
}
func (m *KialiDashboardConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KialiDashboardConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KialiDashboardConfig proto.InternalMessageInfo

func (m *KialiDashboardConfig) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *KialiDashboardConfig) GetUsernameKey() string {
	if m != nil {
		return m.UsernameKey
	}
	return ""
}

func (m *KialiDashboardConfig) GetPassphraseKey() string {
	if m != nil {
		return m.PassphraseKey
	}
	return ""
}

func (m *KialiDashboardConfig) GetViewOnlyMode() *types.BoolValue {
	if m != nil {
		return m.ViewOnlyMode
	}
	return nil
}

func (m *KialiDashboardConfig) GetGrafanaURL() string {
	if m != nil {
		return m.GrafanaURL
	}
	return ""
}

func (m *KialiDashboardConfig) GetJaegerURL() string {
	if m != nil {
		return m.JaegerURL
	}
	return ""
}

func (m *KialiDashboardConfig) GetAuth() *types.Struct {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *KialiDashboardConfig) GetGrafanaInClusterURL() string {
	if m != nil {
		return m.GrafanaInClusterURL
	}
	return ""
}

func (m *KialiDashboardConfig) GetJaegerInClusterURL() string {
	if m != nil {
		return m.JaegerInClusterURL
	}
	return ""
}

// Configuration for Kiali addon.
type KialiConfig struct {
	Enabled          *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CreateDemoSecret *types.BoolValue `protobuf:"bytes,2,opt,name=createDemoSecret,proto3" json:"createDemoSecret,omitempty"`
	// Image hub for kiali deployment.
	Hub string `protobuf:"bytes,3,opt,name=hub,proto3" json:"hub,omitempty"`
	// Image tag for kiali deployment.
	Tag *types.Value `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	// Number of replicas for Kiali.
	ReplicaCount        uint32                `protobuf:"varint,5,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"` // Deprecated: Do not use.
	PrometheusNamespace string                `protobuf:"bytes,6,opt,name=prometheusNamespace,proto3" json:"prometheusNamespace,omitempty"`
	Security            *KialiSecurityConfig  `protobuf:"bytes,7,opt,name=security,proto3" json:"security,omitempty"`
	Dashboard           *KialiDashboardConfig `protobuf:"bytes,8,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
	ContextPath         string                `protobuf:"bytes,15,opt,name=contextPath,proto3" json:"contextPath,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector *types.Struct `protobuf:"bytes,10,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"` // Deprecated: Do not use.
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations *types.Struct `protobuf:"bytes,11,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"` // Deprecated: Do not use.
	// Pod anti-affinity label selector.
	//
	// Specify the pod anti-affinity that allows you to constrain which nodes
	// your pod is eligible to be scheduled based on labels on pods that are
	// already running on the node rather than based on labels on nodes.
	// There are currently two types of anti-affinity:
	//    "requiredDuringSchedulingIgnoredDuringExecution"
	//    "preferredDuringSchedulingIgnoredDuringExecution"
	// which denote “hard” vs. “soft” requirements, you can define your values
	// in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
	// correspondingly.
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
	//
	// Examples:
	// podAntiAffinityLabelSelector:
	//  - key: security
	//    operator: In
	//    values: S1,S2
	//    topologyKey: "kubernetes.io/hostname"
	//  This pod anti-affinity rule says that the pod requires not to be scheduled
	//  onto a node if that node is already running a pod with label having key
	//  “security” and value “S1”.
	PodAntiAffinityLabelSelector []*types.Struct `protobuf:"bytes,12,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"` // Deprecated: Do not use.
	// See PodAntiAffinityLabelSelector.
	PodAntiAffinityTermLabelSelector []*types.Struct `protobuf:"bytes,13,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"` // Deprecated: Do not use.
	Tolerations                      []*types.Struct `protobuf:"bytes,14,rep,name=tolerations,proto3" json:"tolerations,omitempty"`                                           // Deprecated: Do not use.
	Image                            string          `protobuf:"bytes,16,opt,name=image,proto3" json:"image,omitempty"`                                                       // Deprecated: Do not use.
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources            *Resources          `protobuf:"bytes,17,opt,name=resources,proto3" json:"resources,omitempty"`           // Deprecated: Do not use.
	PrometheusAddr       string              `protobuf:"bytes,18,opt,name=prometheusAddr,proto3" json:"prometheusAddr,omitempty"` // Deprecated: Do not use.
	Service              *KialiServiceConfig `protobuf:"bytes,19,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *KialiConfig) Reset()         { *m = KialiConfig{} }
func (m *KialiConfig) String() string { return proto.CompactTextString(m) }
func (*KialiConfig) ProtoMessage()    {}
func (*KialiConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{75}
}
func (m *KialiConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KialiConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KialiConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KialiConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KialiConfig.Merge(m, src)
}
func (m *KialiConfig) XXX_Size() int {
	return m.Size()
}
func (m *KialiConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KialiConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KialiConfig proto.InternalMessageInfo

func (m *KialiConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *KialiConfig) GetCreateDemoSecret() *types.BoolValue {
	if m != nil {
		return m.CreateDemoSecret
	}
	return nil
}

func (m *KialiConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *KialiConfig) GetTag() *types.Value {
	if m != nil {
		return m.Tag
	}
	return nil
}

// Deprecated: Do not use.
func (m *KialiConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *KialiConfig) GetPrometheusNamespace() string {
	if m != nil {
		return m.PrometheusNamespace
	}
	return ""
}

func (m *KialiConfig) GetSecurity() *KialiSecurityConfig {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *KialiConfig) GetDashboard() *KialiDashboardConfig {
	if m != nil {
		return m.Dashboard
	}
	return nil
}

func (m *KialiConfig) GetContextPath() string {
	if m != nil {
		return m.ContextPath
	}
	return ""
}

// Deprecated: Do not use.
func (m *KialiConfig) GetNodeSelector() *types.Struct {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *KialiConfig) GetPodAnnotations() *types.Struct {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

// Deprecated: Do not use.
func (m *KialiConfig) GetPodAntiAffinityLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *KialiConfig) GetPodAntiAffinityTermLabelSelector() []*types.Struct {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

// Deprecated: Do not use.
func (m *KialiConfig) GetTolerations() []*types.Struct {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

// Deprecated: Do not use.
func (m *KialiConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

// Deprecated: Do not use.
func (m *KialiConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Deprecated: Do not use.
func (m *KialiConfig) GetPrometheusAddr() string {
	if m != nil {
		return m.PrometheusAddr
	}
	return ""
}

func (m *KialiConfig) GetService() *KialiServiceConfig {
	if m != nil {
		return m.Service
	}
	return nil
}

type Values struct {
	Cni          *CNIConfig      `protobuf:"bytes,2,opt,name=cni,proto3" json:"cni,omitempty"`
	Istiocoredns *CoreDNSConfig  `protobuf:"bytes,3,opt,name=istiocoredns,proto3" json:"istiocoredns,omitempty"`
	Gateways     *GatewaysConfig `protobuf:"bytes,5,opt,name=gateways,proto3" json:"gateways,omitempty"`
	Global       *GlobalConfig   `protobuf:"bytes,6,opt,name=global,proto3" json:"global,omitempty"`
	Grafana      *types.Struct   `protobuf:"bytes,7,opt,name=grafana,proto3" json:"grafana,omitempty"`
	Mixer        *MixerConfig    `protobuf:"bytes,8,opt,name=mixer,proto3" json:"mixer,omitempty"`
	Pilot        *PilotConfig    `protobuf:"bytes,10,opt,name=pilot,proto3" json:"pilot,omitempty"`
	// Controls whether telemetry is exported for Pilot.
	Telemetry              *TelemetryConfig       `protobuf:"bytes,23,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	Prometheus             *PrometheusConfig      `protobuf:"bytes,11,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	SidecarInjectorWebhook *SidecarInjectorConfig `protobuf:"bytes,13,opt,name=sidecarInjectorWebhook,proto3" json:"sidecarInjectorWebhook,omitempty"`
	Tracing                *TracingConfig         `protobuf:"bytes,14,opt,name=tracing,proto3" json:"tracing,omitempty"`
	Kiali                  *KialiConfig           `protobuf:"bytes,15,opt,name=kiali,proto3" json:"kiali,omitempty"`
	// Deprecated.
	Version          string           `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	ClusterResources *types.BoolValue `protobuf:"bytes,17,opt,name=clusterResources,proto3" json:"clusterResources,omitempty"`
	// TODO: populate these.
	PrometheusOperator *types.Struct    `protobuf:"bytes,18,opt,name=prometheusOperator,proto3" json:"prometheusOperator,omitempty"`
	IstioCni           *CNIConfig       `protobuf:"bytes,19,opt,name=istio_cni,json=istioCni,proto3" json:"istio_cni,omitempty"`
	Kustomize          *types.BoolValue `protobuf:"bytes,20,opt,name=kustomize,proto3" json:"kustomize,omitempty"`
	Revision           string           `protobuf:"bytes,21,opt,name=revision,proto3" json:"revision,omitempty"`
	// TODO can this import the real mesh config API?
	MeshConfig           *types.Struct `protobuf:"bytes,36,opt,name=meshConfig,proto3" json:"meshConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Values) Reset()         { *m = Values{} }
func (m *Values) String() string { return proto.CompactTextString(m) }
func (*Values) ProtoMessage()    {}
func (*Values) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{76}
}
func (m *Values) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Values) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Values.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Values) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Values.Merge(m, src)
}
func (m *Values) XXX_Size() int {
	return m.Size()
}
func (m *Values) XXX_DiscardUnknown() {
	xxx_messageInfo_Values.DiscardUnknown(m)
}

var xxx_messageInfo_Values proto.InternalMessageInfo

func (m *Values) GetCni() *CNIConfig {
	if m != nil {
		return m.Cni
	}
	return nil
}

func (m *Values) GetIstiocoredns() *CoreDNSConfig {
	if m != nil {
		return m.Istiocoredns
	}
	return nil
}

func (m *Values) GetGateways() *GatewaysConfig {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *Values) GetGlobal() *GlobalConfig {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *Values) GetGrafana() *types.Struct {
	if m != nil {
		return m.Grafana
	}
	return nil
}

func (m *Values) GetMixer() *MixerConfig {
	if m != nil {
		return m.Mixer
	}
	return nil
}

func (m *Values) GetPilot() *PilotConfig {
	if m != nil {
		return m.Pilot
	}
	return nil
}

func (m *Values) GetTelemetry() *TelemetryConfig {
	if m != nil {
		return m.Telemetry
	}
	return nil
}

func (m *Values) GetPrometheus() *PrometheusConfig {
	if m != nil {
		return m.Prometheus
	}
	return nil
}

func (m *Values) GetSidecarInjectorWebhook() *SidecarInjectorConfig {
	if m != nil {
		return m.SidecarInjectorWebhook
	}
	return nil
}

func (m *Values) GetTracing() *TracingConfig {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *Values) GetKiali() *KialiConfig {
	if m != nil {
		return m.Kiali
	}
	return nil
}

func (m *Values) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Values) GetClusterResources() *types.BoolValue {
	if m != nil {
		return m.ClusterResources
	}
	return nil
}

func (m *Values) GetPrometheusOperator() *types.Struct {
	if m != nil {
		return m.PrometheusOperator
	}
	return nil
}

func (m *Values) GetIstioCni() *CNIConfig {
	if m != nil {
		return m.IstioCni
	}
	return nil
}

func (m *Values) GetKustomize() *types.BoolValue {
	if m != nil {
		return m.Kustomize
	}
	return nil
}

func (m *Values) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *Values) GetMeshConfig() *types.Struct {
	if m != nil {
		return m.MeshConfig
	}
	return nil
}

// ZeroVPNConfig enables cross-cluster access using SNI matching.
type ZeroVPNConfig struct {
	// Controls whether ZeroVPN is enabled.
	Enabled              *types.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Suffix               string           `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ZeroVPNConfig) Reset()         { *m = ZeroVPNConfig{} }
func (m *ZeroVPNConfig) String() string { return proto.CompactTextString(m) }
func (*ZeroVPNConfig) ProtoMessage()    {}
func (*ZeroVPNConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_261260e22432516f, []int{77}
}
func (m *ZeroVPNConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroVPNConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroVPNConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroVPNConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroVPNConfig.Merge(m, src)
}
func (m *ZeroVPNConfig) XXX_Size() int {
	return m.Size()
}
func (m *ZeroVPNConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroVPNConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroVPNConfig proto.InternalMessageInfo

func (m *ZeroVPNConfig) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *ZeroVPNConfig) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func init() {
	proto.RegisterEnum("v1alpha1.Mode", Mode_name, Mode_value)
	proto.RegisterEnum("v1alpha1.IngressControllerMode", IngressControllerMode_name, IngressControllerMode_value)
	proto.RegisterEnum("v1alpha1.AccessLogEncoding", AccessLogEncoding_name, AccessLogEncoding_value)
	proto.RegisterEnum("v1alpha1.Tracer", Tracer_name, Tracer_value)
	proto.RegisterEnum("v1alpha1.OutboundTrafficPolicyConfig_Mode", OutboundTrafficPolicyConfig_Mode_name, OutboundTrafficPolicyConfig_Mode_value)
	proto.RegisterType((*ArchConfig)(nil), "v1alpha1.ArchConfig")
	proto.RegisterType((*CNIConfig)(nil), "v1alpha1.CNIConfig")
	proto.RegisterType((*CNIRepairConfig)(nil), "v1alpha1.CNIRepairConfig")
	proto.RegisterType((*CPUTargetUtilizationConfig)(nil), "v1alpha1.CPUTargetUtilizationConfig")
	proto.RegisterType((*Resources)(nil), "v1alpha1.Resources")
	proto.RegisterMapType((map[string]string)(nil), "v1alpha1.Resources.LimitsEntry")
	proto.RegisterMapType((map[string]string)(nil), "v1alpha1.Resources.RequestsEntry")
	proto.RegisterType((*CoreDNSConfig)(nil), "v1alpha1.CoreDNSConfig")
	proto.RegisterType((*DefaultPodDisruptionBudgetConfig)(nil), "v1alpha1.DefaultPodDisruptionBudgetConfig")
	proto.RegisterType((*DefaultResourcesConfig)(nil), "v1alpha1.DefaultResourcesConfig")
	proto.RegisterType((*EgressGatewayConfig)(nil), "v1alpha1.EgressGatewayConfig")
	proto.RegisterType((*EnvoyMetricsConfig)(nil), "v1alpha1.EnvoyMetricsConfig")
	proto.RegisterType((*GatewayLabelsConfig)(nil), "v1alpha1.GatewayLabelsConfig")
	proto.RegisterType((*GatewaysConfig)(nil), "v1alpha1.GatewaysConfig")
	proto.RegisterType((*GlobalConfig)(nil), "v1alpha1.GlobalConfig")
	proto.RegisterType((*STSConfig)(nil), "v1alpha1.STSConfig")
	proto.RegisterType((*IstiodConfig)(nil), "v1alpha1.IstiodConfig")
	proto.RegisterType((*GlobalLoggingConfig)(nil), "v1alpha1.GlobalLoggingConfig")
	proto.RegisterType((*IngressGatewayConfig)(nil), "v1alpha1.IngressGatewayConfig")
	proto.RegisterType((*IngressGatewaySdsConfig)(nil), "v1alpha1.IngressGatewaySdsConfig")
	proto.RegisterType((*IngressGatewayZvpnConfig)(nil), "v1alpha1.IngressGatewayZvpnConfig")
	proto.RegisterType((*KubernetesEnvMixerAdapterConfig)(nil), "v1alpha1.KubernetesEnvMixerAdapterConfig")
	proto.RegisterType((*LoadSheddingConfig)(nil), "v1alpha1.LoadSheddingConfig")
	proto.RegisterType((*MTLSConfig)(nil), "v1alpha1.MTLSConfig")
	proto.RegisterType((*MeshExpansionConfig)(nil), "v1alpha1.MeshExpansionConfig")
	proto.RegisterType((*MixerTelemetryAdaptersConfig)(nil), "v1alpha1.MixerTelemetryAdaptersConfig")
	proto.RegisterType((*MixerPolicyAdaptersConfig)(nil), "v1alpha1.MixerPolicyAdaptersConfig")
	proto.RegisterType((*MixerConfig)(nil), "v1alpha1.MixerConfig")
	proto.RegisterType((*MixerPolicyConfig)(nil), "v1alpha1.MixerPolicyConfig")
	proto.RegisterType((*MixerTelemetryConfig)(nil), "v1alpha1.MixerTelemetryConfig")
	proto.RegisterType((*MultiClusterConfig)(nil), "v1alpha1.MultiClusterConfig")
	proto.RegisterType((*OutboundTrafficPolicyConfig)(nil), "v1alpha1.OutboundTrafficPolicyConfig")
	proto.RegisterType((*PilotConfig)(nil), "v1alpha1.PilotConfig")
	proto.RegisterType((*PilotIngressConfig)(nil), "v1alpha1.PilotIngressConfig")
	proto.RegisterType((*PilotPolicyConfig)(nil), "v1alpha1.PilotPolicyConfig")
	proto.RegisterType((*TelemetryConfig)(nil), "v1alpha1.TelemetryConfig")
	proto.RegisterType((*TelemetryV1Config)(nil), "v1alpha1.TelemetryV1Config")
	proto.RegisterType((*TelemetryV2Config)(nil), "v1alpha1.TelemetryV2Config")
	proto.RegisterType((*TelemetryV2MetadataExchangeConfig)(nil), "v1alpha1.TelemetryV2MetadataExchangeConfig")
	proto.RegisterType((*TelemetryV2PrometheusConfig)(nil), "v1alpha1.TelemetryV2PrometheusConfig")
	proto.RegisterType((*TelemetryV2StackDriverConfig)(nil), "v1alpha1.TelemetryV2StackDriverConfig")
	proto.RegisterType((*PilotConfigSource)(nil), "v1alpha1.PilotConfigSource")
	proto.RegisterType((*PortsConfig)(nil), "v1alpha1.PortsConfig")
	proto.RegisterType((*PrometheusConfig)(nil), "v1alpha1.PrometheusConfig")
	proto.RegisterType((*PrometheusMixerAdapterConfig)(nil), "v1alpha1.PrometheusMixerAdapterConfig")
	proto.RegisterType((*PrometheusSecurityConfig)(nil), "v1alpha1.PrometheusSecurityConfig")
	proto.RegisterType((*PrometheusServiceConfig)(nil), "v1alpha1.PrometheusServiceConfig")
	proto.RegisterType((*PrometheusServiceNodePortConfig)(nil), "v1alpha1.PrometheusServiceNodePortConfig")
	proto.RegisterType((*ProxyConfig)(nil), "v1alpha1.ProxyConfig")
	proto.RegisterType((*EnvoyAccessLogConfig)(nil), "v1alpha1.EnvoyAccessLogConfig")
	proto.RegisterType((*EnvoyAccessLogtlsSettings)(nil), "v1alpha1.EnvoyAccessLogtlsSettings")
	proto.RegisterType((*ProxyInitConfig)(nil), "v1alpha1.ProxyInitConfig")
	proto.RegisterType((*ResourcesRequestsConfig)(nil), "v1alpha1.ResourcesRequestsConfig")
	proto.RegisterType((*SDSConfig)(nil), "v1alpha1.SDSConfig")
	proto.RegisterType((*SecretVolume)(nil), "v1alpha1.SecretVolume")
	proto.RegisterType((*ServiceConfig)(nil), "v1alpha1.ServiceConfig")
	proto.RegisterType((*SidecarInjectorConfig)(nil), "v1alpha1.SidecarInjectorConfig")
	proto.RegisterType((*StdioMixerAdapterConfig)(nil), "v1alpha1.StdioMixerAdapterConfig")
	proto.RegisterType((*StackdriverMixerAdapterConfig)(nil), "v1alpha1.StackdriverMixerAdapterConfig")
	proto.RegisterType((*StackdriverMixerAdapterConfig_EnabledConfig)(nil), "v1alpha1.StackdriverMixerAdapterConfig.EnabledConfig")
	proto.RegisterType((*StackdriverAuthConfig)(nil), "v1alpha1.StackdriverAuthConfig")
	proto.RegisterType((*StackdriverTracerConfig)(nil), "v1alpha1.StackdriverTracerConfig")
	proto.RegisterType((*StackdriverContextGraph)(nil), "v1alpha1.StackdriverContextGraph")
	proto.RegisterType((*TracerConfig)(nil), "v1alpha1.TracerConfig")
	proto.RegisterType((*TracerDatadogConfig)(nil), "v1alpha1.TracerDatadogConfig")
	proto.RegisterType((*TracerLightStepConfig)(nil), "v1alpha1.TracerLightStepConfig")
	proto.RegisterType((*TracerZipkinConfig)(nil), "v1alpha1.TracerZipkinConfig")
	proto.RegisterType((*TracerStackdriverConfig)(nil), "v1alpha1.TracerStackdriverConfig")
	proto.RegisterType((*TracingConfig)(nil), "v1alpha1.TracingConfig")
	proto.RegisterType((*TracingOpencensusConfig)(nil), "v1alpha1.TracingOpencensusConfig")
	proto.RegisterType((*TracingOpencensusExportersConfig)(nil), "v1alpha1.TracingOpencensusExportersConfig")
	proto.RegisterType((*TracingJaegerConfig)(nil), "v1alpha1.TracingJaegerConfig")
	proto.RegisterType((*TracingJaegerMemoryConfig)(nil), "v1alpha1.TracingJaegerMemoryConfig")
	proto.RegisterType((*TracingZipkinConfig)(nil), "v1alpha1.TracingZipkinConfig")
	proto.RegisterType((*TracingZipkinNodeConfig)(nil), "v1alpha1.TracingZipkinNodeConfig")
	proto.RegisterType((*KialiSecurityConfig)(nil), "v1alpha1.KialiSecurityConfig")
	proto.RegisterType((*KialiServiceConfig)(nil), "v1alpha1.KialiServiceConfig")
	proto.RegisterType((*KialiDashboardConfig)(nil), "v1alpha1.KialiDashboardConfig")
	proto.RegisterType((*KialiConfig)(nil), "v1alpha1.KialiConfig")
	proto.RegisterType((*Values)(nil), "v1alpha1.Values")
	proto.RegisterType((*ZeroVPNConfig)(nil), "v1alpha1.ZeroVPNConfig")
}

func init() {
	proto.RegisterFile("pkg/apis/istio/v1alpha1/values_types.proto", fileDescriptor_261260e22432516f)
}

var fileDescriptor_261260e22432516f = []byte{
	// 7204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x49, 0x6c, 0x24, 0x47,
	0x76, 0xa8, 0x8a, 0x7b, 0xbd, 0x62, 0x91, 0xc5, 0x60, 0x93, 0x9d, 0xcd, 0xa6, 0x7a, 0x49, 0x6d,
	0x3d, 0xdd, 0x2d, 0xf6, 0xa2, 0x56, 0x6f, 0xea, 0x96, 0xc4, 0x26, 0xd9, 0x12, 0x25, 0x6e, 0x53,
	0xa4, 0x96, 0xd1, 0xff, 0x33, 0xfd, 0x83, 0x99, 0xc1, 0x62, 0x8a, 0x59, 0x99, 0x39, 0x19, 0x51,
	0x6c, 0x52, 0xc0, 0xc7, 0xff, 0xff, 0x30, 0xf8, 0x87, 0xbf, 0xe1, 0xfb, 0xe0, 0xcb, 0x18, 0x30,
	0x0c, 0xc3, 0xb0, 0x2f, 0x3e, 0x18, 0x30, 0x60, 0x5f, 0x0c, 0x5f, 0xe6, 0xe0, 0xe3, 0x5c, 0x7c,
	0xf3, 0xc1, 0x1e, 0xf8, 0x62, 0xdf, 0x07, 0xf0, 0xc0, 0x06, 0x6c, 0xc4, 0x92, 0x7b, 0x66, 0x65,
	0xb1, 0x48, 0x09, 0x03, 0x7b, 0x6e, 0x95, 0x2f, 0xde, 0x8b, 0x8c, 0x8c, 0x78, 0xf1, 0xd6, 0x88,
	0x57, 0x70, 0xdd, 0x3b, 0x68, 0xdd, 0xc2, 0x9e, 0x45, 0x6f, 0x59, 0x94, 0x59, 0xee, 0xad, 0xc3,
	0x3b, 0xd8, 0xf6, 0xf6, 0xf1, 0x9d, 0x5b, 0x87, 0xd8, 0xee, 0x10, 0xfa, 0x82, 0x1d, 0x7b, 0x84,
	0x2e, 0x78, 0xbe, 0xcb, 0x5c, 0x34, 0x16, 0x34, 0xce, 0x5d, 0x6a, 0xb9, 0x6e, 0xcb, 0x26, 0xb7,
	0x04, 0x7c, 0xb7, 0xb3, 0x77, 0xcb, 0xec, 0xf8, 0x98, 0x59, 0xae, 0x23, 0x31, 0xe7, 0xe6, 0xd3,
	0xed, 0x94, 0xf9, 0x1d, 0x83, 0xa9, 0xd6, 0x0c, 0xf5, 0x4b, 0x1f, 0x7b, 0x1e, 0xf1, 0xd5, 0x7b,
	0xe6, 0x2e, 0xa4, 0xdb, 0xb1, 0x73, 0x2c, 0x9b, 0xf4, 0x26, 0xc0, 0xa2, 0x6f, 0xec, 0x2f, 0xb9,
	0xce, 0x9e, 0xd5, 0x42, 0xe7, 0x60, 0x18, 0xb7, 0xcd, 0xfb, 0xf7, 0xb4, 0xca, 0x95, 0xca, 0xb5,
	0x7a, 0x53, 0x3e, 0x20, 0x0d, 0x46, 0x3d, 0xcf, 0xb8, 0x7f, 0xcf, 0x26, 0xda, 0x80, 0x80, 0x07,
	0x8f, 0x1c, 0x9f, 0xbe, 0xf3, 0xe8, 0xf6, 0x91, 0x36, 0x28, 0xf1, 0xc5, 0x83, 0xfe, 0x17, 0x43,
	0x50, 0x5d, 0xda, 0x58, 0x55, 0x7d, 0xde, 0x83, 0x51, 0xe2, 0xe0, 0x5d, 0x9b, 0x98, 0xa2, 0xd7,
	0xda, 0xdd, 0xb9, 0x05, 0x39, 0x9c, 0x85, 0x60, 0x38, 0x0b, 0xcf, 0x5c, 0xd7, 0xfe, 0x9c, 0x4f,
	0x4f, 0x33, 0x40, 0x45, 0x0d, 0x18, 0xdc, 0xef, 0xec, 0x8a, 0xf7, 0x55, 0x9b, 0xfc, 0x27, 0xba,
	0x06, 0x83, 0x0c, 0xb7, 0xc4, 0x9b, 0x6a, 0x77, 0x67, 0x33, 0x7d, 0x48, 0x7a, 0x8e, 0xc2, 0x47,
	0x65, 0xb5, 0x71, 0x8b, 0x68, 0x43, 0x82, 0x5a, 0x3e, 0xa0, 0x4b, 0x00, 0x5e, 0xc7, 0xb6, 0xb7,
	0x5c, 0xdb, 0x32, 0x8e, 0xb5, 0x61, 0xd1, 0x14, 0x83, 0xa0, 0x79, 0xa8, 0x1a, 0x8e, 0xf5, 0xcc,
	0x72, 0x96, 0x2d, 0x5f, 0x1b, 0x11, 0xcd, 0x11, 0x80, 0x53, 0x1b, 0x8e, 0xc5, 0x3f, 0x89, 0x37,
	0x8f, 0x4a, 0xea, 0x08, 0x82, 0xae, 0xc1, 0xa4, 0x7a, 0x7a, 0x6e, 0xd9, 0x64, 0x03, 0xb7, 0x89,
	0x36, 0x26, 0x90, 0xd2, 0x60, 0x74, 0x13, 0xa6, 0xc8, 0x91, 0x61, 0x77, 0x4c, 0xf1, 0x48, 0x3d,
	0x6c, 0x10, 0xaa, 0x55, 0xaf, 0x0c, 0x5e, 0xab, 0x36, 0xb3, 0x0d, 0x68, 0x09, 0x26, 0x3c, 0xd7,
	0x5c, 0x74, 0x1c, 0x97, 0x09, 0x7e, 0xa0, 0x1a, 0x88, 0x09, 0x38, 0x9f, 0x99, 0x80, 0x6d, 0xc1,
	0x11, 0xcf, 0x06, 0xb4, 0x4a, 0x33, 0x45, 0x82, 0xae, 0x41, 0xc3, 0xa3, 0xde, 0x0b, 0xc3, 0xee,
	0x50, 0x46, 0xfc, 0x17, 0xbe, 0x6b, 0x13, 0xad, 0x26, 0x46, 0x37, 0xe1, 0x51, 0x6f, 0x49, 0x82,
	0x9b, 0xae, 0x4d, 0xd0, 0x1c, 0x8c, 0xd9, 0x6e, 0x6b, 0x8d, 0x1c, 0x12, 0x5b, 0x1b, 0x17, 0x18,
	0xe1, 0x33, 0xba, 0x03, 0x23, 0x3e, 0xf1, 0xb0, 0xe5, 0x6b, 0x75, 0x31, 0x84, 0x0b, 0x0b, 0x01,
	0xfb, 0x2e, 0x2c, 0x6d, 0xac, 0x36, 0x45, 0x93, 0x5c, 0xf3, 0xa6, 0x42, 0xe4, 0x6b, 0x6f, 0xec,
	0x63, 0xcb, 0x21, 0xa6, 0x36, 0x51, 0xbe, 0xf6, 0x0a, 0x55, 0xff, 0x3f, 0x83, 0x30, 0x99, 0xea,
	0xf1, 0xd7, 0x86, 0x8b, 0xe6, 0xa1, 0x6a, 0xe3, 0x5d, 0x62, 0x6f, 0xb9, 0x26, 0x15, 0x4c, 0x34,
	0xd6, 0x8c, 0x00, 0xe8, 0x4d, 0x18, 0x37, 0x7c, 0x82, 0x19, 0x59, 0x39, 0x24, 0x0e, 0xa3, 0x92,
	0x8d, 0xc4, 0x92, 0x24, 0xe0, 0x9c, 0x9b, 0x4c, 0x62, 0x13, 0x46, 0x44, 0x37, 0xa3, 0xa2, 0x9b,
	0x18, 0x84, 0xf3, 0xc8, 0xae, 0xef, 0x1e, 0x10, 0x67, 0xcb, 0x35, 0xd7, 0x78, 0xef, 0x9f, 0x92,
	0x63, 0xc5, 0x4f, 0xd9, 0x06, 0x74, 0x1b, 0xa6, 0x93, 0x40, 0xf1, 0x15, 0x5a, 0x55, 0xe0, 0xe7,
	0x35, 0xf1, 0xfe, 0x2d, 0xc7, 0x62, 0x4b, 0xae, 0xc3, 0xf8, 0x94, 0xfb, 0x82, 0x5f, 0x41, 0xf6,
	0x9f, 0x69, 0xd0, 0xbf, 0x84, 0xb9, 0xa5, 0xad, 0xcf, 0x76, 0xb0, 0xdf, 0x22, 0xec, 0x33, 0x66,
	0xd9, 0xd6, 0x37, 0x82, 0xaf, 0xd4, 0xca, 0x3c, 0x06, 0x8d, 0x89, 0xa6, 0xc5, 0x43, 0xe2, 0xe3,
	0x16, 0x89, 0x61, 0x88, 0xa5, 0x1a, 0x6e, 0x16, 0xb6, 0xeb, 0xff, 0x5c, 0x81, 0x6a, 0x93, 0x50,
	0xb7, 0xe3, 0x73, 0x5e, 0x7f, 0x00, 0x23, 0xb6, 0xd5, 0xb6, 0x18, 0xd5, 0x2a, 0x57, 0x06, 0xaf,
	0xd5, 0xee, 0x5e, 0x8e, 0x18, 0x2c, 0x44, 0x5a, 0x58, 0x13, 0x18, 0x2b, 0x0e, 0xf3, 0x8f, 0x9b,
	0x0a, 0x1d, 0x3d, 0x85, 0x31, 0x9f, 0xfc, 0xb8, 0x43, 0x28, 0xa3, 0xda, 0x80, 0x20, 0xbd, 0x9a,
	0x47, 0xda, 0x54, 0x38, 0x92, 0x38, 0x24, 0x99, 0x7b, 0x04, 0xb5, 0x58, 0xaf, 0x9c, 0x69, 0x0e,
	0xc8, 0xb1, 0x18, 0x7b, 0xb5, 0xc9, 0x7f, 0x72, 0x56, 0x10, 0xd2, 0x5b, 0x31, 0x92, 0x7c, 0x78,
	0x3c, 0xf0, 0xb0, 0x32, 0xf7, 0x1e, 0xd4, 0x13, 0xbd, 0x9e, 0x84, 0x58, 0xff, 0xcb, 0x11, 0xa8,
	0x2f, 0xb9, 0x3e, 0x59, 0xde, 0xd8, 0x3e, 0x15, 0x97, 0xeb, 0x30, 0x6e, 0xc8, 0x6e, 0x56, 0x05,
	0xc3, 0xca, 0x17, 0x25, 0x60, 0x42, 0x7e, 0xc9, 0xe7, 0x1d, 0xc5, 0xfe, 0x5c, 0x7e, 0x85, 0x10,
	0xb4, 0x00, 0x48, 0x3d, 0x6d, 0xd9, 0x9d, 0x96, 0xe5, 0xac, 0xc6, 0x58, 0x3f, 0xa7, 0x05, 0x7d,
	0x00, 0xe3, 0x8e, 0x6b, 0x92, 0x6d, 0x62, 0x13, 0x83, 0xb9, 0xbe, 0xd8, 0x0a, 0x25, 0x52, 0x29,
	0x41, 0xc0, 0xb7, 0x8a, 0x4f, 0x3c, 0xdb, 0x32, 0xf0, 0x92, 0xdb, 0x71, 0x98, 0xd8, 0x2a, 0x75,
	0x89, 0x17, 0x87, 0xe7, 0x08, 0xc0, 0xd1, 0x93, 0x0b, 0xc0, 0x77, 0xa1, 0xea, 0x07, 0x6c, 0x20,
	0xf6, 0x51, 0xed, 0xee, 0x74, 0x0e, 0x87, 0x08, 0xda, 0x08, 0x13, 0x2d, 0xc3, 0xa4, 0xef, 0xda,
	0xb6, 0xe5, 0xb4, 0xd6, 0xf1, 0xd1, 0x76, 0xc7, 0x6f, 0xc9, 0x4d, 0x55, 0x28, 0x38, 0x04, 0x7d,
	0x9a, 0x04, 0x6d, 0xc1, 0x4c, 0x04, 0xfa, 0xcc, 0xc1, 0x87, 0xd8, 0xb2, 0xf9, 0xc2, 0x29, 0x49,
	0xde, 0xad, 0xaf, 0x7c, 0x42, 0xf4, 0x02, 0xe6, 0xc5, 0x07, 0x32, 0x6b, 0x71, 0x6f, 0x8f, 0xef,
	0xd7, 0x63, 0xb1, 0xb7, 0xc3, 0xc5, 0xa8, 0x89, 0x3d, 0xd0, 0x75, 0x86, 0xba, 0x76, 0x80, 0x5a,
	0x70, 0x25, 0xd5, 0xbe, 0x43, 0xfc, 0x76, 0xf2, 0x25, 0xe3, 0xe5, 0x2f, 0x29, 0xed, 0x04, 0x3d,
	0x85, 0x1a, 0x73, 0x6d, 0xe2, 0xab, 0xa5, 0xad, 0x97, 0xf7, 0x19, 0xc7, 0xd7, 0xbf, 0x84, 0x2b,
	0xcb, 0x64, 0x0f, 0x77, 0x6c, 0xb6, 0xe5, 0x9a, 0xcb, 0x16, 0xf5, 0x3b, 0x1e, 0x6f, 0x78, 0xd6,
	0x31, 0x5b, 0x84, 0x9d, 0x66, 0x4f, 0xe9, 0x5f, 0xc0, 0xac, 0xea, 0x39, 0xe4, 0x0e, 0xd5, 0x5f,
	0x5c, 0xd8, 0xc8, 0x0e, 0xf3, 0x84, 0x4d, 0x20, 0x15, 0x94, 0x42, 0x0c, 0x49, 0xf4, 0xbf, 0xae,
	0xc1, 0xf4, 0x4a, 0xcb, 0x27, 0x94, 0x7e, 0x84, 0x19, 0x79, 0x89, 0x8f, 0x55, 0xb7, 0xcf, 0xa1,
	0x81, 0x3b, 0xcc, 0xa5, 0x06, 0xb6, 0xc9, 0x4a, 0xcf, 0xe3, 0xcd, 0xd0, 0x70, 0x61, 0x10, 0xc2,
	0xd6, 0xf1, 0x91, 0xb2, 0xd8, 0x12, 0xb0, 0x24, 0x8e, 0xe5, 0x28, 0xeb, 0x2d, 0x01, 0x43, 0x6f,
	0xc2, 0x84, 0xe1, 0x3a, 0x0e, 0x31, 0xd8, 0x8e, 0xd5, 0x26, 0x6e, 0x87, 0x29, 0x61, 0x90, 0x82,
	0xa2, 0xc7, 0x30, 0x68, 0x78, 0x1d, 0xb5, 0xff, 0x5f, 0x8f, 0x99, 0x04, 0x85, 0x1a, 0x43, 0x2c,
	0x23, 0x27, 0x42, 0x1f, 0x40, 0xdd, 0xf4, 0xb1, 0xe5, 0x2c, 0x2b, 0x63, 0x57, 0x08, 0x01, 0x6e,
	0x58, 0xa4, 0x3f, 0x38, 0x40, 0x68, 0x26, 0xf1, 0xe3, 0x6b, 0x3b, 0xda, 0xbb, 0xbc, 0xfc, 0x1e,
	0x0c, 0x12, 0xe7, 0x50, 0xc9, 0x81, 0x22, 0x66, 0x6b, 0x72, 0x1c, 0xf4, 0x2e, 0x8c, 0x08, 0xed,
	0x4e, 0xd5, 0xc6, 0x7f, 0x35, 0xfa, 0x40, 0xb5, 0x7c, 0x82, 0x9f, 0x83, 0x65, 0x56, 0xc8, 0x08,
	0xc1, 0x90, 0xc3, 0x55, 0xea, 0x05, 0x31, 0x65, 0xe2, 0x77, 0x46, 0x62, 0xc2, 0x49, 0x25, 0x66,
	0x56, 0x12, 0xd6, 0x4e, 0x2e, 0x09, 0xcb, 0x44, 0xc7, 0xf8, 0x77, 0x21, 0x3a, 0xea, 0x67, 0x21,
	0x3a, 0x6e, 0xc0, 0xb0, 0xe7, 0xfa, 0x8c, 0x6a, 0x13, 0xa2, 0xb7, 0x99, 0x68, 0x65, 0xb6, 0x38,
	0x58, 0xad, 0x88, 0xc4, 0x49, 0x2a, 0x80, 0xc9, 0x9e, 0x15, 0xc0, 0x13, 0xa8, 0x53, 0x62, 0xf8,
	0x84, 0x7d, 0xee, 0xda, 0x9d, 0x36, 0xa1, 0x5a, 0x43, 0xbc, 0x6b, 0x36, 0x22, 0xdd, 0x8e, 0x35,
	0x37, 0x93, 0xc8, 0xe8, 0x23, 0x40, 0x94, 0xf8, 0x87, 0x96, 0x41, 0xe2, 0x8b, 0x36, 0xd5, 0x9d,
	0xed, 0x72, 0x48, 0x38, 0x3b, 0x71, 0xb7, 0x51, 0x43, 0x92, 0x9d, 0xf8, 0x6f, 0x74, 0x03, 0x86,
	0xbe, 0x39, 0xf4, 0x1c, 0x6d, 0x5a, 0x75, 0x17, 0x8e, 0xe8, 0x2b, 0xe2, 0xbb, 0x9f, 0x6f, 0x6d,
	0xa8, 0xef, 0x17, 0x48, 0x69, 0x31, 0x7b, 0xee, 0x64, 0x62, 0x36, 0x4f, 0x0f, 0xce, 0x9c, 0xa1,
	0x1e, 0x9c, 0xed, 0x57, 0x0f, 0x3e, 0x85, 0xba, 0x21, 0x3e, 0x33, 0x58, 0x9e, 0xf3, 0x5d, 0x3f,
	0xac, 0x99, 0xc4, 0x46, 0x9f, 0xc2, 0x39, 0x6c, 0x9a, 0x16, 0xff, 0x46, 0x6c, 0x87, 0x26, 0x2f,
	0xd5, 0xb4, 0xee, 0xbd, 0xe4, 0x12, 0xe9, 0xff, 0x58, 0x01, 0xb4, 0xe2, 0x1c, 0xba, 0xc7, 0xeb,
	0x84, 0xf9, 0x96, 0x41, 0x4f, 0x65, 0xd1, 0x21, 0x18, 0xda, 0x77, 0x29, 0x53, 0x96, 0x9c, 0xf8,
	0xcd, 0x61, 0x9c, 0x97, 0x85, 0xb0, 0x1e, 0x6e, 0x8a, 0xdf, 0xe8, 0x11, 0xd4, 0x98, 0x4d, 0xb7,
	0x09, 0x63, 0x96, 0xd3, 0xa2, 0x42, 0x42, 0x77, 0x19, 0x78, 0x1c, 0x17, 0xbd, 0x07, 0xe3, 0xcc,
	0xf0, 0x3e, 0x25, 0xc4, 0xc3, 0xb6, 0x75, 0x48, 0x4a, 0x0c, 0xb8, 0x66, 0x02, 0x59, 0x7f, 0x0a,
	0xd3, 0x39, 0xe2, 0x8f, 0x1b, 0xbf, 0xd8, 0xf3, 0x02, 0xe3, 0x17, 0x7b, 0x9e, 0x70, 0xa2, 0x28,
	0xb3, 0xdc, 0xc0, 0xf8, 0x15, 0x0f, 0xfa, 0x3f, 0x54, 0x60, 0x42, 0xd1, 0x07, 0xa4, 0x1b, 0x30,
	0x2d, 0xda, 0x5e, 0x10, 0xa1, 0x1b, 0x5b, 0xb2, 0x55, 0xcd, 0x59, 0x4c, 0xea, 0xe6, 0xa8, 0xce,
	0x26, 0x12, 0x94, 0x2b, 0x71, 0xc2, 0xf8, 0xbc, 0x0f, 0xf4, 0x3e, 0xef, 0xdf, 0x87, 0x73, 0x72,
	0x14, 0x96, 0x93, 0x18, 0x86, 0x9c, 0xd8, 0x4b, 0xd1, 0x30, 0x56, 0x9d, 0x9c, 0x71, 0xc8, 0x2f,
	0x58, 0x4d, 0x90, 0xea, 0x7f, 0x3e, 0x07, 0xe3, 0x1f, 0xd9, 0xee, 0xae, 0x60, 0x16, 0xfe, 0xa5,
	0xd7, 0x60, 0x08, 0xfb, 0xc6, 0xbe, 0xfa, 0xb4, 0x73, 0x51, 0x9f, 0x51, 0x1c, 0xa6, 0x29, 0x30,
	0xf8, 0x12, 0x19, 0xc4, 0x67, 0xd6, 0x9e, 0x65, 0x60, 0x46, 0xa8, 0x76, 0xad, 0x3b, 0x5f, 0x26,
	0x90, 0x45, 0x40, 0x42, 0x74, 0x16, 0x06, 0x13, 0xd4, 0x1a, 0xa4, 0xc1, 0xdc, 0x7d, 0x94, 0xa0,
	0xa6, 0xeb, 0xb2, 0x08, 0xfb, 0xae, 0x74, 0x1f, 0x73, 0x9a, 0xb8, 0xad, 0xa2, 0x76, 0x12, 0xb6,
	0x2d, 0x53, 0xaa, 0xee, 0xc1, 0x72, 0x5b, 0x25, 0x4d, 0x83, 0xfe, 0x33, 0x5c, 0x34, 0x5c, 0x87,
	0xf9, 0xae, 0xbd, 0x65, 0x63, 0x87, 0x6c, 0x13, 0xa3, 0xe3, 0x5b, 0xec, 0x38, 0x30, 0x7f, 0x86,
	0x4a, 0xbb, 0xec, 0x46, 0x8e, 0x3e, 0x86, 0xcb, 0xa6, 0x34, 0xe1, 0xe4, 0xac, 0x7e, 0x6e, 0x51,
	0x6b, 0xd7, 0xb2, 0x2d, 0x76, 0x1c, 0x6e, 0x98, 0x7b, 0x22, 0xec, 0x52, 0x86, 0x86, 0xd6, 0x61,
	0x5a, 0xa1, 0x6c, 0xc4, 0x35, 0xf8, 0x48, 0xb9, 0xfa, 0xcd, 0xa3, 0x43, 0x0e, 0xcc, 0x99, 0x85,
	0x56, 0xab, 0x32, 0x64, 0xae, 0x47, 0x7c, 0x51, 0x66, 0xe1, 0x8a, 0x17, 0x75, 0xe9, 0x11, 0xad,
	0xc1, 0xb4, 0x69, 0x51, 0x3e, 0x29, 0x32, 0xd4, 0xb5, 0xb4, 0x4f, 0x8c, 0x83, 0xc0, 0x0f, 0xea,
	0x36, 0xbd, 0x79, 0x64, 0x68, 0x0b, 0x1a, 0x66, 0xca, 0x32, 0x56, 0xc6, 0xd1, 0x95, 0xcc, 0x98,
	0x53, 0xb6, 0xb3, 0x18, 0x69, 0x86, 0x1a, 0x7d, 0x0a, 0x48, 0xc1, 0x76, 0x62, 0x4a, 0xea, 0x41,
	0xb9, 0x92, 0xca, 0x21, 0x43, 0xcf, 0x60, 0x42, 0xee, 0xe6, 0x8f, 0x89, 0xdd, 0xde, 0x21, 0x94,
	0x29, 0x43, 0xab, 0xdb, 0x77, 0xa6, 0x28, 0xd0, 0x87, 0x50, 0x97, 0x90, 0x1d, 0x1f, 0x1b, 0x96,
	0xd3, 0x52, 0x86, 0x56, 0xb7, 0x2e, 0x92, 0x04, 0x41, 0xe0, 0x69, 0x3c, 0x1e, 0x78, 0x9a, 0x14,
	0x11, 0xa4, 0xad, 0x28, 0x06, 0x59, 0x97, 0xfb, 0x31, 0x05, 0x46, 0xd7, 0xa1, 0x11, 0x82, 0xa4,
	0x79, 0x41, 0xb5, 0x37, 0x04, 0xa3, 0x66, 0xe0, 0xdc, 0x4a, 0x17, 0x42, 0x27, 0xda, 0xb6, 0x13,
	0xd2, 0x4a, 0x4f, 0x42, 0xd1, 0x0a, 0x4c, 0xd9, 0xae, 0x81, 0x39, 0x57, 0xaf, 0xed, 0x2a, 0xbe,
	0x56, 0x76, 0x50, 0xa1, 0x3c, 0xc9, 0x52, 0xa0, 0x87, 0x50, 0xb5, 0xdd, 0xd6, 0x22, 0xfd, 0x84,
	0xba, 0x8e, 0xf6, 0x7a, 0xe9, 0xa4, 0x44, 0xc8, 0xe8, 0x01, 0x8c, 0xda, 0x6e, 0xab, 0xc5, 0x5f,
	0x3b, 0x95, 0xb1, 0xa4, 0x85, 0x78, 0x5c, 0x93, 0xcd, 0x4a, 0x02, 0x06, 0xd8, 0x68, 0x09, 0xea,
	0x6d, 0x42, 0xf7, 0x57, 0x8e, 0x3c, 0xec, 0x50, 0x2e, 0x68, 0x50, 0x9a, 0x7c, 0x3d, 0xde, 0xac,
	0xc8, 0x93, 0x34, 0x68, 0x16, 0x46, 0x38, 0x60, 0x75, 0x59, 0x7b, 0x57, 0x4c, 0x8f, 0x7a, 0xe2,
	0x12, 0x96, 0xff, 0xda, 0x20, 0xec, 0xa5, 0xeb, 0x1f, 0xd0, 0xd0, 0x98, 0x2a, 0x92, 0xb0, 0x71,
	0x64, 0x3e, 0xf7, 0x6d, 0xd7, 0xb1, 0x98, 0xeb, 0x5b, 0x4e, 0x8b, 0xdb, 0x9c, 0xda, 0x39, 0xe1,
	0x47, 0xa5, 0xa0, 0x5c, 0xe0, 0xb7, 0x99, 0x4d, 0x95, 0xc9, 0x14, 0x13, 0xf8, 0xeb, 0x3b, 0x6b,
	0xdb, 0x81, 0xc0, 0xe7, 0x18, 0xe8, 0x43, 0x18, 0x6f, 0x77, 0x6c, 0x66, 0xa9, 0x88, 0xac, 0x32,
	0x8c, 0xe6, 0x63, 0x14, 0xb1, 0x56, 0x45, 0x99, 0xa0, 0x40, 0x1a, 0x8c, 0x3a, 0x72, 0x7c, 0xda,
	0x5b, 0xe2, 0x4b, 0x83, 0x47, 0x74, 0x1f, 0x66, 0x3d, 0xd7, 0x5c, 0xde, 0xd8, 0xde, 0x26, 0x5c,
	0xb9, 0xc4, 0x62, 0xcf, 0x37, 0x04, 0x6f, 0x15, 0xb4, 0xa2, 0x1f, 0xc1, 0xbc, 0xdb, 0xb6, 0xd8,
	0xb6, 0x65, 0x12, 0x03, 0xfb, 0xab, 0xce, 0xd7, 0x42, 0x86, 0xc9, 0x97, 0xaf, 0x63, 0x4f, 0x7b,
	0xb3, 0x94, 0x0b, 0xba, 0xd2, 0xa3, 0xf7, 0x61, 0xdc, 0x75, 0xa2, 0x88, 0xb7, 0x76, 0xbe, 0xb4,
	0xbf, 0x04, 0x3e, 0x6a, 0xc2, 0xac, 0xeb, 0xf1, 0xdd, 0xef, 0xfa, 0xeb, 0xd8, 0xc1, 0x2d, 0xf2,
	0x05, 0xd9, 0xdd, 0x77, 0xdd, 0x03, 0xaa, 0x7d, 0xaf, 0xb4, 0xa7, 0x02, 0x4a, 0xf4, 0x9f, 0x60,
	0xc6, 0xed, 0xb0, 0x5d, 0xb7, 0xe3, 0x98, 0x3b, 0x3e, 0xde, 0xdb, 0xb3, 0x0c, 0xb5, 0x63, 0x35,
	0xd1, 0xe5, 0x1b, 0xd1, 0x82, 0x6c, 0xe6, 0xa1, 0xa9, 0x95, 0xc9, 0xef, 0x83, 0x4b, 0x63, 0x2f,
	0x92, 0xa7, 0xcf, 0xb1, 0x65, 0x6f, 0x7a, 0xc4, 0x11, 0xae, 0x62, 0x89, 0x34, 0xce, 0x21, 0xe3,
	0x62, 0x45, 0x82, 0xa3, 0x19, 0x9c, 0x93, 0x62, 0x25, 0x05, 0x46, 0xb7, 0x61, 0xca, 0xf3, 0x2d,
	0x97, 0x6b, 0xc8, 0x25, 0x1b, 0x53, 0x2a, 0x62, 0xbe, 0x17, 0xc3, 0x00, 0x75, 0xb6, 0x91, 0x1b,
	0x06, 0x9e, 0xef, 0xb6, 0x09, 0xdb, 0x27, 0x1d, 0x1a, 0xf5, 0xff, 0x8e, 0x34, 0x0c, 0x72, 0x9a,
	0x84, 0x4f, 0xe6, 0xbb, 0x47, 0xc7, 0xda, 0xbc, 0xf8, 0x9a, 0xb8, 0x4f, 0xc6, 0xc1, 0xa1, 0x4f,
	0xc6, 0x1f, 0xd0, 0x03, 0xa8, 0x8a, 0x1f, 0xab, 0x8e, 0xc5, 0xb4, 0x57, 0xd3, 0x29, 0x85, 0xad,
	0xa0, 0x49, 0x11, 0x45, 0xb8, 0xe8, 0x0d, 0x18, 0xa4, 0x26, 0xd5, 0x2e, 0xa5, 0xdd, 0xb8, 0xed,
	0xe5, 0x60, 0x3b, 0xf1, 0xf6, 0x20, 0xd4, 0x7f, 0xb9, 0x3c, 0xd4, 0xbf, 0x00, 0x88, 0x11, 0x9b,
	0xb4, 0x09, 0xf3, 0x63, 0xf3, 0x78, 0x45, 0x06, 0x3f, 0xb3, 0x2d, 0x68, 0x01, 0x46, 0x98, 0x8f,
	0x0d, 0xe2, 0x6b, 0x57, 0x55, 0xe7, 0xe1, 0x18, 0x76, 0x04, 0x3c, 0x08, 0x07, 0x48, 0x2c, 0x74,
	0x05, 0x6a, 0xcc, 0xef, 0x50, 0xb6, 0xec, 0xb6, 0xb1, 0xe5, 0x68, 0xba, 0xe8, 0x38, 0x0e, 0x12,
	0x23, 0x88, 0x1e, 0x17, 0x6d, 0x0b, 0x53, 0x42, 0xb5, 0xeb, 0x62, 0x67, 0xe6, 0xb4, 0xa0, 0xbb,
	0x30, 0xd2, 0xa1, 0x64, 0x7d, 0x69, 0x4b, 0x7b, 0xad, 0x94, 0x6f, 0x14, 0x26, 0x7a, 0x02, 0x35,
	0xa1, 0x15, 0x9a, 0xa4, 0xed, 0x32, 0xa2, 0xdd, 0x2c, 0x25, 0x8c, 0xa3, 0xa3, 0xcf, 0x41, 0x93,
	0x29, 0x0c, 0xf9, 0xbc, 0x7d, 0x68, 0xac, 0x38, 0xa6, 0xe7, 0x5a, 0x0e, 0xa3, 0xda, 0xdb, 0xa5,
	0x5d, 0x15, 0xd2, 0x72, 0xf9, 0xe2, 0x0b, 0xe8, 0x96, 0x65, 0xbb, 0x6c, 0x49, 0xa0, 0xc5, 0x10,
	0xb4, 0x85, 0x72, 0xf9, 0xd2, 0x8d, 0x9e, 0x33, 0xb1, 0x6a, 0x17, 0xfb, 0x61, 0xd1, 0x34, 0xb9,
	0x75, 0xae, 0xdd, 0x92, 0x4c, 0x9c, 0xd3, 0xc4, 0xd7, 0x22, 0xd6, 0x63, 0x40, 0x70, 0x5b, 0x72,
	0x43, 0xb6, 0x85, 0x4b, 0x56, 0x09, 0xdd, 0x09, 0x38, 0x25, 0xa0, 0xb9, 0x23, 0x68, 0x0a, 0x5a,
	0x39, 0x17, 0x89, 0x09, 0x36, 0xb5, 0xfb, 0x69, 0x2e, 0x5a, 0x15, 0xf0, 0x80, 0x8b, 0x24, 0x16,
	0xba, 0x09, 0x53, 0x9e, 0xf8, 0x46, 0xe2, 0xb3, 0x2d, 0xdf, 0x3d, 0xb4, 0x4c, 0xe2, 0x6b, 0x0f,
	0x65, 0xd2, 0x26, 0xd3, 0x80, 0xe6, 0xa1, 0xfa, 0xf5, 0x4b, 0xa6, 0xe4, 0xd6, 0x23, 0x99, 0xce,
	0x0c, 0x01, 0x62, 0x0b, 0x31, 0xaa, 0x3d, 0xce, 0x6c, 0xa1, 0x9d, 0x68, 0x0b, 0x31, 0x8a, 0xe6,
	0x60, 0xcc, 0x27, 0x87, 0x96, 0xd0, 0xbb, 0xef, 0xc9, 0x74, 0x60, 0xf0, 0xcc, 0x0d, 0xad, 0xb6,
	0xdb, 0x71, 0xd8, 0x3a, 0xb3, 0x29, 0x7f, 0x33, 0xd5, 0x9e, 0x94, 0x1b, 0x5a, 0x49, 0x0a, 0x91,
	0x73, 0xc5, 0xc1, 0x6c, 0x3d, 0x55, 0x39, 0xd7, 0x00, 0xa0, 0xbf, 0x0d, 0xd5, 0x70, 0x3c, 0x7c,
	0x0f, 0xa9, 0xc8, 0x88, 0x50, 0xb5, 0x32, 0x41, 0x1d, 0x07, 0xe9, 0xff, 0xbb, 0x02, 0xe3, 0xf1,
	0x89, 0x43, 0x0f, 0x4f, 0xe0, 0x7b, 0x0b, 0x19, 0x18, 0xfa, 0x81, 0xa1, 0x11, 0xb9, 0xe8, 0x60,
	0xfb, 0x98, 0x5a, 0xb4, 0x07, 0x27, 0x32, 0x45, 0xa1, 0xdf, 0x80, 0xe9, 0x1c, 0xc3, 0x86, 0x7b,
	0xc4, 0xb6, 0x48, 0xaf, 0x4a, 0x2f, 0x59, 0x3e, 0xe8, 0x3f, 0x9b, 0x86, 0x73, 0x79, 0x3e, 0xe5,
	0x7f, 0xc8, 0xb0, 0xf0, 0x87, 0x50, 0x37, 0x3a, 0x94, 0xb9, 0xed, 0x6d, 0xb9, 0xba, 0xca, 0xd1,
	0xea, 0x6a, 0x7e, 0x27, 0x08, 0xf8, 0x24, 0x9b, 0x64, 0xb7, 0xd3, 0x52, 0x89, 0x7a, 0xf9, 0xc0,
	0xad, 0x40, 0x53, 0x4a, 0x60, 0x99, 0x4a, 0x55, 0x4f, 0xd9, 0x30, 0x74, 0xb5, 0xff, 0x30, 0x34,
	0x9c, 0x38, 0x0c, 0x5d, 0xeb, 0x21, 0x0c, 0x7d, 0x05, 0x6a, 0xe4, 0x88, 0x11, 0xdf, 0xc1, 0xf6,
	0xea, 0x16, 0x15, 0x41, 0xda, 0x6a, 0x33, 0x0e, 0x42, 0x8f, 0x01, 0x0e, 0x1e, 0x52, 0xc5, 0x42,
	0x2a, 0x41, 0xdf, 0x6d, 0x14, 0x31, 0x6c, 0xb4, 0x0c, 0x93, 0xd1, 0xd3, 0xc7, 0x8c, 0x79, 0xb4,
	0x87, 0x6c, 0x7d, 0x9a, 0x24, 0x16, 0x2a, 0x9f, 0x3c, 0x49, 0xa8, 0xfc, 0x4d, 0x98, 0xb0, 0x5d,
	0x6c, 0x3e, 0xc3, 0x36, 0x76, 0x0c, 0xe2, 0xaf, 0x6e, 0x69, 0x0d, 0xc9, 0x50, 0x49, 0x28, 0x7a,
	0x0c, 0x5a, 0x1c, 0xb2, 0x2d, 0x7c, 0xc7, 0x26, 0x76, 0x5a, 0x84, 0x6a, 0x53, 0x62, 0x3e, 0x0a,
	0xdb, 0xd1, 0x0a, 0xa0, 0x84, 0x3f, 0x20, 0x02, 0xc4, 0x1a, 0xea, 0x16, 0x37, 0xce, 0x21, 0x08,
	0xa3, 0xfa, 0x37, 0xbb, 0x44, 0xf5, 0xa7, 0x4f, 0x1f, 0xd5, 0x3f, 0x77, 0xf6, 0x51, 0xfd, 0x99,
	0xef, 0x22, 0xaa, 0x3f, 0x7b, 0xa6, 0x51, 0xfd, 0xf3, 0x3d, 0x44, 0xf5, 0xd3, 0x39, 0x64, 0xad,
	0x20, 0x87, 0xfc, 0x28, 0x1e, 0xfd, 0xbf, 0x50, 0x3e, 0xbd, 0xb1, 0x0c, 0xc0, 0x3b, 0xd2, 0xd6,
	0x9c, 0x4b, 0x27, 0xfa, 0x92, 0xc2, 0x7a, 0xdb, 0xa4, 0x71, 0xcb, 0x33, 0x93, 0x36, 0xb8, 0x78,
	0xfa, 0xb4, 0xc1, 0x7c, 0xff, 0x69, 0x83, 0x57, 0x63, 0x69, 0x83, 0xfb, 0x2a, 0x6d, 0x20, 0x8d,
	0x67, 0xbd, 0xe8, 0x83, 0xbe, 0x3a, 0xf4, 0x9c, 0x44, 0x06, 0x21, 0x27, 0x05, 0x70, 0xf9, 0x0c,
	0x53, 0x00, 0x57, 0xfa, 0x4d, 0x01, 0x5c, 0x87, 0x06, 0xf6, 0xc4, 0x52, 0xb3, 0x70, 0x63, 0x5f,
	0x15, 0xdf, 0x9b, 0x81, 0xa3, 0x7b, 0x30, 0x13, 0x88, 0xcc, 0xa4, 0x5b, 0x27, 0x0d, 0xf2, 0xfc,
	0xc6, 0x74, 0xee, 0xe4, 0xb5, 0x13, 0xe6, 0x4e, 0xde, 0x83, 0x71, 0x15, 0x4c, 0x96, 0x83, 0x7b,
	0xbd, 0x24, 0x88, 0x1b, 0x47, 0x2e, 0xcc, 0x50, 0xbc, 0xd1, 0x47, 0x86, 0x22, 0x9b, 0x2d, 0x79,
	0xf3, 0x44, 0xd9, 0x92, 0xf7, 0x53, 0xd1, 0xe8, 0xb7, 0xca, 0x1d, 0xf5, 0x44, 0x40, 0xfa, 0x26,
	0x0c, 0x32, 0x9b, 0x6a, 0xd7, 0x4a, 0xc9, 0x38, 0x1a, 0xfa, 0x3e, 0x68, 0xa1, 0xe3, 0xf5, 0x02,
	0x9b, 0xa6, 0xeb, 0xbc, 0x50, 0x11, 0xf5, 0xc0, 0xb1, 0x2f, 0x1c, 0xf7, 0x2c, 0x8b, 0x59, 0xda,
	0xae, 0x13, 0x24, 0x1a, 0xd0, 0xdb, 0x30, 0xbc, 0xef, 0x72, 0xab, 0xf7, 0x7a, 0xf7, 0xef, 0x96,
	0x58, 0xe8, 0x2e, 0xcc, 0x44, 0x23, 0x90, 0x96, 0xc2, 0x0b, 0x21, 0xfe, 0x6f, 0x48, 0xd7, 0x21,
	0x6c, 0x94, 0x9e, 0x99, 0x38, 0x29, 0xf5, 0x3b, 0x15, 0x38, 0x5f, 0x20, 0x19, 0xfa, 0xcc, 0x04,
	0x85, 0xa7, 0xd0, 0x06, 0xe2, 0xa7, 0xd0, 0x12, 0xe9, 0xcc, 0xc1, 0x5e, 0xd3, 0x99, 0xfa, 0x3e,
	0x68, 0x45, 0xdb, 0xbc, 0xcf, 0xe1, 0xcd, 0xc2, 0x08, 0xed, 0xec, 0xed, 0x59, 0x47, 0x6a, 0x7c,
	0xea, 0x49, 0xff, 0x02, 0x2e, 0x7f, 0xda, 0xd9, 0x25, 0xbe, 0x43, 0x18, 0xa1, 0x2b, 0xce, 0xe1,
	0xba, 0x75, 0x44, 0xfc, 0x45, 0x13, 0x7b, 0x61, 0xe0, 0xaa, 0xcf, 0x73, 0x19, 0x26, 0xa0, 0x35,
	0x17, 0x9b, 0xdb, 0xfb, 0xc4, 0x34, 0x23, 0xa3, 0xfa, 0x3a, 0x34, 0x6c, 0xcc, 0x88, 0x63, 0x1c,
	0xef, 0xec, 0xfb, 0x84, 0xee, 0xbb, 0xb6, 0xa9, 0xec, 0xeb, 0x0c, 0x1c, 0xe9, 0x30, 0xd4, 0x76,
	0x4d, 0x39, 0xa1, 0x13, 0x77, 0x27, 0xa2, 0x69, 0xe3, 0xd0, 0xa6, 0x68, 0xd3, 0x7d, 0x80, 0x28,
	0x38, 0xd7, 0xe7, 0xd4, 0x2c, 0xc0, 0x10, 0xb7, 0x9c, 0x7b, 0xf0, 0x1c, 0x04, 0x9e, 0xfe, 0xdf,
	0x60, 0x3a, 0x27, 0x92, 0xd9, 0xe7, 0xcb, 0x65, 0x7c, 0x60, 0x75, 0xed, 0x59, 0x0f, 0xaf, 0x57,
	0x98, 0xfa, 0xbf, 0x0e, 0xc0, 0xbc, 0x58, 0xa7, 0x98, 0xa7, 0x2a, 0x16, 0x2c, 0xe0, 0xe0, 0x4d,
	0xa8, 0x1f, 0x84, 0x8b, 0xca, 0x4d, 0x57, 0x39, 0xa0, 0xef, 0x45, 0x53, 0x58, 0xb2, 0xe6, 0xcd,
	0x24, 0x3d, 0x7a, 0x0e, 0x10, 0x45, 0x91, 0xd4, 0x48, 0xdf, 0x4c, 0x84, 0x80, 0x54, 0x5b, 0x4e,
	0x57, 0x31, 0x4a, 0xf4, 0x00, 0x86, 0x29, 0x33, 0x2d, 0x57, 0x6d, 0x85, 0x98, 0x9a, 0xde, 0xe6,
	0xe0, 0x1c, 0x6a, 0x89, 0x8f, 0x56, 0xa1, 0x46, 0x19, 0x36, 0x0e, 0x4c, 0xdf, 0x3a, 0x24, 0xbe,
	0x4a, 0x38, 0xbd, 0x15, 0x27, 0x0f, 0x1b, 0x73, 0x3a, 0x89, 0xd3, 0x72, 0x97, 0xb1, 0x43, 0x49,
	0x80, 0xd0, 0x5c, 0xa6, 0xca, 0xf7, 0xe9, 0xea, 0x32, 0x26, 0x29, 0xf4, 0x7f, 0x19, 0x80, 0x0b,
	0xe2, 0x3d, 0x41, 0x40, 0xe2, 0x37, 0xd3, 0xff, 0x5d, 0x4e, 0xff, 0xcf, 0x2a, 0x50, 0x13, 0xef,
	0x51, 0x13, 0xfe, 0x0e, 0x8c, 0xc8, 0x20, 0xaa, 0x9a, 0xe9, 0x8b, 0xb1, 0x40, 0x7c, 0xb4, 0x4a,
	0x81, 0x3f, 0x23, 0x51, 0xd1, 0x13, 0xa8, 0x86, 0x9a, 0x41, 0xcd, 0xe9, 0xa5, 0x14, 0x5d, 0xb8,
	0xbf, 0x82, 0xd0, 0x66, 0x48, 0x80, 0x9e, 0xc1, 0x18, 0x56, 0xab, 0xae, 0x66, 0xf3, 0xcd, 0x22,
	0xe2, 0x24, 0x77, 0x34, 0x43, 0x3a, 0xfd, 0x8f, 0xab, 0x30, 0x95, 0x19, 0xdf, 0xaf, 0x5d, 0x20,
	0x41, 0x05, 0x08, 0x86, 0xfa, 0x09, 0x10, 0xc4, 0x64, 0xe2, 0x70, 0x1f, 0xaa, 0x74, 0x24, 0xae,
	0x4a, 0xcf, 0xe4, 0x7c, 0x69, 0xda, 0x11, 0x19, 0x2b, 0x70, 0x44, 0x3e, 0x88, 0x2d, 0xaf, 0x0c,
	0x32, 0xbc, 0x96, 0xcb, 0x53, 0x45, 0x6b, 0x8b, 0x9a, 0x30, 0x4b, 0x09, 0xe5, 0xea, 0x21, 0x70,
	0xa1, 0x56, 0x7a, 0x0e, 0x3c, 0x14, 0x50, 0x26, 0x8d, 0x89, 0xda, 0x69, 0x0e, 0xc7, 0x8e, 0x9f,
	0xa1, 0x47, 0x50, 0xff, 0xb6, 0x0e, 0xc7, 0x4e, 0x7c, 0x17, 0xbe, 0xf0, 0xe4, 0x59, 0xf8, 0xc2,
	0xe9, 0xd8, 0x42, 0xe3, 0xa4, 0xb1, 0x05, 0x15, 0x61, 0x9a, 0xea, 0x21, 0xc2, 0x94, 0xf2, 0x72,
	0xd0, 0x09, 0xbd, 0x1c, 0x95, 0xef, 0x9e, 0xce, 0x5c, 0xb4, 0x38, 0x57, 0x9a, 0x7d, 0xd1, 0x7f,
	0x0a, 0x70, 0x2e, 0x4f, 0x2e, 0xe6, 0x8a, 0xac, 0x81, 0x33, 0x10, 0x59, 0x83, 0x3d, 0x88, 0xac,
	0xa1, 0x62, 0x91, 0x35, 0x7c, 0x4a, 0x91, 0x35, 0x72, 0xe2, 0x10, 0xe1, 0x68, 0x0f, 0x0b, 0x18,
	0x4a, 0xb7, 0xb1, 0xb8, 0x74, 0xfb, 0x10, 0xc6, 0x6d, 0x17, 0x9b, 0x54, 0x99, 0xcb, 0x4a, 0xe8,
	0xc4, 0x32, 0xca, 0x59, 0x63, 0xba, 0x99, 0xa0, 0xf8, 0x35, 0x39, 0xb6, 0x9a, 0x16, 0xb0, 0xe3,
	0x05, 0x02, 0xf6, 0x66, 0x56, 0x28, 0x4d, 0x86, 0x29, 0xce, 0x8c, 0xf0, 0x79, 0x58, 0x24, 0x7c,
	0x1a, 0x21, 0x4d, 0x81, 0x90, 0x89, 0xf2, 0x6f, 0x53, 0x3d, 0xe7, 0xdf, 0x44, 0x5e, 0xc9, 0x73,
	0x7d, 0xf6, 0x0c, 0x33, 0x63, 0x7f, 0x1d, 0x1f, 0xed, 0x58, 0xed, 0xe0, 0x4c, 0x67, 0x4e, 0x0b,
	0xba, 0x07, 0x33, 0x49, 0xe8, 0x8a, 0xc3, 0x7c, 0x8b, 0xc8, 0x53, 0x0a, 0xf5, 0x66, 0x7e, 0x63,
	0x52, 0x9a, 0xd7, 0x7b, 0x96, 0xe6, 0xc5, 0x8a, 0x65, 0xa2, 0x6f, 0xc5, 0x52, 0x26, 0x89, 0xcf,
	0x7d, 0x17, 0x92, 0x78, 0xe6, 0x5b, 0xb8, 0xa6, 0x30, 0xdb, 0x9f, 0x74, 0x3c, 0x9f, 0x91, 0x8e,
	0x5a, 0xb9, 0x74, 0xb4, 0x01, 0x65, 0x4f, 0x7d, 0xf4, 0xe9, 0x15, 0x5e, 0x81, 0x9a, 0xba, 0x03,
	0x28, 0x92, 0xff, 0xd2, 0x65, 0x8f, 0x83, 0xf4, 0xff, 0x59, 0x81, 0x8b, 0x5d, 0xce, 0x34, 0xa0,
	0xf7, 0x13, 0xce, 0xf3, 0xf5, 0x9e, 0x0e, 0x42, 0x2c, 0xac, 0x47, 0x8e, 0xf5, 0x35, 0x18, 0xe2,
	0x4f, 0xa8, 0x0e, 0xd5, 0xc5, 0xb5, 0xb5, 0xcd, 0x2f, 0x5e, 0x2c, 0x6e, 0xfc, 0xa0, 0xf1, 0x0a,
	0x9a, 0x82, 0x7a, 0x73, 0xe5, 0xa3, 0xd5, 0xed, 0x9d, 0xe6, 0x0f, 0x5e, 0x6c, 0x6e, 0xac, 0xfd,
	0xa0, 0x51, 0xd1, 0xff, 0x66, 0x12, 0x6a, 0x32, 0xa5, 0x7b, 0x9a, 0x2f, 0xfe, 0x56, 0x54, 0x48,
	0x81, 0x45, 0x9b, 0x56, 0x33, 0x43, 0x39, 0x6a, 0x26, 0x2d, 0xc7, 0x86, 0x0b, 0xe4, 0x58, 0xbe,
	0xad, 0x7a, 0x0f, 0x46, 0xa9, 0x3c, 0x47, 0xd3, 0xcb, 0x75, 0x07, 0x85, 0x8a, 0x5e, 0x87, 0xba,
	0x38, 0x87, 0xb0, 0x8d, 0xdb, 0x1e, 0x17, 0x65, 0x42, 0x43, 0x54, 0x9a, 0x49, 0x60, 0x52, 0x6e,
	0x54, 0x7b, 0x96, 0x1b, 0x39, 0xc7, 0x4c, 0x21, 0xff, 0x98, 0xa9, 0xd2, 0x9e, 0xb5, 0xfe, 0x2e,
	0x8a, 0x24, 0x95, 0xd0, 0xf8, 0x49, 0x95, 0x90, 0x01, 0x97, 0x0f, 0x82, 0xd3, 0xcb, 0x5c, 0xfc,
	0x13, 0xff, 0x50, 0xec, 0x25, 0x87, 0x18, 0xfc, 0x7d, 0x8b, 0x2d, 0x12, 0x5e, 0x6a, 0x2d, 0x4c,
	0xfa, 0x95, 0xf5, 0x80, 0x96, 0xa0, 0x61, 0x12, 0xcf, 0x76, 0x8f, 0xdb, 0xc4, 0x61, 0x32, 0xd9,
	0xa5, 0xa4, 0x67, 0xa1, 0xea, 0xce, 0x10, 0x94, 0x0a, 0xcd, 0xc6, 0x77, 0x21, 0x34, 0xa7, 0xce,
	0x42, 0x68, 0x3e, 0x84, 0xaa, 0x11, 0x1e, 0x13, 0x43, 0xe5, 0x87, 0x05, 0x43, 0x64, 0x74, 0x1f,
	0x46, 0x55, 0x18, 0x5c, 0xe5, 0xd3, 0x62, 0x06, 0x8b, 0x90, 0x09, 0x2a, 0x8a, 0x19, 0x9c, 0x15,
	0x54, 0xc8, 0x31, 0xad, 0x7c, 0xae, 0x67, 0xad, 0xac, 0x4c, 0xac, 0x99, 0x1e, 0x4c, 0xac, 0x28,
	0x1e, 0x30, 0x9b, 0x8e, 0x07, 0x88, 0x51, 0xe5, 0xc6, 0x03, 0x72, 0xdc, 0x24, 0xed, 0x0c, 0xdd,
	0xa4, 0x0b, 0xfd, 0xdf, 0x9d, 0x48, 0xa8, 0xb4, 0xb9, 0x13, 0xaa, 0xb4, 0xa7, 0x50, 0xc7, 0x9e,
	0x17, 0x3b, 0x45, 0x78, 0xb1, 0x24, 0x99, 0x90, 0xc0, 0x46, 0xfb, 0x70, 0x55, 0x8a, 0xe8, 0x2d,
	0x8e, 0x67, 0xb8, 0xf6, 0xb6, 0x63, 0x71, 0x46, 0x6a, 0x3d, 0x77, 0xfd, 0x40, 0x95, 0xa8, 0x94,
	0x57, 0xb7, 0x45, 0x2c, 0xef, 0x04, 0xed, 0xc1, 0x95, 0x42, 0xa4, 0x55, 0x47, 0xbe, 0xe8, 0xd5,
	0xd2, 0x17, 0x95, 0xf6, 0x91, 0x63, 0xe6, 0x5e, 0x3a, 0xb9, 0x99, 0xfb, 0x01, 0x8c, 0xcb, 0x5d,
	0x20, 0xd3, 0xd7, 0x2a, 0xc5, 0x96, 0xe6, 0xb3, 0xa5, 0x18, 0x4a, 0x33, 0x41, 0x80, 0x1e, 0xc2,
	0xf9, 0xaf, 0x5f, 0x1e, 0x50, 0x2e, 0xae, 0xed, 0x43, 0xe2, 0xaf, 0x1c, 0x31, 0x1f, 0x37, 0x5d,
	0x97, 0x2d, 0x2d, 0xaa, 0xe3, 0x6c, 0x45, 0xcd, 0xe8, 0x0e, 0x8c, 0x7a, 0xe2, 0x7e, 0x2f, 0xd5,
	0xae, 0x76, 0x5f, 0xca, 0x00, 0x2f, 0x30, 0x6b, 0xf4, 0x8c, 0x59, 0xf3, 0x5a, 0xb9, 0x59, 0xf3,
	0x67, 0x15, 0x40, 0xd9, 0xad, 0x2c, 0xce, 0x33, 0x4b, 0x40, 0x70, 0xf6, 0xa3, 0xa2, 0xce, 0x33,
	0x27, 0xa0, 0xe8, 0x33, 0x98, 0xb1, 0x42, 0x42, 0xc6, 0x39, 0x9c, 0xf8, 0xeb, 0x91, 0x61, 0x12,
	0xbb, 0x39, 0x9e, 0x8b, 0xd6, 0xcc, 0xa7, 0xe6, 0x2a, 0x3c, 0x68, 0xb0, 0x31, 0xa5, 0xea, 0x9e,
	0x74, 0x02, 0xa6, 0xaf, 0xc2, 0x54, 0x66, 0xb7, 0xf7, 0x99, 0xcc, 0xf8, 0xbd, 0x0a, 0x4c, 0xa6,
	0x9d, 0xde, 0xfe, 0xec, 0x9c, 0x1b, 0x30, 0x70, 0x78, 0x47, 0x59, 0x36, 0x31, 0x76, 0x09, 0x3b,
	0xff, 0xfc, 0x8e, 0x12, 0x4b, 0x03, 0x87, 0x77, 0x04, 0xf2, 0x5d, 0x15, 0x5e, 0xcc, 0x45, 0xbe,
	0x1b, 0x22, 0xdf, 0xe5, 0x9f, 0x9b, 0xe9, 0xa5, 0xcf, 0xcf, 0xfd, 0xd3, 0x81, 0x78, 0x5f, 0x77,
	0x4f, 0xf5, 0xc1, 0x5f, 0xc2, 0x54, 0x9b, 0x30, 0x6c, 0x62, 0x86, 0x5f, 0x90, 0x23, 0x63, 0x1f,
	0x3b, 0xea, 0xba, 0x7a, 0xed, 0xee, 0x8d, 0xdc, 0x4f, 0x5a, 0x57, 0xd8, 0x2b, 0x0a, 0x59, 0x7d,
	0x62, 0xa3, 0x9d, 0x82, 0xa3, 0x95, 0x9c, 0xa8, 0xf8, 0x1b, 0xb9, 0x5d, 0x46, 0x01, 0xf2, 0x9c,
	0xa0, 0xf8, 0xc7, 0xc9, 0xd8, 0x76, 0x26, 0x98, 0x1b, 0xeb, 0x47, 0x84, 0xb9, 0x97, 0x05, 0x5e,
	0x4e, 0x68, 0x5b, 0xc7, 0x70, 0xb5, 0xf4, 0x3b, 0xd0, 0x13, 0xa8, 0xbd, 0xc4, 0xb4, 0xdd, 0xbb,
	0x8d, 0x1b, 0x47, 0xd7, 0xff, 0x7f, 0x05, 0x2e, 0x76, 0xf9, 0xb0, 0x3e, 0xd7, 0xe8, 0x74, 0x63,
	0xfa, 0xc9, 0x20, 0xcc, 0x77, 0x9b, 0xa4, 0x3e, 0x07, 0x75, 0x2f, 0xba, 0x88, 0xd0, 0xc3, 0xc5,
	0xb0, 0xe0, 0x16, 0xc2, 0x63, 0x80, 0xe8, 0x54, 0x7f, 0x0f, 0x77, 0x9d, 0x62, 0xd8, 0xe8, 0x3e,
	0x8c, 0x31, 0xd7, 0x73, 0x6d, 0xb7, 0x75, 0xdc, 0xc3, 0x95, 0xa6, 0x10, 0x97, 0x5b, 0x0e, 0xea,
	0xfe, 0x4d, 0xa8, 0x11, 0xcb, 0x43, 0x47, 0x69, 0x12, 0xf4, 0x81, 0x38, 0xb0, 0xb7, 0x67, 0xb5,
	0x36, 0x0f, 0x89, 0xef, 0x5b, 0x66, 0xe9, 0x4d, 0xbf, 0x14, 0xba, 0xbe, 0xa2, 0xe4, 0x5d, 0x5c,
	0xeb, 0xa0, 0xdb, 0x30, 0x4d, 0x3b, 0xbb, 0xd4, 0xf0, 0xad, 0x5d, 0x62, 0x46, 0xf7, 0x80, 0x2a,
	0xe2, 0x20, 0x56, 0x5e, 0x93, 0xfe, 0x63, 0xa8, 0xc5, 0x4e, 0xf0, 0x84, 0x67, 0xa9, 0x2a, 0xb1,
	0xb3, 0x54, 0xc1, 0x0d, 0xc7, 0x81, 0xd8, 0x0d, 0xc7, 0x39, 0x18, 0xe3, 0x86, 0xfc, 0x56, 0x74,
	0xf3, 0x31, 0x7c, 0x46, 0x97, 0x00, 0x64, 0x65, 0x11, 0xd1, 0x3a, 0x24, 0x5a, 0x63, 0x10, 0xfd,
	0x57, 0x63, 0xd0, 0xc8, 0xb0, 0x72, 0x78, 0x8e, 0x39, 0x6a, 0x09, 0x06, 0xd9, 0x03, 0x1b, 0x15,
	0xd2, 0xf6, 0x79, 0xe1, 0x30, 0xed, 0x0f, 0x0e, 0x16, 0xf8, 0x83, 0x4a, 0xd5, 0x0e, 0x65, 0x54,
	0xed, 0x70, 0xf9, 0xe9, 0xf6, 0x79, 0xee, 0xd9, 0x31, 0xe2, 0x84, 0x37, 0xec, 0xab, 0xcd, 0x08,
	0x90, 0x71, 0xad, 0x46, 0x4f, 0xea, 0x5a, 0x2d, 0xc2, 0x04, 0x35, 0x7c, 0xec, 0x91, 0x55, 0x87,
	0x11, 0xff, 0x10, 0xdb, 0xea, 0x62, 0x59, 0x17, 0x4f, 0x2a, 0x45, 0x20, 0xe2, 0x12, 0xae, 0xc3,
	0xc8, 0x11, 0xdb, 0xc2, 0x6c, 0x5f, 0x15, 0xae, 0x89, 0x83, 0xd0, 0x7b, 0x30, 0xaa, 0x0e, 0x38,
	0x29, 0x07, 0xf2, 0x6a, 0x5e, 0x9e, 0x52, 0x59, 0x07, 0x81, 0x5b, 0xa0, 0x28, 0xd0, 0xfb, 0x30,
	0x46, 0xd5, 0xdd, 0x40, 0xe5, 0x39, 0xea, 0xf9, 0xd4, 0x12, 0x27, 0x48, 0xba, 0x04, 0x34, 0xa7,
	0x2c, 0x52, 0xf1, 0xef, 0x28, 0x21, 0x91, 0x88, 0x11, 0x34, 0x7a, 0x8e, 0x11, 0x3c, 0x85, 0x1a,
	0xd7, 0x58, 0x01, 0x61, 0x0f, 0xce, 0x65, 0x1c, 0x3f, 0xc7, 0xb2, 0x46, 0x27, 0xb7, 0xac, 0xb5,
	0x20, 0xa0, 0x32, 0x1d, 0x86, 0x76, 0x55, 0x50, 0x65, 0x07, 0xce, 0x7b, 0xbe, 0x2b, 0x0f, 0xb5,
	0xc7, 0xa4, 0x05, 0x51, 0xf7, 0xb9, 0xba, 0x6f, 0xe4, 0x22, 0x52, 0xfd, 0x0f, 0x2a, 0x30, 0xdf,
	0x2d, 0x81, 0xde, 0xa7, 0xf6, 0xda, 0x84, 0x99, 0xb6, 0xbc, 0x5f, 0xbe, 0x72, 0xe4, 0x59, 0xfe,
	0x71, 0x78, 0x64, 0x79, 0xa0, 0x6c, 0xcf, 0xe5, 0xd3, 0xe9, 0x5b, 0xa0, 0x15, 0xed, 0x80, 0x3e,
	0xad, 0xbc, 0x9f, 0x56, 0xe0, 0x7c, 0xc1, 0x96, 0x44, 0x8f, 0xa0, 0x86, 0x63, 0xeb, 0x58, 0x29,
	0xb9, 0xaf, 0x1e, 0xc3, 0x45, 0x2b, 0x31, 0x45, 0x30, 0x90, 0x3e, 0xf8, 0x90, 0x79, 0xdf, 0x86,
	0x42, 0x0d, 0xf6, 0x72, 0x40, 0xaa, 0x1f, 0xc0, 0xe5, 0x12, 0xe4, 0xfe, 0xaf, 0xec, 0x87, 0xca,
	0xab, 0x2e, 0x95, 0x97, 0xfe, 0x7f, 0xeb, 0x50, 0x8b, 0x5d, 0x7c, 0x8a, 0xf7, 0xfc, 0x5a, 0xef,
	0x3d, 0xbf, 0x0e, 0x75, 0x6c, 0x18, 0x84, 0xd2, 0x35, 0xb7, 0xf5, 0xdc, 0xb2, 0x03, 0x9d, 0x99,
	0x04, 0xa2, 0x6b, 0x30, 0x19, 0x01, 0x5c, 0xbf, 0x8d, 0x83, 0xea, 0x01, 0x69, 0x30, 0x5a, 0x85,
	0xa9, 0x10, 0xb4, 0xe2, 0x18, 0xae, 0x19, 0x98, 0x34, 0x13, 0x71, 0x6f, 0x20, 0x83, 0xd2, 0xcc,
	0x52, 0x71, 0x0d, 0x8c, 0x3b, 0xcc, 0x95, 0xb7, 0xfa, 0x94, 0x76, 0x8a, 0x41, 0xf8, 0xd0, 0x55,
	0x74, 0x59, 0x5d, 0x7d, 0x92, 0x65, 0xf7, 0x92, 0x40, 0x74, 0x13, 0xa6, 0x0c, 0xb7, 0xed, 0xb9,
	0x0e, 0x71, 0xd8, 0x5a, 0x50, 0x7d, 0x4e, 0x2a, 0xaa, 0x6c, 0x83, 0x52, 0x16, 0x46, 0xc7, 0xf7,
	0x89, 0x63, 0x1c, 0x0b, 0x7d, 0x55, 0x6f, 0xc6, 0x41, 0xd1, 0xed, 0x0d, 0x51, 0x5c, 0xab, 0xd3,
	0xf6, 0x54, 0x3c, 0xb3, 0x87, 0xdb, 0x1b, 0x01, 0x05, 0xda, 0x80, 0x69, 0x12, 0xab, 0xe6, 0x10,
	0x78, 0xa3, 0x90, 0x0e, 0x47, 0x65, 0x4b, 0x3e, 0x34, 0xf3, 0x08, 0xd1, 0xfb, 0x50, 0x13, 0xe0,
	0x6d, 0x86, 0x19, 0x35, 0x95, 0x12, 0xeb, 0xde, 0x4f, 0x9c, 0x80, 0x1b, 0x5c, 0xaa, 0x38, 0xa0,
	0x0a, 0x38, 0xc8, 0xd3, 0xa4, 0xf2, 0x82, 0x71, 0x5e, 0x13, 0x67, 0x88, 0x00, 0xbc, 0xa5, 0xce,
	0xc9, 0xab, 0x0b, 0xc7, 0x29, 0x70, 0x14, 0x6c, 0x9e, 0x88, 0x07, 0x9b, 0xaf, 0xc1, 0xa4, 0xe5,
	0x24, 0xe9, 0x1b, 0xea, 0xc2, 0x72, 0x12, 0x9c, 0x28, 0x1a, 0x88, 0x52, 0x45, 0x03, 0x1f, 0x73,
	0x6f, 0xca, 0x3a, 0xb4, 0x6c, 0xd2, 0x22, 0xa6, 0x8a, 0xe6, 0x75, 0x35, 0x9c, 0x23, 0x6c, 0xf4,
	0x0c, 0xe6, 0x7d, 0x82, 0x4d, 0xcb, 0x21, 0x94, 0xae, 0x3a, 0x16, 0xb3, 0xb0, 0xbd, 0x4c, 0x6c,
	0x7c, 0xbc, 0x4d, 0x0c, 0xd7, 0x31, 0xa9, 0xba, 0x6e, 0xdb, 0x15, 0x47, 0x5e, 0xce, 0x52, 0xed,
	0x5b, 0xc4, 0xb7, 0x5c, 0x33, 0xa0, 0x9e, 0x11, 0xd4, 0x05, 0xad, 0xe8, 0x09, 0x5c, 0x08, 0x5b,
	0x9e, 0x63, 0xcb, 0xee, 0xf8, 0x24, 0x3a, 0x5a, 0x38, 0x2b, 0x48, 0x8b, 0x11, 0xf8, 0xbe, 0xa0,
	0x0c, 0xb3, 0x8e, 0x38, 0xc6, 0x2b, 0xf2, 0x3e, 0xf5, 0x66, 0x0c, 0x92, 0x54, 0xa4, 0xda, 0x09,
	0x82, 0xed, 0xc1, 0xbd, 0xc3, 0x0b, 0x62, 0xbb, 0x36, 0x22, 0x1a, 0x09, 0x0f, 0x6f, 0x1c, 0x3e,
	0x06, 0xcd, 0x53, 0xb1, 0xaa, 0x65, 0xc2, 0x64, 0x88, 0x3a, 0xb8, 0xb0, 0x23, 0xef, 0x87, 0x16,
	0xb6, 0xa3, 0x1d, 0x98, 0x11, 0x9c, 0xb7, 0x18, 0x6c, 0xf7, 0x80, 0xf9, 0x2f, 0xa6, 0x4f, 0x33,
	0xad, 0x24, 0xd0, 0x82, 0x6b, 0xaf, 0xb9, 0xc4, 0xe8, 0x2e, 0x9c, 0x53, 0x7c, 0x17, 0xb8, 0x26,
	0x92, 0x83, 0xe7, 0xc5, 0x68, 0x72, 0xdb, 0xb2, 0x17, 0x73, 0x5e, 0x3d, 0xe1, 0xc5, 0x9c, 0xec,
	0x6d, 0xa5, 0x4b, 0xb9, 0xb7, 0x95, 0xbe, 0x0f, 0xb3, 0x1e, 0xf6, 0x89, 0xc3, 0xb6, 0xf7, 0x3b,
	0xcc, 0x74, 0x5f, 0x46, 0x6f, 0xbc, 0x52, 0xf6, 0xc6, 0x02, 0x42, 0x74, 0x8f, 0x0b, 0x90, 0xb8,
	0x48, 0x91, 0x15, 0xf5, 0xae, 0x86, 0xe6, 0x47, 0x5e, 0x33, 0x1f, 0xb0, 0xdb, 0x61, 0xb6, 0x45,
	0xfc, 0x35, 0xb7, 0x25, 0x8c, 0x61, 0x19, 0x5d, 0x4b, 0x41, 0x39, 0x03, 0xd9, 0xd6, 0x1e, 0x31,
	0x8e, 0x0d, 0x9b, 0xa8, 0x8b, 0xf8, 0x85, 0x6a, 0x34, 0xc2, 0xd4, 0xff, 0xa9, 0x02, 0xe7, 0xf2,
	0x16, 0xed, 0x5b, 0x2a, 0x53, 0x53, 0x55, 0x4e, 0xdc, 0x4a, 0x5e, 0x99, 0x9a, 0xd7, 0x8a, 0xf8,
	0x28, 0x86, 0x7a, 0x86, 0x25, 0x6b, 0xfe, 0xae, 0x02, 0x17, 0x0a, 0xdf, 0xc3, 0x47, 0x2d, 0xf2,
	0x9a, 0xca, 0x1d, 0xe5, 0xbf, 0x85, 0x5a, 0xb2, 0x2d, 0xe2, 0x88, 0x7b, 0x95, 0xea, 0x18, 0xbb,
	0xfa, 0xd4, 0x6c, 0x83, 0x28, 0x2f, 0xeb, 0x5b, 0x87, 0x98, 0x91, 0x4f, 0xc9, 0x71, 0x50, 0x60,
	0x31, 0x82, 0x08, 0x56, 0xc4, 0x4b, 0xf1, 0x03, 0xf4, 0xc1, 0xc5, 0xb9, 0x04, 0x94, 0x7b, 0x7a,
	0xd4, 0xb1, 0x94, 0xa2, 0xe4, 0x3f, 0xb9, 0x20, 0xa6, 0x9d, 0x5d, 0xae, 0x4f, 0x17, 0x6d, 0x59,
	0x84, 0x45, 0x1b, 0x11, 0x7e, 0x76, 0x1a, 0xac, 0xff, 0x08, 0x26, 0x53, 0xd7, 0xa6, 0x23, 0xd9,
	0x5e, 0x29, 0x3c, 0x3f, 0x3e, 0xdc, 0xf3, 0xf9, 0xf1, 0x25, 0x38, 0x5f, 0x50, 0xe0, 0x8e, 0x0f,
	0xdb, 0xf0, 0x3a, 0x41, 0xe9, 0x1f, 0xc3, 0xeb, 0xc8, 0x9a, 0x0b, 0x6d, 0x57, 0x9d, 0x82, 0x14,
	0x35, 0x17, 0xf8, 0x93, 0xfe, 0x47, 0x03, 0x50, 0x0d, 0x6f, 0x6a, 0x9f, 0xe2, 0x8e, 0xe6, 0x3c,
	0x8c, 0x76, 0x4c, 0x2a, 0xf6, 0xc8, 0x40, 0xb8, 0xa9, 0x02, 0x10, 0x7a, 0x06, 0xe3, 0x1d, 0x4a,
	0x36, 0xb8, 0xc5, 0x63, 0x7f, 0xf2, 0x92, 0x95, 0x87, 0x6c, 0xa4, 0x67, 0x1b, 0xa7, 0x41, 0x6b,
	0x30, 0xd5, 0xa1, 0x64, 0xc7, 0xef, 0x50, 0xf6, 0xd2, 0xf5, 0xd9, 0xfe, 0x31, 0xef, 0x68, 0xa8,
	0xa7, 0x8e, 0xb2, 0x84, 0xe8, 0x0e, 0x0c, 0x33, 0xf7, 0x80, 0x38, 0xbd, 0x94, 0xca, 0x94, 0x98,
	0xfa, 0x7f, 0x81, 0xf1, 0xf8, 0x45, 0x21, 0xee, 0xc9, 0x8b, 0x0b, 0xb4, 0xe2, 0xa3, 0xe5, 0x54,
	0x47, 0x80, 0x30, 0xa4, 0x32, 0x10, 0x0b, 0xa9, 0x70, 0x45, 0x24, 0x7a, 0x10, 0x09, 0x7f, 0xc5,
	0x95, 0x11, 0x44, 0xff, 0xed, 0x0a, 0xd4, 0xcf, 0xcc, 0x44, 0xd7, 0x61, 0x3c, 0xb8, 0x42, 0xb3,
	0x15, 0x99, 0xc2, 0x09, 0x58, 0x38, 0xc8, 0xc1, 0x64, 0xdc, 0x27, 0x5d, 0xde, 0x4c, 0xff, 0xc9,
	0x10, 0xcc, 0xe4, 0xd6, 0x8c, 0x40, 0x5f, 0xc2, 0x05, 0xc9, 0x02, 0x51, 0x3a, 0xe9, 0xd9, 0xb1,
	0xaa, 0x37, 0xd3, 0x43, 0xe8, 0xa5, 0x98, 0x18, 0xad, 0xc2, 0xb4, 0x43, 0x0e, 0x89, 0x7a, 0x61,
	0x8f, 0xd5, 0x34, 0x9b, 0x79, 0x34, 0xe2, 0xe2, 0x8e, 0xfd, 0x12, 0x1f, 0xd3, 0x54, 0x5f, 0xe3,
	0x65, 0x17, 0x77, 0x72, 0x88, 0xd0, 0x1a, 0x4c, 0xfb, 0xe4, 0xa5, 0x6f, 0x31, 0xb2, 0xe8, 0x79,
	0x1f, 0xef, 0xec, 0x6c, 0x6d, 0xf9, 0xee, 0x2e, 0x51, 0x0e, 0x78, 0xd7, 0x8a, 0x11, 0x39, 0x64,
	0xdc, 0x7e, 0xb6, 0x44, 0xff, 0xc2, 0xb7, 0x57, 0x93, 0x1e, 0x07, 0xf1, 0x79, 0x90, 0x8f, 0x24,
	0xe1, 0x75, 0x97, 0x14, 0x47, 0xc9, 0xa3, 0x41, 0x1f, 0xc0, 0x84, 0xbb, 0x9b, 0x98, 0x81, 0x92,
	0x44, 0x6b, 0x0a, 0x5d, 0xff, 0x7f, 0x15, 0x38, 0x5f, 0x70, 0x8a, 0xbc, 0x4f, 0xa5, 0xf5, 0x3e,
	0x8c, 0xbb, 0x1d, 0xe6, 0x75, 0x98, 0x2a, 0x63, 0x33, 0xd0, 0x43, 0xc1, 0x91, 0x18, 0xbe, 0xfe,
	0xcb, 0x41, 0x78, 0xb5, 0xeb, 0xc1, 0xf4, 0x3e, 0xc7, 0xf5, 0x8e, 0xb8, 0x2f, 0xb2, 0xaf, 0xc6,
	0x73, 0x39, 0xf7, 0x14, 0xfc, 0x62, 0x87, 0x45, 0x25, 0xc2, 0x3a, 0x6c, 0x1f, 0x3d, 0x0a, 0x2d,
	0xc2, 0x9c, 0xb3, 0xf7, 0x21, 0x59, 0x6e, 0x51, 0x8a, 0x15, 0x91, 0x6b, 0x64, 0xe4, 0x88, 0x7d,
	0xe4, 0x63, 0x6f, 0x5f, 0x09, 0xb6, 0xfc, 0x0e, 0x96, 0x62, 0x88, 0xcd, 0x04, 0x19, 0xda, 0x8c,
	0xe2, 0xe9, 0x52, 0xb0, 0xbd, 0xdb, 0xe3, 0xf9, 0xfd, 0x05, 0x15, 0xe8, 0x4f, 0x17, 0xfc, 0xd9,
	0x84, 0x51, 0x15, 0xaa, 0x50, 0xe1, 0xee, 0x7e, 0x3b, 0x54, 0xbd, 0xcc, 0xad, 0x40, 0x3d, 0xd1,
	0xd2, 0x67, 0x5c, 0xe3, 0xf7, 0x2b, 0x30, 0x93, 0xbb, 0x14, 0xdc, 0xdf, 0xc4, 0x9e, 0xb7, 0xe4,
	0x13, 0x93, 0x38, 0xdc, 0x01, 0xa1, 0x3d, 0x74, 0x9b, 0xa2, 0xe0, 0xda, 0x12, 0x7b, 0x16, 0x37,
	0x1d, 0x94, 0xb6, 0x94, 0x4f, 0x68, 0x21, 0xba, 0x0c, 0x6a, 0x18, 0xa1, 0xec, 0x97, 0xd2, 0x33,
	0xa7, 0x45, 0xff, 0xaf, 0x7c, 0xbb, 0xe4, 0x2e, 0x7c, 0x9f, 0x6c, 0x79, 0x13, 0xa6, 0x28, 0x6e,
	0x7b, 0x22, 0xf7, 0xbd, 0x8b, 0x65, 0x61, 0x34, 0x25, 0xd9, 0xb3, 0x0d, 0xfa, 0x66, 0xe2, 0xf5,
	0x71, 0xb6, 0xe9, 0x73, 0xd6, 0xff, 0xc7, 0x00, 0x8c, 0x27, 0xbe, 0xe2, 0x01, 0x8c, 0x9a, 0x98,
	0x61, 0xd3, 0x6d, 0x65, 0x8b, 0x03, 0x4a, 0xc4, 0x65, 0xd9, 0x1c, 0xb0, 0x81, 0xc2, 0x46, 0x4f,
	0xb9, 0xc9, 0xdc, 0xda, 0x67, 0x94, 0x11, 0x2f, 0xbb, 0xc9, 0x24, 0xe9, 0x1a, 0x47, 0xd8, 0x66,
	0xc4, 0x0b, 0x6e, 0x66, 0x84, 0x14, 0xe8, 0x1e, 0x8c, 0x7c, 0x63, 0x79, 0x07, 0x56, 0x50, 0xe9,
	0x6e, 0x3e, 0x4d, 0xfb, 0x95, 0x68, 0x0d, 0x36, 0x99, 0xc4, 0x45, 0x4b, 0x79, 0x37, 0x5c, 0xae,
	0xa6, 0x49, 0x93, 0x53, 0x96, 0x49, 0x00, 0xde, 0x82, 0xe9, 0x9c, 0x2f, 0x43, 0x1a, 0x8c, 0x62,
	0x55, 0x3a, 0x43, 0xda, 0x02, 0xc1, 0xa3, 0xfe, 0x87, 0x15, 0x98, 0xc9, 0xfd, 0xa0, 0x62, 0x1a,
	0xae, 0x16, 0x64, 0x7c, 0x67, 0x47, 0x18, 0x29, 0xea, 0x6c, 0x60, 0x0c, 0x24, 0x4a, 0x88, 0xf3,
	0x3e, 0xe3, 0x2c, 0x18, 0x83, 0xa0, 0xbb, 0x30, 0x22, 0x42, 0xe6, 0xa4, 0x87, 0x2c, 0x97, 0xc2,
	0xd4, 0x17, 0x00, 0x65, 0x67, 0xaf, 0xcb, 0x97, 0xfd, 0xb2, 0x02, 0xe7, 0x0b, 0xe6, 0x0c, 0xdd,
	0x0e, 0x8a, 0x3e, 0x94, 0xb3, 0x97, 0x2a, 0x08, 0x71, 0x0f, 0x66, 0xda, 0xf8, 0x68, 0xa3, 0xd3,
	0xde, 0x25, 0xfe, 0xe6, 0xde, 0x22, 0x63, 0xbe, 0xb5, 0xdb, 0xe1, 0xa6, 0xb9, 0xe4, 0xef, 0xfc,
	0x46, 0x74, 0x1f, 0x66, 0xe3, 0x0d, 0x31, 0x0d, 0x29, 0x4f, 0x05, 0x16, 0xb4, 0x72, 0x9f, 0x3c,
	0xd6, 0xb2, 0x4e, 0x28, 0xc5, 0xad, 0xe0, 0x8f, 0x02, 0xe4, 0x59, 0xc1, 0xc2, 0x76, 0xfd, 0x4f,
	0x86, 0xa1, 0xae, 0x6a, 0xcb, 0x9d, 0x6a, 0x37, 0xbf, 0x0b, 0x23, 0x5f, 0x63, 0xd2, 0x0a, 0xf5,
	0x45, 0x6a, 0xf3, 0x58, 0x4e, 0xeb, 0x13, 0xd1, 0x1c, 0xb0, 0xb1, 0x44, 0xce, 0x24, 0x89, 0x86,
	0x4e, 0x9a, 0x24, 0x9a, 0x83, 0x31, 0x2f, 0x28, 0x59, 0x23, 0x5d, 0x9b, 0xf0, 0x19, 0xdd, 0x89,
	0x72, 0x3b, 0x23, 0xe9, 0x62, 0xb6, 0x05, 0x19, 0x9d, 0x77, 0xc3, 0xcd, 0x38, 0x5a, 0xf0, 0x19,
	0xb9, 0xbb, 0x71, 0x11, 0xc0, 0xf5, 0x88, 0x63, 0x10, 0x87, 0x76, 0x82, 0xfa, 0x87, 0x57, 0x33,
	0xa4, 0x9b, 0x21, 0x4a, 0x90, 0xd6, 0x8f, 0x88, 0x7a, 0x48, 0x55, 0x95, 0xa5, 0x7b, 0xea, 0xdf,
	0x45, 0xba, 0x67, 0xe2, 0x5b, 0x38, 0xf5, 0x3c, 0x79, 0xc2, 0xe2, 0xec, 0xbf, 0x3b, 0x20, 0xf7,
	0x6a, 0xce, 0x94, 0x06, 0xf9, 0xcc, 0x4a, 0x26, 0x9f, 0x39, 0x50, 0x9e, 0xcf, 0xfc, 0x18, 0xaa,
	0xe4, 0xc8, 0x73, 0xfd, 0xd8, 0x25, 0xb9, 0xeb, 0x5d, 0x16, 0x71, 0x25, 0xc0, 0x0d, 0x64, 0x7a,
	0x48, 0x9c, 0xac, 0x0b, 0x31, 0x7c, 0xa2, 0xba, 0x10, 0xd9, 0xa4, 0xd4, 0xc8, 0x89, 0x93, 0x52,
	0xfa, 0x0f, 0xe1, 0x4a, 0xd9, 0x70, 0xb9, 0x3f, 0x16, 0xd7, 0x20, 0x65, 0xfe, 0x58, 0x5c, 0x6f,
	0xfc, 0x7c, 0x50, 0x2a, 0x8e, 0xd4, 0xae, 0x3e, 0xd5, 0xe4, 0x87, 0xf1, 0x04, 0x88, 0xc7, 0x13,
	0xde, 0x0b, 0x7d, 0xfd, 0xc1, 0x74, 0x6c, 0x27, 0x31, 0x80, 0x75, 0x81, 0x14, 0xec, 0x4a, 0x49,
	0x22, 0xe2, 0x1b, 0x1e, 0x76, 0xb6, 0x99, 0xeb, 0xe3, 0x16, 0xd9, 0xe1, 0x9e, 0xa0, 0x0c, 0x8d,
	0xa4, 0xc1, 0x5c, 0xe6, 0x79, 0xc4, 0xa7, 0x16, 0x65, 0xbd, 0xdc, 0xfb, 0x53, 0xa8, 0xe8, 0x3a,
	0x34, 0xa8, 0xec, 0x24, 0xaa, 0x7b, 0x27, 0xb3, 0x0b, 0x19, 0xb8, 0x48, 0x68, 0x08, 0x95, 0x27,
	0x0e, 0x93, 0xa9, 0xbf, 0xf9, 0x89, 0x20, 0x49, 0x8e, 0x19, 0x3b, 0x25, 0xc7, 0x54, 0x4f, 0xce,
	0x31, 0x8f, 0xe1, 0x42, 0xe1, 0x84, 0xa2, 0x57, 0x01, 0xda, 0xf8, 0xe8, 0x85, 0xb0, 0xef, 0xa9,
	0xaa, 0x90, 0x55, 0x6d, 0xe3, 0x23, 0xa1, 0x30, 0xa9, 0xfe, 0xf7, 0x11, 0x3b, 0x24, 0xb4, 0xed,
	0x99, 0xb0, 0x43, 0x35, 0xce, 0x0e, 0x37, 0x61, 0xca, 0xe3, 0xbe, 0xe6, 0x36, 0xc3, 0x3e, 0xeb,
	0x78, 0x22, 0x20, 0xaf, 0x94, 0x63, 0xb6, 0x01, 0x3d, 0x81, 0x0b, 0xb6, 0x75, 0x48, 0x44, 0x0c,
	0x3e, 0x43, 0x55, 0x93, 0xa1, 0xf6, 0x42, 0x04, 0x34, 0x0f, 0xd5, 0x1f, 0x77, 0x88, 0x7f, 0x1c,
	0x9e, 0x01, 0xa9, 0x37, 0x23, 0x40, 0x9f, 0x81, 0x2e, 0xa4, 0xc3, 0xf8, 0xd7, 0xf8, 0x10, 0x6f,
	0x7a, 0x8c, 0x7e, 0x4c, 0xb0, 0x27, 0xff, 0x9c, 0xa4, 0x99, 0x80, 0x71, 0x95, 0xd6, 0xc6, 0x47,
	0xdb, 0x1e, 0x56, 0x57, 0x46, 0xeb, 0xcd, 0xf0, 0x19, 0xbd, 0x0b, 0x43, 0x5c, 0xfd, 0x15, 0xaa,
	0x18, 0x39, 0xff, 0x1b, 0xae, 0x19, 0x68, 0x36, 0x81, 0x7e, 0x26, 0x7f, 0xf6, 0xa4, 0xbf, 0x1d,
	0x4a, 0xdd, 0xf4, 0x5b, 0x10, 0x82, 0x21, 0xc3, 0xeb, 0x04, 0xac, 0x21, 0x7e, 0xeb, 0xbf, 0x55,
	0x81, 0xe9, 0x4f, 0x2d, 0x6c, 0x5b, 0x67, 0x91, 0xfc, 0x45, 0x17, 0xa1, 0xca, 0xed, 0xc1, 0x17,
	0x7b, 0x96, 0x1d, 0x04, 0xa2, 0xc6, 0x38, 0x40, 0xa5, 0x28, 0x1b, 0x2a, 0x20, 0xfa, 0xe2, 0x80,
	0x1c, 0x4b, 0x9c, 0x41, 0xf5, 0x37, 0x54, 0x61, 0xa0, 0x94, 0x63, 0xea, 0x06, 0x20, 0x35, 0xa6,
	0x33, 0x0a, 0x4d, 0xe5, 0x85, 0x98, 0xfe, 0xd7, 0x20, 0x9c, 0x13, 0x6f, 0x59, 0xc6, 0x74, 0x7f,
	0xd7, 0xc5, 0x7e, 0xe0, 0x1f, 0x26, 0x83, 0x66, 0x95, 0x74, 0xd0, 0x8c, 0xdb, 0x00, 0x1d, 0x4a,
	0x7c, 0x07, 0xb7, 0x49, 0xe4, 0xb0, 0xc5, 0x41, 0xe8, 0x75, 0xa8, 0x7b, 0x98, 0x52, 0x6f, 0xdf,
	0xc7, 0x34, 0x16, 0x0f, 0x4e, 0x02, 0xd1, 0xfb, 0x30, 0x7e, 0x68, 0x91, 0x97, 0x9b, 0x8e, 0x7d,
	0x2c, 0xc4, 0x4d, 0xb9, 0xd9, 0x9c, 0xc0, 0xe7, 0xe3, 0x6c, 0xf9, 0x78, 0x0f, 0x3b, 0xf8, 0xb3,
	0xe6, 0x5a, 0xf0, 0x8f, 0x66, 0x11, 0x44, 0x94, 0x00, 0x14, 0x52, 0x82, 0x37, 0xab, 0x83, 0x3f,
	0x21, 0x00, 0xdd, 0x50, 0xf1, 0x86, 0x92, 0xcb, 0x85, 0x32, 0xce, 0x70, 0x1b, 0xa6, 0x55, 0xc7,
	0xab, 0x8e, 0xba, 0x89, 0xc4, 0x3b, 0x95, 0x77, 0x0d, 0xf3, 0x9a, 0xb8, 0xe3, 0x2a, 0xdf, 0x95,
	0x20, 0x90, 0x62, 0x22, 0xa7, 0x45, 0xff, 0xef, 0x63, 0x50, 0x13, 0xab, 0x71, 0xda, 0xfb, 0x3e,
	0xf2, 0x84, 0xd6, 0x32, 0x69, 0xbb, 0x32, 0x76, 0xda, 0xcb, 0x7d, 0x9f, 0x34, 0x4d, 0x20, 0x13,
	0x07, 0x33, 0x32, 0x71, 0xa8, 0x5c, 0x26, 0xf6, 0x7a, 0xc7, 0xa7, 0xa0, 0xbc, 0xea, 0x48, 0x71,
	0x79, 0xd5, 0x47, 0xb1, 0x83, 0x4c, 0x19, 0xc3, 0x37, 0x67, 0x13, 0xc7, 0xce, 0x30, 0x3d, 0x81,
	0xaa, 0x19, 0xb0, 0xb9, 0x12, 0x4b, 0x97, 0x52, 0xb4, 0xa9, 0x6d, 0xd0, 0x8c, 0x08, 0xd2, 0x56,
	0xef, 0x64, 0xd6, 0xea, 0xfd, 0xcd, 0xbf, 0x9b, 0x9c, 0xed, 0xbf, 0x9b, 0xa4, 0x6c, 0xef, 0x89,
	0x13, 0x9e, 0x39, 0x0b, 0x8f, 0x3b, 0x35, 0xd2, 0xc7, 0x9d, 0x12, 0x1a, 0x71, 0xaa, 0x67, 0x8d,
	0x78, 0x1d, 0x26, 0x22, 0x8e, 0x5c, 0x34, 0x4d, 0x5f, 0x8a, 0x52, 0xb5, 0x0a, 0x89, 0x16, 0x74,
	0x3f, 0x72, 0xe8, 0x32, 0xd7, 0x77, 0xb2, 0x62, 0x3d, 0xf4, 0xea, 0xf4, 0x5f, 0x8d, 0xc2, 0x88,
	0xd8, 0x47, 0x14, 0xbd, 0x01, 0x83, 0x86, 0x63, 0xa9, 0xad, 0x3b, 0x9d, 0xf8, 0xa3, 0xc1, 0xa0,
	0xd0, 0x9a, 0xe1, 0x58, 0xa2, 0xb8, 0x16, 0x65, 0x96, 0x6b, 0xb8, 0x3e, 0x31, 0x9d, 0xc0, 0x1b,
	0x88, 0xf9, 0x8f, 0x89, 0xbf, 0x57, 0x6b, 0x26, 0x90, 0xd1, 0x3d, 0x18, 0x0b, 0x4b, 0x4a, 0x49,
	0xd3, 0x40, 0xcb, 0x94, 0x2c, 0x0c, 0x2b, 0x30, 0x04, 0x98, 0x68, 0x01, 0x46, 0x5a, 0xa2, 0xac,
	0xa7, 0x32, 0xf8, 0x67, 0xd3, 0x75, 0xcc, 0x03, 0xeb, 0x56, 0x62, 0x71, 0xef, 0x56, 0x89, 0xc7,
	0x32, 0x49, 0x1b, 0xe0, 0xa1, 0x1b, 0x30, 0xdc, 0xb6, 0x8e, 0x88, 0xaf, 0xf6, 0xe9, 0x4c, 0xaa,
	0x44, 0x44, 0x50, 0x43, 0x45, 0xe0, 0x88, 0x82, 0x79, 0x96, 0xed, 0x06, 0x65, 0xee, 0x67, 0x72,
	0xef, 0x8a, 0x34, 0x25, 0x0e, 0x7a, 0x10, 0x2f, 0x4e, 0x72, 0x3e, 0x5d, 0x72, 0xb9, 0x4b, 0x5d,
	0x92, 0xc7, 0x89, 0x43, 0xf1, 0x41, 0x39, 0xfc, 0x9c, 0xf3, 0x57, 0x39, 0x27, 0xe1, 0xbf, 0x80,
	0x59, 0x9a, 0xcc, 0xe4, 0xa8, 0x42, 0xdb, 0xea, 0xca, 0x5d, 0x3c, 0xd4, 0x9d, 0x97, 0xf1, 0x69,
	0x16, 0x90, 0xf3, 0xa9, 0x65, 0xaa, 0x40, 0xff, 0x44, 0x7a, 0xe1, 0x13, 0xc1, 0x92, 0x66, 0x80,
	0xc7, 0x67, 0xeb, 0x80, 0x73, 0xa0, 0xaa, 0x51, 0x39, 0x93, 0x62, 0xcc, 0x60, 0xb6, 0x04, 0x0e,
	0xd2, 0x60, 0xf4, 0x90, 0xfb, 0x10, 0xae, 0xa3, 0x4e, 0xbe, 0x04, 0x8f, 0x42, 0xcd, 0xa8, 0x7f,
	0xcd, 0x4c, 0xed, 0xa5, 0xee, 0x6a, 0x26, 0x45, 0x83, 0x3e, 0x02, 0x14, 0x4d, 0xd4, 0xa6, 0x2a,
	0x46, 0x5e, 0x72, 0xbc, 0xb1, 0x99, 0x43, 0x82, 0x6e, 0x43, 0x55, 0xfe, 0x71, 0x09, 0xdf, 0x35,
	0xd3, 0xc5, 0xbb, 0x66, 0x4c, 0x60, 0x2d, 0x39, 0x16, 0x7a, 0x08, 0xd5, 0x03, 0x51, 0x33, 0xd5,
	0xfa, 0x86, 0xf4, 0x70, 0xd0, 0x31, 0x42, 0x4e, 0x14, 0x05, 0x9e, 0x49, 0x15, 0x05, 0x7e, 0x00,
	0xd0, 0x26, 0x54, 0x05, 0xc6, 0xcb, 0x0e, 0x26, 0xc4, 0x50, 0xf5, 0x1f, 0x42, 0x3d, 0xf1, 0xc7,
	0x45, 0x67, 0x5b, 0x8f, 0xec, 0xfa, 0x2d, 0x99, 0xdf, 0x47, 0xe3, 0x30, 0xa6, 0x0e, 0xc8, 0x9b,
	0x8d, 0x57, 0xf8, 0x93, 0xed, 0xb6, 0x5e, 0xb8, 0x8e, 0x7d, 0xdc, 0xa8, 0xa0, 0x1a, 0x7f, 0xe3,
	0x9e, 0xeb, 0x1b, 0xa4, 0x31, 0x70, 0xfd, 0x51, 0xc1, 0x05, 0x23, 0x8e, 0xb5, 0xbc, 0xf2, 0x7c,
	0xf1, 0xb3, 0xb5, 0x9d, 0xc6, 0x2b, 0x08, 0x60, 0x64, 0x7b, 0xa7, 0xb9, 0xba, 0xb4, 0xd3, 0xa8,
	0xa0, 0x51, 0x18, 0xdc, 0x7c, 0xfe, 0xbc, 0x31, 0x70, 0xfd, 0xad, 0x9c, 0xf3, 0x75, 0x68, 0x0c,
	0x86, 0x3e, 0xd9, 0xde, 0xdc, 0x68, 0xbc, 0xc2, 0x7f, 0xed, 0xac, 0x7c, 0xb9, 0xd3, 0xa8, 0x5c,
	0x5f, 0x0c, 0x92, 0x37, 0xbc, 0x1f, 0x19, 0xa2, 0x6a, 0xbc, 0x82, 0xea, 0xb1, 0x38, 0xb5, 0x1c,
	0x95, 0x8a, 0x60, 0x37, 0x06, 0xd0, 0x64, 0x22, 0x18, 0xd0, 0x18, 0x7c, 0x36, 0xfb, 0x57, 0xbf,
	0xb8, 0x54, 0xf9, 0xf9, 0x2f, 0x2e, 0x55, 0xfe, 0xf6, 0x17, 0x97, 0x2a, 0x5f, 0x85, 0xff, 0x27,
	0xbc, 0x3b, 0x22, 0x26, 0xe9, 0x9d, 0x7f, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x31, 0xf7, 0x8f,
	0x8e, 0x78, 0x00, 0x00,
}

func (m *ArchConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.S390X != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.S390X))
		i--
		dAtA[i] = 0x18
	}
	if m.Ppc64Le != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Ppc64Le))
		i--
		dAtA[i] = 0x10
	}
	if m.Amd64 != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Amd64))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CNIConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNIConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNIConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Chained != nil {
		{
			size, err := m.Chained.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Repair != nil {
		{
			size, err := m.Repair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LogLevel) > 0 {
		i -= len(m.LogLevel)
		copy(dAtA[i:], m.LogLevel)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.LogLevel)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PspClusterRole) > 0 {
		i -= len(m.PspClusterRole)
		copy(dAtA[i:], m.PspClusterRole)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PspClusterRole)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExcludeNamespaces) > 0 {
		for iNdEx := len(m.ExcludeNamespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExcludeNamespaces[iNdEx])
			copy(dAtA[i:], m.ExcludeNamespaces[iNdEx])
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ExcludeNamespaces[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CniConfFileName) > 0 {
		i -= len(m.CniConfFileName)
		copy(dAtA[i:], m.CniConfFileName)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CniConfFileName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CniConfDir) > 0 {
		i -= len(m.CniConfDir)
		copy(dAtA[i:], m.CniConfDir)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CniConfDir)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CniBinDir) > 0 {
		i -= len(m.CniBinDir)
		copy(dAtA[i:], m.CniBinDir)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CniBinDir)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PullPolicy) > 0 {
		i -= len(m.PullPolicy)
		copy(dAtA[i:], m.PullPolicy)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PullPolicy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CNIRepairConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNIRepairConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNIRepairConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InitContainerName) > 0 {
		i -= len(m.InitContainerName)
		copy(dAtA[i:], m.InitContainerName)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.InitContainerName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BrokenPodLabelValue) > 0 {
		i -= len(m.BrokenPodLabelValue)
		copy(dAtA[i:], m.BrokenPodLabelValue)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.BrokenPodLabelValue)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BrokenPodLabelKey) > 0 {
		i -= len(m.BrokenPodLabelKey)
		copy(dAtA[i:], m.BrokenPodLabelKey)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.BrokenPodLabelKey)))
		i--
		dAtA[i] = 0x42
	}
	if m.DeletePods {
		i--
		if m.DeletePods {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.CreateEvents) > 0 {
		i -= len(m.CreateEvents)
		copy(dAtA[i:], m.CreateEvents)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CreateEvents)))
		i--
		dAtA[i] = 0x32
	}
	if m.LabelPods {
		i--
		if m.LabelPods {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPUTargetUtilizationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPUTargetUtilizationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPUTargetUtilizationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetAverageUtilization != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.TargetAverageUtilization))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Resources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Requests) > 0 {
		for k := range m.Requests {
			v := m.Requests[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintValuesTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Limits) > 0 {
		for k := range m.Limits {
			v := m.Limits[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintValuesTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoreDNSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoreDNSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoreDNSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityTermLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityTermLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.RollingMaxUnavailable != nil {
		{
			size, err := m.RollingMaxUnavailable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RollingMaxSurge != nil {
		{
			size, err := m.RollingMaxSurge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ReplicaCount != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReplicaCount))
		i--
		dAtA[i] = 0x30
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoreDNSPluginImage) > 0 {
		i -= len(m.CoreDNSPluginImage)
		copy(dAtA[i:], m.CoreDNSPluginImage)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CoreDNSPluginImage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoreDNSTag) > 0 {
		i -= len(m.CoreDNSTag)
		copy(dAtA[i:], m.CoreDNSTag)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CoreDNSTag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoreDNSImage) > 0 {
		i -= len(m.CoreDNSImage)
		copy(dAtA[i:], m.CoreDNSImage)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CoreDNSImage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DefaultPodDisruptionBudgetConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPodDisruptionBudgetConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPodDisruptionBudgetConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DefaultResourcesConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultResourcesConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultResourcesConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Requests != nil {
		{
			size, err := m.Requests.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EgressGatewayConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EgressGatewayConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EgressGatewayConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.AdditionalContainers) > 0 {
		for iNdEx := len(m.AdditionalContainers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdditionalContainers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.ConfigVolumes) > 0 {
		for iNdEx := len(m.ConfigVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConfigVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.RollingMaxUnavailable != nil {
		{
			size, err := m.RollingMaxUnavailable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.RollingMaxSurge != nil {
		{
			size, err := m.RollingMaxSurge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.Zvpn != nil {
		{
			size, err := m.Zvpn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ServiceAnnotations != nil {
		{
			size, err := m.ServiceAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.SecretVolumes) > 0 {
		for iNdEx := len(m.SecretVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecretVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityTermLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityTermLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Env != nil {
		{
			size, err := m.Env.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DrainDuration != nil {
		{
			size, err := m.DrainDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Cpu != nil {
		{
			size, err := m.Cpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConnectTimeout) > 0 {
		i -= len(m.ConnectTimeout)
		copy(dAtA[i:], m.ConnectTimeout)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ConnectTimeout)))
		i--
		dAtA[i] = 0x22
	}
	if m.AutoscaleMin != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMin))
		i--
		dAtA[i] = 0x18
	}
	if m.AutoscaleMax != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMax))
		i--
		dAtA[i] = 0x10
	}
	if m.AutoscaleEnabled != nil {
		{
			size, err := m.AutoscaleEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnvoyMetricsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvoyMetricsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvoyMetricsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TcpKeepalive != nil {
		{
			size, err := m.TcpKeepalive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TlsSettings != nil {
		{
			size, err := m.TlsSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Port != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayLabelsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayLabelsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayLabelsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Istio) > 0 {
		i -= len(m.Istio)
		copy(dAtA[i:], m.Istio)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Istio)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.App) > 0 {
		i -= len(m.App)
		copy(dAtA[i:], m.App)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.App)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewaysConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewaysConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewaysConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IstioIngressgateway != nil {
		{
			size, err := m.IstioIngressgateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IstioEgressgateway != nil {
		{
			size, err := m.IstioEgressgateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CaAddress) > 0 {
		i -= len(m.CaAddress)
		copy(dAtA[i:], m.CaAddress)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CaAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.MountMtlsCerts != nil {
		{
			size, err := m.MountMtlsCerts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if len(m.Revision) > 0 {
		i -= len(m.Revision)
		copy(dAtA[i:], m.Revision)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Revision)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if m.Sts != nil {
		{
			size, err := m.Sts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if len(m.JwtPolicy) > 0 {
		i -= len(m.JwtPolicy)
		copy(dAtA[i:], m.JwtPolicy)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.JwtPolicy)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if len(m.PilotCertProvider) > 0 {
		i -= len(m.PilotCertProvider)
		copy(dAtA[i:], m.PilotCertProvider)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PilotCertProvider)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if len(m.DefaultTolerations) > 0 {
		for iNdEx := len(m.DefaultTolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultTolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xba
		}
	}
	if m.Istiod != nil {
		{
			size, err := m.Istiod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if len(m.MeshID) > 0 {
		i -= len(m.MeshID)
		copy(dAtA[i:], m.MeshID)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.MeshID)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if len(m.DefaultConfigVisibilitySettings) > 0 {
		for iNdEx := len(m.DefaultConfigVisibilitySettings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DefaultConfigVisibilitySettings[iNdEx])
			copy(dAtA[i:], m.DefaultConfigVisibilitySettings[iNdEx])
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.DefaultConfigVisibilitySettings[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.PrometheusNamespace) > 0 {
		i -= len(m.PrometheusNamespace)
		copy(dAtA[i:], m.PrometheusNamespace)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PrometheusNamespace)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ConfigRootNamespace) > 0 {
		i -= len(m.ConfigRootNamespace)
		copy(dAtA[i:], m.ConfigRootNamespace)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ConfigRootNamespace)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.RemoteTelemetryAddress) > 0 {
		i -= len(m.RemoteTelemetryAddress)
		copy(dAtA[i:], m.RemoteTelemetryAddress)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.RemoteTelemetryAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if len(m.RemotePilotAddress) > 0 {
		i -= len(m.RemotePilotAddress)
		copy(dAtA[i:], m.RemotePilotAddress)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.RemotePilotAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if len(m.RemotePolicyAddress) > 0 {
		i -= len(m.RemotePolicyAddress)
		copy(dAtA[i:], m.RemotePolicyAddress)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.RemotePolicyAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.RemotePilotCreateSvcEndpoint != nil {
		{
			size, err := m.RemotePilotCreateSvcEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.CreateRemoteSvcEndpoints != nil {
		{
			size, err := m.CreateRemoteSvcEndpoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.IstioRemote != nil {
		{
			size, err := m.IstioRemote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if len(m.PodDNSSearchNamespaces) > 0 {
		for iNdEx := len(m.PodDNSSearchNamespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PodDNSSearchNamespaces[iNdEx])
			copy(dAtA[i:], m.PodDNSSearchNamespaces[iNdEx])
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PodDNSSearchNamespaces[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.TrustDomainAliases) > 0 {
		for iNdEx := len(m.TrustDomainAliases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustDomainAliases[iNdEx])
			copy(dAtA[i:], m.TrustDomainAliases[iNdEx])
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.TrustDomainAliases[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.OperatorManageWebhooks != nil {
		{
			size, err := m.OperatorManageWebhooks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if m.OmitSidecarInjectorConfigMap != nil {
		{
			size, err := m.OmitSidecarInjectorConfigMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ImagePullSecrets) > 0 {
		for iNdEx := len(m.ImagePullSecrets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ImagePullSecrets[iNdEx])
			copy(dAtA[i:], m.ImagePullSecrets[iNdEx])
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ImagePullSecrets[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.LogAsJson != nil {
		{
			size, err := m.LogAsJson.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.UseMCP != nil {
		{
			size, err := m.UseMCP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.TrustDomain) > 0 {
		i -= len(m.TrustDomain)
		copy(dAtA[i:], m.TrustDomain)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.TrustDomain)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.Tracer != nil {
		{
			size, err := m.Tracer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.TelemetryNamespace) > 0 {
		i -= len(m.TelemetryNamespace)
		copy(dAtA[i:], m.TelemetryNamespace)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.TelemetryNamespace)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.Sds != nil {
		{
			size, err := m.Sds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.ProxyInit != nil {
		{
			size, err := m.ProxyInit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.Proxy != nil {
		{
			size, err := m.Proxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.PriorityClassName) > 0 {
		i -= len(m.PriorityClassName)
		copy(dAtA[i:], m.PriorityClassName)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PriorityClassName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.PolicyNamespace) > 0 {
		i -= len(m.PolicyNamespace)
		copy(dAtA[i:], m.PolicyNamespace)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PolicyNamespace)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.PolicyCheckFailOpen != nil {
		{
			size, err := m.PolicyCheckFailOpen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.OutboundTrafficPolicy != nil {
		{
			size, err := m.OutboundTrafficPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.OneNamespace != nil {
		{
			size, err := m.OneNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.MultiCluster != nil {
		{
			size, err := m.MultiCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.Mtls != nil {
		{
			size, err := m.Mtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.MonitoringPort != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.MonitoringPort))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.MeshNetworks != nil {
		{
			size, err := m.MeshNetworks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.MeshExpansion != nil {
		{
			size, err := m.MeshExpansion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Logging != nil {
		{
			size, err := m.Logging.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.LocalityLbSetting != nil {
		{
			size, err := m.LocalityLbSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.IstioNamespace) > 0 {
		i -= len(m.IstioNamespace)
		copy(dAtA[i:], m.IstioNamespace)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.IstioNamespace)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ImagePullPolicy) > 0 {
		i -= len(m.ImagePullPolicy)
		copy(dAtA[i:], m.ImagePullPolicy)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ImagePullPolicy)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0x62
	}
	if m.EnableTracing != nil {
		{
			size, err := m.EnableTracing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.EnableHelmTest != nil {
		{
			size, err := m.EnableHelmTest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.DefaultResources != nil {
		{
			size, err := m.DefaultResources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DisablePolicyChecks != nil {
		{
			size, err := m.DisablePolicyChecks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DefaultPodDisruptionBudget != nil {
		{
			size, err := m.DefaultPodDisruptionBudget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DefaultNodeSelector != nil {
		{
			size, err := m.DefaultNodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ControlPlaneSecurityEnabled != nil {
		{
			size, err := m.ControlPlaneSecurityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ConfigValidation != nil {
		{
			size, err := m.ConfigValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConfigNamespace) > 0 {
		i -= len(m.ConfigNamespace)
		copy(dAtA[i:], m.ConfigNamespace)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ConfigNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Arch != nil {
		{
			size, err := m.Arch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *STSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *STSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *STSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServicePort != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ServicePort))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IstiodConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstiodConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstiodConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EnableAnalysis != nil {
		{
			size, err := m.EnableAnalysis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalLoggingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalLoggingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalLoggingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IngressGatewayConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IngressGatewayConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IngressGatewayConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if len(m.TelemetryDomainName) > 0 {
		i -= len(m.TelemetryDomainName)
		copy(dAtA[i:], m.TelemetryDomainName)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.TelemetryDomainName)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if len(m.Hosts) > 0 {
		for iNdEx := len(m.Hosts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hosts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.TelemetryAddonGateways != nil {
		{
			size, err := m.TelemetryAddonGateways.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.Tls != nil {
		{
			size, err := m.Tls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.Certificates != nil {
		{
			size, err := m.Certificates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.ConfigVolumes) > 0 {
		for iNdEx := len(m.ConfigVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConfigVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.AdditionalContainers) > 0 {
		for iNdEx := len(m.AdditionalContainers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdditionalContainers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.IngressPorts) > 0 {
		for iNdEx := len(m.IngressPorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IngressPorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.ExternalTrafficPolicy) > 0 {
		i -= len(m.ExternalTrafficPolicy)
		copy(dAtA[i:], m.ExternalTrafficPolicy)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ExternalTrafficPolicy)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.ApplicationPorts) > 0 {
		i -= len(m.ApplicationPorts)
		copy(dAtA[i:], m.ApplicationPorts)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ApplicationPorts)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.RollingMaxUnavailable != nil {
		{
			size, err := m.RollingMaxUnavailable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.RollingMaxSurge != nil {
		{
			size, err := m.RollingMaxSurge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.Zvpn != nil {
		{
			size, err := m.Zvpn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.ServiceAnnotations != nil {
		{
			size, err := m.ServiceAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.SecretVolumes) > 0 {
		for iNdEx := len(m.SecretVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecretVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if m.Sds != nil {
		{
			size, err := m.Sds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.ReplicaCount != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReplicaCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityTermLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityTermLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.MeshExpansionPorts) > 0 {
		for iNdEx := len(m.MeshExpansionPorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MeshExpansionPorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.LoadBalancerSourceRanges) > 0 {
		for iNdEx := len(m.LoadBalancerSourceRanges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LoadBalancerSourceRanges[iNdEx])
			copy(dAtA[i:], m.LoadBalancerSourceRanges[iNdEx])
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.LoadBalancerSourceRanges[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.LoadBalancerIP) > 0 {
		i -= len(m.LoadBalancerIP)
		copy(dAtA[i:], m.LoadBalancerIP)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.LoadBalancerIP)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.K8SIngressHttps != nil {
		{
			size, err := m.K8SIngressHttps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.K8SIngress != nil {
		{
			size, err := m.K8SIngress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ExternalIPs) > 0 {
		for iNdEx := len(m.ExternalIPs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalIPs[iNdEx])
			copy(dAtA[i:], m.ExternalIPs[iNdEx])
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ExternalIPs[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Env != nil {
		{
			size, err := m.Env.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.DrainDuration != nil {
		{
			size, err := m.DrainDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Debug) > 0 {
		i -= len(m.Debug)
		copy(dAtA[i:], m.Debug)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Debug)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CustomService != nil {
		{
			size, err := m.CustomService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Cpu != nil {
		{
			size, err := m.Cpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConnectTimeout) > 0 {
		i -= len(m.ConnectTimeout)
		copy(dAtA[i:], m.ConnectTimeout)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ConnectTimeout)))
		i--
		dAtA[i] = 0x22
	}
	if m.AutoscaleMin != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMin))
		i--
		dAtA[i] = 0x18
	}
	if m.AutoscaleMax != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMax))
		i--
		dAtA[i] = 0x10
	}
	if m.AutoscaleEnabled != nil {
		{
			size, err := m.AutoscaleEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IngressGatewaySdsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IngressGatewaySdsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IngressGatewaySdsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IngressGatewayZvpnConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IngressGatewayZvpnConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IngressGatewayZvpnConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Suffix) > 0 {
		i -= len(m.Suffix)
		copy(dAtA[i:], m.Suffix)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Suffix)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesEnvMixerAdapterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesEnvMixerAdapterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesEnvMixerAdapterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadSheddingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadSheddingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadSheddingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mode != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LatencyThreshold) > 0 {
		i -= len(m.LatencyThreshold)
		copy(dAtA[i:], m.LatencyThreshold)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.LatencyThreshold)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MTLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MTLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MTLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Auto != nil {
		{
			size, err := m.Auto.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshExpansionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshExpansionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshExpansionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseILB != nil {
		{
			size, err := m.UseILB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MixerTelemetryAdaptersConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixerTelemetryAdaptersConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixerTelemetryAdaptersConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseAdapterCRDs != nil {
		{
			size, err := m.UseAdapterCRDs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Stackdriver != nil {
		{
			size, err := m.Stackdriver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Stdio != nil {
		{
			size, err := m.Stdio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Prometheus != nil {
		{
			size, err := m.Prometheus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Kubernetesenv != nil {
		{
			size, err := m.Kubernetesenv.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MixerPolicyAdaptersConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixerPolicyAdaptersConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixerPolicyAdaptersConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseAdapterCRDs != nil {
		{
			size, err := m.UseAdapterCRDs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Stackdriver != nil {
		{
			size, err := m.Stackdriver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Stdio != nil {
		{
			size, err := m.Stdio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Prometheus != nil {
		{
			size, err := m.Prometheus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Kubernetesenv != nil {
		{
			size, err := m.Kubernetesenv.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MixerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Adapters != nil {
		{
			size, err := m.Adapters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Telemetry != nil {
		{
			size, err := m.Telemetry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MixerPolicyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixerPolicyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixerPolicyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.Env != nil {
		{
			size, err := m.Env.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityTermLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityTermLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.RollingMaxUnavailable != nil {
		{
			size, err := m.RollingMaxUnavailable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.RollingMaxSurge != nil {
		{
			size, err := m.RollingMaxSurge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SessionAffinityEnabled != nil {
		{
			size, err := m.SessionAffinityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Adapters != nil {
		{
			size, err := m.Adapters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ReplicaCount != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReplicaCount))
		i--
		dAtA[i] = 0x40
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x32
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Cpu != nil {
		{
			size, err := m.Cpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AutoscaleMin != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMin))
		i--
		dAtA[i] = 0x18
	}
	if m.AutoscaleMax != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMax))
		i--
		dAtA[i] = 0x10
	}
	if m.AutoscaleEnabled != nil {
		{
			size, err := m.AutoscaleEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MixerTelemetryConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixerTelemetryConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixerTelemetryConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityTermLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityTermLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.ReportBatchMaxEntries != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReportBatchMaxEntries))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.ReportBatchMaxTime) > 0 {
		i -= len(m.ReportBatchMaxTime)
		copy(dAtA[i:], m.ReportBatchMaxTime)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ReportBatchMaxTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.UseMCP != nil {
		{
			size, err := m.UseMCP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.RollingMaxUnavailable) > 0 {
		i -= len(m.RollingMaxUnavailable)
		copy(dAtA[i:], m.RollingMaxUnavailable)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.RollingMaxUnavailable)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.RollingMaxSurge) > 0 {
		i -= len(m.RollingMaxSurge)
		copy(dAtA[i:], m.RollingMaxSurge)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.RollingMaxSurge)))
		i--
		dAtA[i] = 0x7a
	}
	if m.SessionAffinityEnabled != nil {
		{
			size, err := m.SessionAffinityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ReplicaCount != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReplicaCount))
		i--
		dAtA[i] = 0x60
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Loadshedding != nil {
		{
			size, err := m.Loadshedding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x42
	}
	if m.Env != nil {
		{
			size, err := m.Env.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Cpu != nil {
		{
			size, err := m.Cpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AutoscaleMin != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMin))
		i--
		dAtA[i] = 0x20
	}
	if m.AutoscaleMax != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMax))
		i--
		dAtA[i] = 0x18
	}
	if m.AutoscaleEnabled != nil {
		{
			size, err := m.AutoscaleEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MultiClusterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiClusterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiClusterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutboundTrafficPolicyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundTrafficPolicyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundTrafficPolicyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mode != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *PilotConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PilotConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PilotConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.Plugins) > 0 {
		for iNdEx := len(m.Plugins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Plugins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.JwksResolverExtraRootCA) > 0 {
		i -= len(m.JwksResolverExtraRootCA)
		copy(dAtA[i:], m.JwksResolverExtraRootCA)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.JwksResolverExtraRootCA)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.ConfigSource != nil {
		{
			size, err := m.ConfigSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.EnableProtocolSniffingForInbound != nil {
		{
			size, err := m.EnableProtocolSniffingForInbound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.EnableProtocolSniffingForOutbound != nil {
		{
			size, err := m.EnableProtocolSniffingForOutbound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.AppNamespaces) > 0 {
		for iNdEx := len(m.AppNamespaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppNamespaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.RollingMaxUnavailable != nil {
		{
			size, err := m.RollingMaxUnavailable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.RollingMaxSurge != nil {
		{
			size, err := m.RollingMaxSurge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.Env != nil {
		{
			size, err := m.Env.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.UseMCP != nil {
		{
			size, err := m.UseMCP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Ingress != nil {
		{
			size, err := m.Ingress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.ConfigMap != nil {
		{
			size, err := m.ConfigMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityTermLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityTermLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.DeploymentLabels != nil {
		{
			size, err := m.DeploymentLabels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.KeepaliveMaxServerConnectionAge != nil {
		{
			size, err := m.KeepaliveMaxServerConnectionAge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Cpu != nil {
		{
			size, err := m.Cpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ConfigNamespace) > 0 {
		i -= len(m.ConfigNamespace)
		copy(dAtA[i:], m.ConfigNamespace)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ConfigNamespace)))
		i--
		dAtA[i] = 0x52
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TraceSampling != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TraceSampling))))
		i--
		dAtA[i] = 0x41
	}
	if m.Sidecar != nil {
		{
			size, err := m.Sidecar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x32
	}
	if m.ReplicaCount != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReplicaCount))
		i--
		dAtA[i] = 0x28
	}
	if m.AutoscaleMax != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMax))
		i--
		dAtA[i] = 0x20
	}
	if m.AutoscaleMin != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AutoscaleMin))
		i--
		dAtA[i] = 0x18
	}
	if m.AutoscaleEnabled != nil {
		{
			size, err := m.AutoscaleEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PilotIngressConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PilotIngressConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PilotIngressConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IngressClass) > 0 {
		i -= len(m.IngressClass)
		copy(dAtA[i:], m.IngressClass)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.IngressClass)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IngressControllerMode != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.IngressControllerMode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IngressService) > 0 {
		i -= len(m.IngressService)
		copy(dAtA[i:], m.IngressService)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.IngressService)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PilotPolicyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PilotPolicyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PilotPolicyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TelemetryConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetryConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.V2 != nil {
		{
			size, err := m.V2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.V1 != nil {
		{
			size, err := m.V1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TelemetryV1Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryV1Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetryV1Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TelemetryV2Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryV2Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetryV2Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MetadataExchange != nil {
		{
			size, err := m.MetadataExchange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Stackdriver != nil {
		{
			size, err := m.Stackdriver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Prometheus != nil {
		{
			size, err := m.Prometheus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TelemetryV2MetadataExchangeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryV2MetadataExchangeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetryV2MetadataExchangeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WasmEnabled != nil {
		{
			size, err := m.WasmEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TelemetryV2PrometheusConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryV2PrometheusConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetryV2PrometheusConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WasmEnabled != nil {
		{
			size, err := m.WasmEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TelemetryV2StackDriverConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryV2StackDriverConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetryV2StackDriverConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DisableOutbound != nil {
		{
			size, err := m.DisableOutbound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ConfigOverride != nil {
		{
			size, err := m.ConfigOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Topology != nil {
		{
			size, err := m.Topology.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Logging != nil {
		{
			size, err := m.Logging.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PilotConfigSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PilotConfigSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PilotConfigSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubscribedResources) > 0 {
		for iNdEx := len(m.SubscribedResources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubscribedResources[iNdEx])
			copy(dAtA[i:], m.SubscribedResources[iNdEx])
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.SubscribedResources[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PortsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetPort != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.TargetPort))
		i--
		dAtA[i] = 0x20
	}
	if m.NodePort != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.NodePort))
		i--
		dAtA[i] = 0x18
	}
	if m.Port != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrometheusConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrometheusConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrometheusConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProvisionPrometheusCert != nil {
		{
			size, err := m.ProvisionPrometheusCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Datasources) > 0 {
		for iNdEx := len(m.Datasources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datasources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityTermLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityTermLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Security != nil {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ContextPath) > 0 {
		i -= len(m.ContextPath)
		copy(dAtA[i:], m.ContextPath)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ContextPath)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ScrapeInterval != nil {
		{
			size, err := m.ScrapeInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Retention) > 0 {
		i -= len(m.Retention)
		copy(dAtA[i:], m.Retention)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Retention)))
		i--
		dAtA[i] = 0x32
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReplicaCount != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReplicaCount))
		i--
		dAtA[i] = 0x18
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreatePrometheusResource != nil {
		{
			size, err := m.CreatePrometheusResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrometheusMixerAdapterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrometheusMixerAdapterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrometheusMixerAdapterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MetricsExpiryDuration != nil {
		{
			size, err := m.MetricsExpiryDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrometheusSecurityConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrometheusSecurityConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrometheusSecurityConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrometheusServiceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrometheusServiceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrometheusServiceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodePort != nil {
		{
			size, err := m.NodePort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Annotations != nil {
		{
			size, err := m.Annotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrometheusServiceNodePortConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrometheusServiceNodePortConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrometheusServiceNodePortConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Port != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProxyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Lifecycle != nil {
		{
			size, err := m.Lifecycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.OutlierLogPath) > 0 {
		i -= len(m.OutlierLogPath)
		copy(dAtA[i:], m.OutlierLogPath)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.OutlierLogPath)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.EnableCoreDumpImage) > 0 {
		i -= len(m.EnableCoreDumpImage)
		copy(dAtA[i:], m.EnableCoreDumpImage)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.EnableCoreDumpImage)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.ParentShutdownDuration != nil {
		{
			size, err := m.ParentShutdownDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.ConnectTimeout) > 0 {
		i -= len(m.ConnectTimeout)
		copy(dAtA[i:], m.ConnectTimeout)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ConnectTimeout)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.DrainDuration != nil {
		{
			size, err := m.DrainDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.ExcludeOutboundPorts) > 0 {
		i -= len(m.ExcludeOutboundPorts)
		copy(dAtA[i:], m.ExcludeOutboundPorts)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ExcludeOutboundPorts)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.EnvoyAccessLogService != nil {
		{
			size, err := m.EnvoyAccessLogService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.ProtocolDetectionTimeout) > 0 {
		i -= len(m.ProtocolDetectionTimeout)
		copy(dAtA[i:], m.ProtocolDetectionTimeout)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ProtocolDetectionTimeout)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Tracer != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Tracer))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.StatusPort != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.StatusPort))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.ReadinessFailureThreshold != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReadinessFailureThreshold))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.ReadinessPeriodSeconds != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReadinessPeriodSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ReadinessInitialDelaySeconds != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReadinessInitialDelaySeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Privileged != nil {
		{
			size, err := m.Privileged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.LogLevel) > 0 {
		i -= len(m.LogLevel)
		copy(dAtA[i:], m.LogLevel)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.LogLevel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.IncludeIPRanges) > 0 {
		i -= len(m.IncludeIPRanges)
		copy(dAtA[i:], m.IncludeIPRanges)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.IncludeIPRanges)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ExcludeIPRanges) > 0 {
		i -= len(m.ExcludeIPRanges)
		copy(dAtA[i:], m.ExcludeIPRanges)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ExcludeIPRanges)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ExcludeInboundPorts) > 0 {
		i -= len(m.ExcludeInboundPorts)
		copy(dAtA[i:], m.ExcludeInboundPorts)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ExcludeInboundPorts)))
		i--
		dAtA[i] = 0x62
	}
	if m.EnvoyStatsd != nil {
		{
			size, err := m.EnvoyStatsd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.EnvoyMetricsService != nil {
		{
			size, err := m.EnvoyMetricsService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.EnableCoreDump != nil {
		{
			size, err := m.EnableCoreDump.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Concurrency != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Concurrency))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ComponentLogLevel) > 0 {
		i -= len(m.ComponentLogLevel)
		copy(dAtA[i:], m.ComponentLogLevel)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ComponentLogLevel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterDomain) > 0 {
		i -= len(m.ClusterDomain)
		copy(dAtA[i:], m.ClusterDomain)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ClusterDomain)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AutoInject) > 0 {
		i -= len(m.AutoInject)
		copy(dAtA[i:], m.AutoInject)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.AutoInject)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccessLogEncoding != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.AccessLogEncoding))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AccessLogFormat) > 0 {
		i -= len(m.AccessLogFormat)
		copy(dAtA[i:], m.AccessLogFormat)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.AccessLogFormat)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessLogFile) > 0 {
		i -= len(m.AccessLogFile)
		copy(dAtA[i:], m.AccessLogFile)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.AccessLogFile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnvoyAccessLogConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvoyAccessLogConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvoyAccessLogConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TcpKeepalive != nil {
		{
			size, err := m.TcpKeepalive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TlsSettings != nil {
		{
			size, err := m.TlsSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnvoyAccessLogtlsSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvoyAccessLogtlsSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvoyAccessLogtlsSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubjectAltNames) > 0 {
		for iNdEx := len(m.SubjectAltNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectAltNames[iNdEx])
			copy(dAtA[i:], m.SubjectAltNames[iNdEx])
			i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.SubjectAltNames[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Sni) > 0 {
		i -= len(m.Sni)
		copy(dAtA[i:], m.Sni)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Sni)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CaCertificates) > 0 {
		i -= len(m.CaCertificates)
		copy(dAtA[i:], m.CaCertificates)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CaCertificates)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientCertificate) > 0 {
		i -= len(m.ClientCertificate)
		copy(dAtA[i:], m.ClientCertificate)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ClientCertificate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProxyInitConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyInitConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyInitConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourcesRequestsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourcesRequestsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourcesRequestsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Memory) > 0 {
		i -= len(m.Memory)
		copy(dAtA[i:], m.Memory)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Memory)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cpu) > 0 {
		i -= len(m.Cpu)
		copy(dAtA[i:], m.Cpu)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Cpu)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SDSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SDSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UseTrustworthyJwt != nil {
		{
			size, err := m.UseTrustworthyJwt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UseNormalJwt != nil {
		{
			size, err := m.UseNormalJwt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UdsPath) > 0 {
		i -= len(m.UdsPath)
		copy(dAtA[i:], m.UdsPath)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.UdsPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecretVolume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretVolume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretVolume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SecretName) > 0 {
		i -= len(m.SecretName)
		copy(dAtA[i:], m.SecretName)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.SecretName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MountPath) > 0 {
		i -= len(m.MountPath)
		copy(dAtA[i:], m.MountPath)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.MountPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExternalPort != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ExternalPort))
		i--
		dAtA[i] = 0x10
	}
	if m.Annotations != nil {
		{
			size, err := m.Annotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SidecarInjectorConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SidecarInjectorConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SidecarInjectorConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ObjectSelector != nil {
		{
			size, err := m.ObjectSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.InjectedAnnotations != nil {
		{
			size, err := m.InjectedAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.InjectLabel) > 0 {
		i -= len(m.InjectLabel)
		copy(dAtA[i:], m.InjectLabel)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.InjectLabel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.RewriteAppHTTPProbe != nil {
		{
			size, err := m.RewriteAppHTTPProbe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.AlwaysInjectSelector) > 0 {
		for iNdEx := len(m.AlwaysInjectSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlwaysInjectSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.NeverInjectSelector) > 0 {
		for iNdEx := len(m.NeverInjectSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NeverInjectSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.EnableNamespacesByDefault != nil {
		{
			size, err := m.EnableNamespacesByDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *StdioMixerAdapterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdioMixerAdapterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdioMixerAdapterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutputAsJson != nil {
		{
			size, err := m.OutputAsJson.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StackdriverMixerAdapterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackdriverMixerAdapterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StackdriverMixerAdapterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Logging != nil {
		{
			size, err := m.Logging.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ContextGraph != nil {
		{
			size, err := m.ContextGraph.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Tracer != nil {
		{
			size, err := m.Tracer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StackdriverMixerAdapterConfig_EnabledConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackdriverMixerAdapterConfig_EnabledConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StackdriverMixerAdapterConfig_EnabledConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StackdriverAuthConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackdriverAuthConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StackdriverAuthConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceAccountPath) > 0 {
		i -= len(m.ServiceAccountPath)
		copy(dAtA[i:], m.ServiceAccountPath)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ServiceAccountPath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppCredentials != nil {
		{
			size, err := m.AppCredentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StackdriverTracerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackdriverTracerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StackdriverTracerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SampleProbability != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.SampleProbability))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StackdriverContextGraph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackdriverContextGraph) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StackdriverContextGraph) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stackdriver != nil {
		{
			size, err := m.Stackdriver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Zipkin != nil {
		{
			size, err := m.Zipkin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Lightstep != nil {
		{
			size, err := m.Lightstep.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Datadog != nil {
		{
			size, err := m.Datadog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracerDatadogConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracerDatadogConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracerDatadogConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracerLightStepConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracerLightStepConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracerLightStepConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Secure != nil {
		{
			size, err := m.Secure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CacertPath) > 0 {
		i -= len(m.CacertPath)
		copy(dAtA[i:], m.CacertPath)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CacertPath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracerZipkinConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracerZipkinConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracerZipkinConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracerStackdriverConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracerStackdriverConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracerStackdriverConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxNumberOfMessageEvents != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.MaxNumberOfMessageEvents))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxNumberOfAnnotations != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.MaxNumberOfAnnotations))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxNumberOfAttributes != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.MaxNumberOfAttributes))
		i--
		dAtA[i] = 0x10
	}
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityTermLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityTermLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.ContextPath) > 0 {
		i -= len(m.ContextPath)
		copy(dAtA[i:], m.ContextPath)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ContextPath)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Opencensus != nil {
		{
			size, err := m.Opencensus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Zipkin != nil {
		{
			size, err := m.Zipkin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Jaeger != nil {
		{
			size, err := m.Jaeger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracingOpencensusConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracingOpencensusConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracingOpencensusConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Exporters != nil {
		{
			size, err := m.Exporters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracingOpencensusExportersConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracingOpencensusExportersConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracingOpencensusExportersConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stackdriver != nil {
		{
			size, err := m.Stackdriver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracingJaegerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracingJaegerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracingJaegerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x52
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.AccessMode) > 0 {
		i -= len(m.AccessMode)
		copy(dAtA[i:], m.AccessMode)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.AccessMode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StorageClassName) > 0 {
		i -= len(m.StorageClassName)
		copy(dAtA[i:], m.StorageClassName)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.StorageClassName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Persist != nil {
		{
			size, err := m.Persist.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SpanStorageType) > 0 {
		i -= len(m.SpanStorageType)
		copy(dAtA[i:], m.SpanStorageType)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.SpanStorageType)))
		i--
		dAtA[i] = 0x22
	}
	if m.Memory != nil {
		{
			size, err := m.Memory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracingJaegerMemoryConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracingJaegerMemoryConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracingJaegerMemoryConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxTraces != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.MaxTraces))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TracingZipkinConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracingZipkinConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracingZipkinConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LivenessProbeStartupDelay != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.LivenessProbeStartupDelay))
		i--
		dAtA[i] = 0x58
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.MaxSpans != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.MaxSpans))
		i--
		dAtA[i] = 0x38
	}
	if m.JavaOptsHeap != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.JavaOptsHeap))
		i--
		dAtA[i] = 0x30
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.QueryPort != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.QueryPort))
		i--
		dAtA[i] = 0x20
	}
	if m.ProbeStartupDelay != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ProbeStartupDelay))
		i--
		dAtA[i] = 0x18
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracingZipkinNodeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracingZipkinNodeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracingZipkinNodeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cpus != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.Cpus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KialiSecurityConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KialiSecurityConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KialiSecurityConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrivateKeyFile) > 0 {
		i -= len(m.PrivateKeyFile)
		copy(dAtA[i:], m.PrivateKeyFile)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PrivateKeyFile)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CertFile) > 0 {
		i -= len(m.CertFile)
		copy(dAtA[i:], m.CertFile)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.CertFile)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KialiServiceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KialiServiceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KialiServiceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Annotations != nil {
		{
			size, err := m.Annotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KialiDashboardConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KialiDashboardConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KialiDashboardConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JaegerInClusterURL) > 0 {
		i -= len(m.JaegerInClusterURL)
		copy(dAtA[i:], m.JaegerInClusterURL)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.JaegerInClusterURL)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GrafanaInClusterURL) > 0 {
		i -= len(m.GrafanaInClusterURL)
		copy(dAtA[i:], m.GrafanaInClusterURL)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.GrafanaInClusterURL)))
		i--
		dAtA[i] = 0x42
	}
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.JaegerURL) > 0 {
		i -= len(m.JaegerURL)
		copy(dAtA[i:], m.JaegerURL)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.JaegerURL)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GrafanaURL) > 0 {
		i -= len(m.GrafanaURL)
		copy(dAtA[i:], m.GrafanaURL)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.GrafanaURL)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ViewOnlyMode != nil {
		{
			size, err := m.ViewOnlyMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PassphraseKey) > 0 {
		i -= len(m.PassphraseKey)
		copy(dAtA[i:], m.PassphraseKey)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PassphraseKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UsernameKey) > 0 {
		i -= len(m.UsernameKey)
		copy(dAtA[i:], m.UsernameKey)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.UsernameKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SecretName) > 0 {
		i -= len(m.SecretName)
		copy(dAtA[i:], m.SecretName)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.SecretName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KialiConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KialiConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KialiConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.PrometheusAddr) > 0 {
		i -= len(m.PrometheusAddr)
		copy(dAtA[i:], m.PrometheusAddr)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PrometheusAddr)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ContextPath) > 0 {
		i -= len(m.ContextPath)
		copy(dAtA[i:], m.ContextPath)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.ContextPath)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityTermLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityTermLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for iNdEx := len(m.PodAntiAffinityLabelSelector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodAntiAffinityLabelSelector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValuesTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.PodAnnotations != nil {
		{
			size, err := m.PodAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Dashboard != nil {
		{
			size, err := m.Dashboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Security != nil {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PrometheusNamespace) > 0 {
		i -= len(m.PrometheusNamespace)
		copy(dAtA[i:], m.PrometheusNamespace)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.PrometheusNamespace)))
		i--
		dAtA[i] = 0x32
	}
	if m.ReplicaCount != 0 {
		i = encodeVarintValuesTypes(dAtA, i, uint64(m.ReplicaCount))
		i--
		dAtA[i] = 0x28
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hub) > 0 {
		i -= len(m.Hub)
		copy(dAtA[i:], m.Hub)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Hub)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreateDemoSecret != nil {
		{
			size, err := m.CreateDemoSecret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Values) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Values) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Values) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MeshConfig != nil {
		{
			size, err := m.MeshConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.Telemetry != nil {
		{
			size, err := m.Telemetry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.Revision) > 0 {
		i -= len(m.Revision)
		copy(dAtA[i:], m.Revision)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Revision)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Kustomize != nil {
		{
			size, err := m.Kustomize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.IstioCni != nil {
		{
			size, err := m.IstioCni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.PrometheusOperator != nil {
		{
			size, err := m.PrometheusOperator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ClusterResources != nil {
		{
			size, err := m.ClusterResources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Kiali != nil {
		{
			size, err := m.Kiali.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Tracing != nil {
		{
			size, err := m.Tracing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.SidecarInjectorWebhook != nil {
		{
			size, err := m.SidecarInjectorWebhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Prometheus != nil {
		{
			size, err := m.Prometheus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Pilot != nil {
		{
			size, err := m.Pilot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Mixer != nil {
		{
			size, err := m.Mixer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Grafana != nil {
		{
			size, err := m.Grafana.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Global != nil {
		{
			size, err := m.Global.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Gateways != nil {
		{
			size, err := m.Gateways.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Istiocoredns != nil {
		{
			size, err := m.Istiocoredns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cni != nil {
		{
			size, err := m.Cni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ZeroVPNConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroVPNConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroVPNConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Suffix) > 0 {
		i -= len(m.Suffix)
		copy(dAtA[i:], m.Suffix)
		i = encodeVarintValuesTypes(dAtA, i, uint64(len(m.Suffix)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValuesTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValuesTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovValuesTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ArchConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amd64 != 0 {
		n += 1 + sovValuesTypes(uint64(m.Amd64))
	}
	if m.Ppc64Le != 0 {
		n += 1 + sovValuesTypes(uint64(m.Ppc64Le))
	}
	if m.S390X != 0 {
		n += 1 + sovValuesTypes(uint64(m.S390X))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CNIConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Hub)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.PullPolicy)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CniBinDir)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CniConfDir)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CniConfFileName)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.ExcludeNamespaces) > 0 {
		for _, s := range m.ExcludeNamespaces {
			l = len(s)
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.PspClusterRole)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.LogLevel)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Repair != nil {
		l = m.Repair.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Chained != nil {
		l = m.Chained.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CNIRepairConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Hub)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.LabelPods {
		n += 2
	}
	l = len(m.CreateEvents)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.DeletePods {
		n += 2
	}
	l = len(m.BrokenPodLabelKey)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.BrokenPodLabelValue)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.InitContainerName)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPUTargetUtilizationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetAverageUtilization != 0 {
		n += 1 + sovValuesTypes(uint64(m.TargetAverageUtilization))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for k, v := range m.Limits {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovValuesTypes(uint64(len(k))) + 1 + len(v) + sovValuesTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovValuesTypes(uint64(mapEntrySize))
		}
	}
	if len(m.Requests) > 0 {
		for k, v := range m.Requests {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovValuesTypes(uint64(len(k))) + 1 + len(v) + sovValuesTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovValuesTypes(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoreDNSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CoreDNSImage)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CoreDNSTag)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CoreDNSPluginImage)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ReplicaCount != 0 {
		n += 1 + sovValuesTypes(uint64(m.ReplicaCount))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.RollingMaxSurge != nil {
		l = m.RollingMaxSurge.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.RollingMaxUnavailable != nil {
		l = m.RollingMaxUnavailable.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityTermLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefaultPodDisruptionBudgetConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefaultResourcesConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Requests != nil {
		l = m.Requests.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EgressGatewayConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoscaleEnabled != nil {
		l = m.AutoscaleEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.AutoscaleMax != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMax))
	}
	if m.AutoscaleMin != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMin))
	}
	l = len(m.ConnectTimeout)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Cpu != nil {
		l = m.Cpu.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.DrainDuration != nil {
		l = m.DrainDuration.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Env != nil {
		l = m.Env.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityTermLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.SecretVolumes) > 0 {
		for _, e := range m.SecretVolumes {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.ServiceAnnotations != nil {
		l = m.ServiceAnnotations.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Zvpn != nil {
		l = m.Zvpn.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.RollingMaxSurge != nil {
		l = m.RollingMaxSurge.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.RollingMaxUnavailable != nil {
		l = m.RollingMaxUnavailable.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.ConfigVolumes) > 0 {
		for _, e := range m.ConfigVolumes {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.AdditionalContainers) > 0 {
		for _, e := range m.AdditionalContainers {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnvoyMetricsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovValuesTypes(uint64(m.Port))
	}
	if m.TlsSettings != nil {
		l = m.TlsSettings.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.TcpKeepalive != nil {
		l = m.TcpKeepalive.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GatewayLabelsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Istio)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GatewaysConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IstioEgressgateway != nil {
		l = m.IstioEgressgateway.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.IstioIngressgateway != nil {
		l = m.IstioIngressgateway.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arch != nil {
		l = m.Arch.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ConfigNamespace)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ConfigValidation != nil {
		l = m.ConfigValidation.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ControlPlaneSecurityEnabled != nil {
		l = m.ControlPlaneSecurityEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.DefaultNodeSelector != nil {
		l = m.DefaultNodeSelector.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.DefaultPodDisruptionBudget != nil {
		l = m.DefaultPodDisruptionBudget.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.DisablePolicyChecks != nil {
		l = m.DisablePolicyChecks.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.DefaultResources != nil {
		l = m.DefaultResources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.EnableHelmTest != nil {
		l = m.EnableHelmTest.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.EnableTracing != nil {
		l = m.EnableTracing.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Hub)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ImagePullPolicy)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.IstioNamespace)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.LocalityLbSetting != nil {
		l = m.LocalityLbSetting.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Logging != nil {
		l = m.Logging.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.MeshExpansion != nil {
		l = m.MeshExpansion.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.MeshNetworks != nil {
		l = m.MeshNetworks.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.MonitoringPort != 0 {
		n += 2 + sovValuesTypes(uint64(m.MonitoringPort))
	}
	if m.Mtls != nil {
		l = m.Mtls.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.MultiCluster != nil {
		l = m.MultiCluster.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.OneNamespace != nil {
		l = m.OneNamespace.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.OutboundTrafficPolicy != nil {
		l = m.OutboundTrafficPolicy.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.PolicyCheckFailOpen != nil {
		l = m.PolicyCheckFailOpen.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.PolicyNamespace)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.PriorityClassName)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Proxy != nil {
		l = m.Proxy.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.ProxyInit != nil {
		l = m.ProxyInit.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Sds != nil {
		l = m.Sds.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.TelemetryNamespace)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Tracer != nil {
		l = m.Tracer.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.TrustDomain)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.UseMCP != nil {
		l = m.UseMCP.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.LogAsJson != nil {
		l = m.LogAsJson.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.ImagePullSecrets) > 0 {
		for _, s := range m.ImagePullSecrets {
			l = len(s)
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.OmitSidecarInjectorConfigMap != nil {
		l = m.OmitSidecarInjectorConfigMap.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.OperatorManageWebhooks != nil {
		l = m.OperatorManageWebhooks.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.TrustDomainAliases) > 0 {
		for _, s := range m.TrustDomainAliases {
			l = len(s)
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodDNSSearchNamespaces) > 0 {
		for _, s := range m.PodDNSSearchNamespaces {
			l = len(s)
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.IstioRemote != nil {
		l = m.IstioRemote.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.CreateRemoteSvcEndpoints != nil {
		l = m.CreateRemoteSvcEndpoints.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.RemotePilotCreateSvcEndpoint != nil {
		l = m.RemotePilotCreateSvcEndpoint.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.RemotePolicyAddress)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.RemotePilotAddress)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.RemoteTelemetryAddress)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ConfigRootNamespace)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.PrometheusNamespace)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.DefaultConfigVisibilitySettings) > 0 {
		for _, s := range m.DefaultConfigVisibilitySettings {
			l = len(s)
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	l = len(m.MeshID)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Istiod != nil {
		l = m.Istiod.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.DefaultTolerations) > 0 {
		for _, e := range m.DefaultTolerations {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	l = len(m.PilotCertProvider)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.JwtPolicy)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Sts != nil {
		l = m.Sts.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.MountMtlsCerts != nil {
		l = m.MountMtlsCerts.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CaAddress)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *STSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePort != 0 {
		n += 1 + sovValuesTypes(uint64(m.ServicePort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IstiodConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.EnableAnalysis != nil {
		l = m.EnableAnalysis.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalLoggingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IngressGatewayConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoscaleEnabled != nil {
		l = m.AutoscaleEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.AutoscaleMax != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMax))
	}
	if m.AutoscaleMin != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMin))
	}
	l = len(m.ConnectTimeout)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Cpu != nil {
		l = m.Cpu.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.CustomService != nil {
		l = m.CustomService.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Debug)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.DrainDuration != nil {
		l = m.DrainDuration.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Env != nil {
		l = m.Env.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.ExternalIPs) > 0 {
		for _, s := range m.ExternalIPs {
			l = len(s)
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.K8SIngress != nil {
		l = m.K8SIngress.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.K8SIngressHttps != nil {
		l = m.K8SIngressHttps.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.LoadBalancerIP)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.LoadBalancerSourceRanges) > 0 {
		for _, s := range m.LoadBalancerSourceRanges {
			l = len(s)
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.MeshExpansionPorts) > 0 {
		for _, e := range m.MeshExpansionPorts {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityLabelSelector {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityTermLabelSelector {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.ReplicaCount != 0 {
		n += 2 + sovValuesTypes(uint64(m.ReplicaCount))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Sds != nil {
		l = m.Sds.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.SecretVolumes) > 0 {
		for _, e := range m.SecretVolumes {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.ServiceAnnotations != nil {
		l = m.ServiceAnnotations.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Zvpn != nil {
		l = m.Zvpn.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.RollingMaxSurge != nil {
		l = m.RollingMaxSurge.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.RollingMaxUnavailable != nil {
		l = m.RollingMaxUnavailable.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ApplicationPorts)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ExternalTrafficPolicy)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.IngressPorts) > 0 {
		for _, e := range m.IngressPorts {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.AdditionalContainers) > 0 {
		for _, e := range m.AdditionalContainers {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.ConfigVolumes) > 0 {
		for _, e := range m.ConfigVolumes {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.Certificates != nil {
		l = m.Certificates.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Tls != nil {
		l = m.Tls.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.TelemetryAddonGateways != nil {
		l = m.TelemetryAddonGateways.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.Hosts) > 0 {
		for _, e := range m.Hosts {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	l = len(m.TelemetryDomainName)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IngressGatewaySdsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IngressGatewayZvpnConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KubernetesEnvMixerAdapterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadSheddingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LatencyThreshold)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovValuesTypes(uint64(m.Mode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MTLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Auto != nil {
		l = m.Auto.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshExpansionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.UseILB != nil {
		l = m.UseILB.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixerTelemetryAdaptersConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kubernetesenv != nil {
		l = m.Kubernetesenv.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Prometheus != nil {
		l = m.Prometheus.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Stdio != nil {
		l = m.Stdio.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Stackdriver != nil {
		l = m.Stackdriver.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.UseAdapterCRDs != nil {
		l = m.UseAdapterCRDs.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixerPolicyAdaptersConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kubernetesenv != nil {
		l = m.Kubernetesenv.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Prometheus != nil {
		l = m.Prometheus.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Stdio != nil {
		l = m.Stdio.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Stackdriver != nil {
		l = m.Stackdriver.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.UseAdapterCRDs != nil {
		l = m.UseAdapterCRDs.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Telemetry != nil {
		l = m.Telemetry.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Adapters != nil {
		l = m.Adapters.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixerPolicyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoscaleEnabled != nil {
		l = m.AutoscaleEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.AutoscaleMax != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMax))
	}
	if m.AutoscaleMin != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMin))
	}
	if m.Cpu != nil {
		l = m.Cpu.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ReplicaCount != 0 {
		n += 1 + sovValuesTypes(uint64(m.ReplicaCount))
	}
	if m.Adapters != nil {
		l = m.Adapters.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.SessionAffinityEnabled != nil {
		l = m.SessionAffinityEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.RollingMaxSurge != nil {
		l = m.RollingMaxSurge.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.RollingMaxUnavailable != nil {
		l = m.RollingMaxUnavailable.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityTermLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Env != nil {
		l = m.Env.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	l = len(m.Hub)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixerTelemetryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoscaleEnabled != nil {
		l = m.AutoscaleEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.AutoscaleMax != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMax))
	}
	if m.AutoscaleMin != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMin))
	}
	if m.Cpu != nil {
		l = m.Cpu.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Env != nil {
		l = m.Env.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Loadshedding != nil {
		l = m.Loadshedding.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ReplicaCount != 0 {
		n += 1 + sovValuesTypes(uint64(m.ReplicaCount))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.SessionAffinityEnabled != nil {
		l = m.SessionAffinityEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.RollingMaxSurge)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.RollingMaxUnavailable)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.UseMCP != nil {
		l = m.UseMCP.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ReportBatchMaxTime)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.ReportBatchMaxEntries != 0 {
		n += 2 + sovValuesTypes(uint64(m.ReportBatchMaxEntries))
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityLabelSelector {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityTermLabelSelector {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	l = len(m.Hub)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiClusterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OutboundTrafficPolicyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovValuesTypes(uint64(m.Mode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PilotConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.AutoscaleEnabled != nil {
		l = m.AutoscaleEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.AutoscaleMin != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMin))
	}
	if m.AutoscaleMax != 0 {
		n += 1 + sovValuesTypes(uint64(m.AutoscaleMax))
	}
	if m.ReplicaCount != 0 {
		n += 1 + sovValuesTypes(uint64(m.ReplicaCount))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Sidecar != nil {
		l = m.Sidecar.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.TraceSampling != 0 {
		n += 9
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ConfigNamespace)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Cpu != nil {
		l = m.Cpu.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.KeepaliveMaxServerConnectionAge != nil {
		l = m.KeepaliveMaxServerConnectionAge.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.DeploymentLabels != nil {
		l = m.DeploymentLabels.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityLabelSelector {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityTermLabelSelector {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.ConfigMap != nil {
		l = m.ConfigMap.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Ingress != nil {
		l = m.Ingress.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.UseMCP != nil {
		l = m.UseMCP.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Env != nil {
		l = m.Env.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.RollingMaxSurge != nil {
		l = m.RollingMaxSurge.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.RollingMaxUnavailable != nil {
		l = m.RollingMaxUnavailable.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.AppNamespaces) > 0 {
		for _, e := range m.AppNamespaces {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.EnableProtocolSniffingForOutbound != nil {
		l = m.EnableProtocolSniffingForOutbound.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.EnableProtocolSniffingForInbound != nil {
		l = m.EnableProtocolSniffingForInbound.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.ConfigSource != nil {
		l = m.ConfigSource.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.JwksResolverExtraRootCA)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.Plugins) > 0 {
		for _, e := range m.Plugins {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	l = len(m.Hub)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PilotIngressConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IngressService)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.IngressControllerMode != 0 {
		n += 1 + sovValuesTypes(uint64(m.IngressControllerMode))
	}
	l = len(m.IngressClass)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PilotPolicyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.V1 != nil {
		l = m.V1.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.V2 != nil {
		l = m.V2.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetryV1Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetryV2Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Prometheus != nil {
		l = m.Prometheus.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Stackdriver != nil {
		l = m.Stackdriver.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.MetadataExchange != nil {
		l = m.MetadataExchange.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetryV2MetadataExchangeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WasmEnabled != nil {
		l = m.WasmEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetryV2PrometheusConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.WasmEnabled != nil {
		l = m.WasmEnabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetryV2StackDriverConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Logging != nil {
		l = m.Logging.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Topology != nil {
		l = m.Topology.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ConfigOverride != nil {
		l = m.ConfigOverride.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.DisableOutbound != nil {
		l = m.DisableOutbound.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PilotConfigSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubscribedResources) > 0 {
		for _, s := range m.SubscribedResources {
			l = len(s)
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PortsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovValuesTypes(uint64(m.Port))
	}
	if m.NodePort != 0 {
		n += 1 + sovValuesTypes(uint64(m.NodePort))
	}
	if m.TargetPort != 0 {
		n += 1 + sovValuesTypes(uint64(m.TargetPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrometheusConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatePrometheusResource != nil {
		l = m.CreatePrometheusResource.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ReplicaCount != 0 {
		n += 1 + sovValuesTypes(uint64(m.ReplicaCount))
	}
	l = len(m.Hub)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Retention)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ScrapeInterval != nil {
		l = m.ScrapeInterval.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ContextPath)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityTermLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if len(m.Datasources) > 0 {
		for _, e := range m.Datasources {
			l = e.Size()
			n += 2 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.ProvisionPrometheusCert != nil {
		l = m.ProvisionPrometheusCert.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrometheusMixerAdapterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.MetricsExpiryDuration != nil {
		l = m.MetricsExpiryDuration.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrometheusSecurityConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrometheusServiceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.NodePort != nil {
		l = m.NodePort.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrometheusServiceNodePortConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovValuesTypes(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProxyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessLogFile)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.AccessLogFormat)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.AccessLogEncoding != 0 {
		n += 1 + sovValuesTypes(uint64(m.AccessLogEncoding))
	}
	l = len(m.AutoInject)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ClusterDomain)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ComponentLogLevel)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Concurrency != 0 {
		n += 1 + sovValuesTypes(uint64(m.Concurrency))
	}
	if m.EnableCoreDump != nil {
		l = m.EnableCoreDump.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.EnvoyMetricsService != nil {
		l = m.EnvoyMetricsService.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.EnvoyStatsd != nil {
		l = m.EnvoyStatsd.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ExcludeInboundPorts)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ExcludeIPRanges)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.IncludeIPRanges)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.LogLevel)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Privileged != nil {
		l = m.Privileged.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.ReadinessInitialDelaySeconds != 0 {
		n += 2 + sovValuesTypes(uint64(m.ReadinessInitialDelaySeconds))
	}
	if m.ReadinessPeriodSeconds != 0 {
		n += 2 + sovValuesTypes(uint64(m.ReadinessPeriodSeconds))
	}
	if m.ReadinessFailureThreshold != 0 {
		n += 2 + sovValuesTypes(uint64(m.ReadinessFailureThreshold))
	}
	if m.StatusPort != 0 {
		n += 2 + sovValuesTypes(uint64(m.StatusPort))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Tracer != 0 {
		n += 2 + sovValuesTypes(uint64(m.Tracer))
	}
	l = len(m.ProtocolDetectionTimeout)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.EnvoyAccessLogService != nil {
		l = m.EnvoyAccessLogService.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ExcludeOutboundPorts)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.DrainDuration != nil {
		l = m.DrainDuration.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ConnectTimeout)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.ParentShutdownDuration != nil {
		l = m.ParentShutdownDuration.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.EnableCoreDumpImage)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.OutlierLogPath)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Lifecycle != nil {
		l = m.Lifecycle.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnvoyAccessLogConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.TlsSettings != nil {
		l = m.TlsSettings.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.TcpKeepalive != nil {
		l = m.TcpKeepalive.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnvoyAccessLogtlsSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ClientCertificate)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CaCertificates)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Sni)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.SubjectAltNames) > 0 {
		for _, s := range m.SubjectAltNames {
			l = len(s)
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProxyInitConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourcesRequestsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cpu)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Memory)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SDSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.UdsPath)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.UseNormalJwt != nil {
		l = m.UseNormalJwt.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.UseTrustworthyJwt != nil {
		l = m.UseTrustworthyJwt.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecretVolume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MountPath)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.SecretName)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ExternalPort != 0 {
		n += 1 + sovValuesTypes(uint64(m.ExternalPort))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SidecarInjectorConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableNamespacesByDefault != nil {
		l = m.EnableNamespacesByDefault.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.NeverInjectSelector) > 0 {
		for _, e := range m.NeverInjectSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.AlwaysInjectSelector) > 0 {
		for _, e := range m.AlwaysInjectSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.RewriteAppHTTPProbe != nil {
		l = m.RewriteAppHTTPProbe.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.InjectLabel)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.InjectedAnnotations != nil {
		l = m.InjectedAnnotations.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.ObjectSelector != nil {
		l = m.ObjectSelector.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StdioMixerAdapterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.OutputAsJson != nil {
		l = m.OutputAsJson.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StackdriverMixerAdapterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Tracer != nil {
		l = m.Tracer.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ContextGraph != nil {
		l = m.ContextGraph.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Logging != nil {
		l = m.Logging.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StackdriverMixerAdapterConfig_EnabledConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StackdriverAuthConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppCredentials != nil {
		l = m.AppCredentials.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ServiceAccountPath)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StackdriverTracerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.SampleProbability != 0 {
		n += 1 + sovValuesTypes(uint64(m.SampleProbability))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StackdriverContextGraph) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Datadog != nil {
		l = m.Datadog.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Lightstep != nil {
		l = m.Lightstep.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Zipkin != nil {
		l = m.Zipkin.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Stackdriver != nil {
		l = m.Stackdriver.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracerDatadogConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracerLightStepConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CacertPath)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Secure != nil {
		l = m.Secure.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracerZipkinConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracerStackdriverConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.MaxNumberOfAttributes != 0 {
		n += 1 + sovValuesTypes(uint64(m.MaxNumberOfAttributes))
	}
	if m.MaxNumberOfAnnotations != 0 {
		n += 1 + sovValuesTypes(uint64(m.MaxNumberOfAnnotations))
	}
	if m.MaxNumberOfMessageEvents != 0 {
		n += 1 + sovValuesTypes(uint64(m.MaxNumberOfMessageEvents))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Jaeger != nil {
		l = m.Jaeger.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Zipkin != nil {
		l = m.Zipkin.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Opencensus != nil {
		l = m.Opencensus.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.ContextPath)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityTermLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracingOpencensusConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hub)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Exporters != nil {
		l = m.Exporters.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracingOpencensusExportersConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stackdriver != nil {
		l = m.Stackdriver.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracingJaegerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hub)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Memory != nil {
		l = m.Memory.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.SpanStorageType)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Persist != nil {
		l = m.Persist.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.StorageClassName)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.AccessMode)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracingJaegerMemoryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTraces != 0 {
		n += 1 + sovValuesTypes(uint64(m.MaxTraces))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracingZipkinConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hub)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ProbeStartupDelay != 0 {
		n += 1 + sovValuesTypes(uint64(m.ProbeStartupDelay))
	}
	if m.QueryPort != 0 {
		n += 1 + sovValuesTypes(uint64(m.QueryPort))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.JavaOptsHeap != 0 {
		n += 1 + sovValuesTypes(uint64(m.JavaOptsHeap))
	}
	if m.MaxSpans != 0 {
		n += 1 + sovValuesTypes(uint64(m.MaxSpans))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.LivenessProbeStartupDelay != 0 {
		n += 1 + sovValuesTypes(uint64(m.LivenessProbeStartupDelay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TracingZipkinNodeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cpus != 0 {
		n += 1 + sovValuesTypes(uint64(m.Cpus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KialiSecurityConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.CertFile)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.PrivateKeyFile)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KialiServiceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KialiDashboardConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecretName)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.UsernameKey)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.PassphraseKey)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ViewOnlyMode != nil {
		l = m.ViewOnlyMode.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.GrafanaURL)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.JaegerURL)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.GrafanaInClusterURL)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.JaegerInClusterURL)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KialiConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.CreateDemoSecret != nil {
		l = m.CreateDemoSecret.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Hub)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.ReplicaCount != 0 {
		n += 1 + sovValuesTypes(uint64(m.ReplicaCount))
	}
	l = len(m.PrometheusNamespace)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Dashboard != nil {
		l = m.Dashboard.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.PodAnnotations != nil {
		l = m.PodAnnotations.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if len(m.PodAntiAffinityLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.PodAntiAffinityTermLabelSelector) > 0 {
		for _, e := range m.PodAntiAffinityTermLabelSelector {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 1 + l + sovValuesTypes(uint64(l))
		}
	}
	l = len(m.ContextPath)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.PrometheusAddr)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Values) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cni != nil {
		l = m.Cni.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Istiocoredns != nil {
		l = m.Istiocoredns.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Gateways != nil {
		l = m.Gateways.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Global != nil {
		l = m.Global.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Grafana != nil {
		l = m.Grafana.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Mixer != nil {
		l = m.Mixer.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Pilot != nil {
		l = m.Pilot.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Prometheus != nil {
		l = m.Prometheus.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.SidecarInjectorWebhook != nil {
		l = m.SidecarInjectorWebhook.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Tracing != nil {
		l = m.Tracing.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.Kiali != nil {
		l = m.Kiali.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.ClusterResources != nil {
		l = m.ClusterResources.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.PrometheusOperator != nil {
		l = m.PrometheusOperator.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.IstioCni != nil {
		l = m.IstioCni.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Kustomize != nil {
		l = m.Kustomize.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.Telemetry != nil {
		l = m.Telemetry.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.MeshConfig != nil {
		l = m.MeshConfig.Size()
		n += 2 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZeroVPNConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovValuesTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovValuesTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValuesTypes(x uint64) (n int) {
	return sovValuesTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArchConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amd64", wireType)
			}
			m.Amd64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amd64 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ppc64Le", wireType)
			}
			m.Ppc64Le = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ppc64Le |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S390X", wireType)
			}
			m.S390X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.S390X |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNIConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNIConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNIConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CniBinDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CniBinDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CniConfDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CniConfDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CniConfFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CniConfFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeNamespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeNamespaces = append(m.ExcludeNamespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PspClusterRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PspClusterRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repair == nil {
				m.Repair = &CNIRepairConfig{}
			}
			if err := m.Repair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chained", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chained == nil {
				m.Chained = &types.BoolValue{}
			}
			if err := m.Chained.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNIRepairConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNIRepairConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNIRepairConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelPods", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelPods = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEvents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateEvents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletePods", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletePods = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokenPodLabelKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrokenPodLabelKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokenPodLabelValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrokenPodLabelValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPUTargetUtilizationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPUTargetUtilizationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPUTargetUtilizationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAverageUtilization", wireType)
			}
			m.TargetAverageUtilization = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetAverageUtilization |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValuesTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValuesTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthValuesTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthValuesTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValuesTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthValuesTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthValuesTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipValuesTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthValuesTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Limits[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requests == nil {
				m.Requests = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValuesTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValuesTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthValuesTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthValuesTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValuesTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthValuesTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthValuesTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipValuesTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthValuesTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Requests[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoreDNSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoreDNSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoreDNSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreDNSImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoreDNSImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreDNSTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoreDNSTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreDNSPluginImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoreDNSPluginImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &types.Struct{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxSurge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxSurge == nil {
				m.RollingMaxSurge = &types.Value{}
			}
			if err := m.RollingMaxSurge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxUnavailable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxUnavailable == nil {
				m.RollingMaxUnavailable = &types.Value{}
			}
			if err := m.RollingMaxUnavailable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityLabelSelector = append(m.PodAntiAffinityLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityLabelSelector[len(m.PodAntiAffinityLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityTermLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityTermLabelSelector = append(m.PodAntiAffinityTermLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityTermLabelSelector[len(m.PodAntiAffinityTermLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, &types.Struct{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultPodDisruptionBudgetConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultPodDisruptionBudgetConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultPodDisruptionBudgetConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultResourcesConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultResourcesConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultResourcesConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requests == nil {
				m.Requests = &ResourcesRequestsConfig{}
			}
			if err := m.Requests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EgressGatewayConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EgressGatewayConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EgressGatewayConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoscaleEnabled == nil {
				m.AutoscaleEnabled = &types.BoolValue{}
			}
			if err := m.AutoscaleEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMax", wireType)
			}
			m.AutoscaleMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMin", wireType)
			}
			m.AutoscaleMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpu == nil {
				m.Cpu = &CPUTargetUtilizationConfig{}
			}
			if err := m.Cpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrainDuration == nil {
				m.DrainDuration = &types.Duration{}
			}
			if err := m.DrainDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = &types.Struct{}
			}
			if err := m.Env.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &GatewayLabelsConfig{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &types.Struct{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityLabelSelector = append(m.PodAntiAffinityLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityLabelSelector[len(m.PodAntiAffinityLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityTermLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityTermLabelSelector = append(m.PodAntiAffinityTermLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityTermLabelSelector[len(m.PodAntiAffinityTermLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &PortsConfig{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretVolumes = append(m.SecretVolumes, &SecretVolume{})
			if err := m.SecretVolumes[len(m.SecretVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceAnnotations == nil {
				m.ServiceAnnotations = &types.Struct{}
			}
			if err := m.ServiceAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zvpn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Zvpn == nil {
				m.Zvpn = &ZeroVPNConfig{}
			}
			if err := m.Zvpn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, &types.Struct{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxSurge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxSurge == nil {
				m.RollingMaxSurge = &types.Value{}
			}
			if err := m.RollingMaxSurge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxUnavailable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxUnavailable == nil {
				m.RollingMaxUnavailable = &types.Value{}
			}
			if err := m.RollingMaxUnavailable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigVolumes = append(m.ConfigVolumes, &types.Struct{})
			if err := m.ConfigVolumes[len(m.ConfigVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalContainers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalContainers = append(m.AdditionalContainers, &types.Struct{})
			if err := m.AdditionalContainers[len(m.AdditionalContainers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvoyMetricsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyMetricsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyMetricsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsSettings == nil {
				m.TlsSettings = &types.Struct{}
			}
			if err := m.TlsSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpKeepalive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpKeepalive == nil {
				m.TcpKeepalive = &types.Struct{}
			}
			if err := m.TcpKeepalive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayLabelsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayLabelsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayLabelsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Istio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Istio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewaysConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewaysConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewaysConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstioEgressgateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IstioEgressgateway == nil {
				m.IstioEgressgateway = &EgressGatewayConfig{}
			}
			if err := m.IstioEgressgateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstioIngressgateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IstioIngressgateway == nil {
				m.IstioIngressgateway = &IngressGatewayConfig{}
			}
			if err := m.IstioIngressgateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arch == nil {
				m.Arch = &ArchConfig{}
			}
			if err := m.Arch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigValidation == nil {
				m.ConfigValidation = &types.BoolValue{}
			}
			if err := m.ConfigValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlaneSecurityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControlPlaneSecurityEnabled == nil {
				m.ControlPlaneSecurityEnabled = &types.BoolValue{}
			}
			if err := m.ControlPlaneSecurityEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultNodeSelector == nil {
				m.DefaultNodeSelector = &types.Struct{}
			}
			if err := m.DefaultNodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPodDisruptionBudget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultPodDisruptionBudget == nil {
				m.DefaultPodDisruptionBudget = &DefaultPodDisruptionBudgetConfig{}
			}
			if err := m.DefaultPodDisruptionBudget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePolicyChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisablePolicyChecks == nil {
				m.DisablePolicyChecks = &types.BoolValue{}
			}
			if err := m.DisablePolicyChecks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultResources == nil {
				m.DefaultResources = &DefaultResourcesConfig{}
			}
			if err := m.DefaultResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHelmTest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableHelmTest == nil {
				m.EnableHelmTest = &types.BoolValue{}
			}
			if err := m.EnableHelmTest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTracing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableTracing == nil {
				m.EnableTracing = &types.BoolValue{}
			}
			if err := m.EnableTracing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePullPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePullPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstioNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IstioNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityLbSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalityLbSetting == nil {
				m.LocalityLbSetting = &types.Struct{}
			}
			if err := m.LocalityLbSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logging", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logging == nil {
				m.Logging = &GlobalLoggingConfig{}
			}
			if err := m.Logging.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeshExpansion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MeshExpansion == nil {
				m.MeshExpansion = &MeshExpansionConfig{}
			}
			if err := m.MeshExpansion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeshNetworks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MeshNetworks == nil {
				m.MeshNetworks = &types.Struct{}
			}
			if err := m.MeshNetworks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringPort", wireType)
			}
			m.MonitoringPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonitoringPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mtls == nil {
				m.Mtls = &MTLSConfig{}
			}
			if err := m.Mtls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MultiCluster == nil {
				m.MultiCluster = &MultiClusterConfig{}
			}
			if err := m.MultiCluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OneNamespace == nil {
				m.OneNamespace = &types.BoolValue{}
			}
			if err := m.OneNamespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTrafficPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutboundTrafficPolicy == nil {
				m.OutboundTrafficPolicy = &OutboundTrafficPolicyConfig{}
			}
			if err := m.OutboundTrafficPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyCheckFailOpen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyCheckFailOpen == nil {
				m.PolicyCheckFailOpen = &types.BoolValue{}
			}
			if err := m.PolicyCheckFailOpen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriorityClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proxy == nil {
				m.Proxy = &ProxyConfig{}
			}
			if err := m.Proxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyInit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyInit == nil {
				m.ProxyInit = &ProxyInitConfig{}
			}
			if err := m.ProxyInit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sds == nil {
				m.Sds = &SDSConfig{}
			}
			if err := m.Sds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelemetryNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracer == nil {
				m.Tracer = &TracerConfig{}
			}
			if err := m.Tracer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseMCP == nil {
				m.UseMCP = &types.BoolValue{}
			}
			if err := m.UseMCP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogAsJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogAsJson == nil {
				m.LogAsJson = &types.BoolValue{}
			}
			if err := m.LogAsJson.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePullSecrets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePullSecrets = append(m.ImagePullSecrets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OmitSidecarInjectorConfigMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OmitSidecarInjectorConfigMap == nil {
				m.OmitSidecarInjectorConfigMap = &types.BoolValue{}
			}
			if err := m.OmitSidecarInjectorConfigMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &types.Struct{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorManageWebhooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorManageWebhooks == nil {
				m.OperatorManageWebhooks = &types.BoolValue{}
			}
			if err := m.OperatorManageWebhooks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustDomainAliases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustDomainAliases = append(m.TrustDomainAliases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodDNSSearchNamespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodDNSSearchNamespaces = append(m.PodDNSSearchNamespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstioRemote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IstioRemote == nil {
				m.IstioRemote = &types.BoolValue{}
			}
			if err := m.IstioRemote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateRemoteSvcEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateRemoteSvcEndpoints == nil {
				m.CreateRemoteSvcEndpoints = &types.BoolValue{}
			}
			if err := m.CreateRemoteSvcEndpoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemotePilotCreateSvcEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemotePilotCreateSvcEndpoint == nil {
				m.RemotePilotCreateSvcEndpoint = &types.BoolValue{}
			}
			if err := m.RemotePilotCreateSvcEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemotePolicyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemotePolicyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemotePilotAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemotePilotAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteTelemetryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteTelemetryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigRootNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigRootNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrometheusNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrometheusNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultConfigVisibilitySettings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultConfigVisibilitySettings = append(m.DefaultConfigVisibilitySettings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeshID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeshID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Istiod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Istiod == nil {
				m.Istiod = &IstiodConfig{}
			}
			if err := m.Istiod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultTolerations = append(m.DefaultTolerations, &types.Struct{})
			if err := m.DefaultTolerations[len(m.DefaultTolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PilotCertProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PilotCertProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sts == nil {
				m.Sts = &STSConfig{}
			}
			if err := m.Sts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountMtlsCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MountMtlsCerts == nil {
				m.MountMtlsCerts = &types.BoolValue{}
			}
			if err := m.MountMtlsCerts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *STSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: STSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: STSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IstiodConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IstiodConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IstiodConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableAnalysis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableAnalysis == nil {
				m.EnableAnalysis = &types.BoolValue{}
			}
			if err := m.EnableAnalysis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalLoggingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalLoggingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalLoggingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IngressGatewayConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IngressGatewayConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IngressGatewayConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoscaleEnabled == nil {
				m.AutoscaleEnabled = &types.BoolValue{}
			}
			if err := m.AutoscaleEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMax", wireType)
			}
			m.AutoscaleMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMin", wireType)
			}
			m.AutoscaleMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpu == nil {
				m.Cpu = &CPUTargetUtilizationConfig{}
			}
			if err := m.Cpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomService == nil {
				m.CustomService = &types.BoolValue{}
			}
			if err := m.CustomService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Debug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrainDuration == nil {
				m.DrainDuration = &types.Duration{}
			}
			if err := m.DrainDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = &types.Struct{}
			}
			if err := m.Env.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIPs = append(m.ExternalIPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SIngress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SIngress == nil {
				m.K8SIngress = &types.BoolValue{}
			}
			if err := m.K8SIngress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SIngressHttps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SIngressHttps == nil {
				m.K8SIngressHttps = &types.BoolValue{}
			}
			if err := m.K8SIngressHttps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &GatewayLabelsConfig{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerSourceRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerSourceRanges = append(m.LoadBalancerSourceRanges, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeshExpansionPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeshExpansionPorts = append(m.MeshExpansionPorts, &PortsConfig{})
			if err := m.MeshExpansionPorts[len(m.MeshExpansionPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &types.Struct{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityLabelSelector = append(m.PodAntiAffinityLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityLabelSelector[len(m.PodAntiAffinityLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityTermLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityTermLabelSelector = append(m.PodAntiAffinityTermLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityTermLabelSelector[len(m.PodAntiAffinityTermLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &PortsConfig{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &types.Struct{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sds == nil {
				m.Sds = &IngressGatewaySdsConfig{}
			}
			if err := m.Sds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretVolumes = append(m.SecretVolumes, &SecretVolume{})
			if err := m.SecretVolumes[len(m.SecretVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceAnnotations == nil {
				m.ServiceAnnotations = &types.Struct{}
			}
			if err := m.ServiceAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zvpn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Zvpn == nil {
				m.Zvpn = &IngressGatewayZvpnConfig{}
			}
			if err := m.Zvpn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxSurge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxSurge == nil {
				m.RollingMaxSurge = &types.Value{}
			}
			if err := m.RollingMaxSurge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxUnavailable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxUnavailable == nil {
				m.RollingMaxUnavailable = &types.Value{}
			}
			if err := m.RollingMaxUnavailable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationPorts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalTrafficPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalTrafficPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, &types.Struct{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngressPorts = append(m.IngressPorts, &types.Struct{})
			if err := m.IngressPorts[len(m.IngressPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalContainers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalContainers = append(m.AdditionalContainers, &types.Struct{})
			if err := m.AdditionalContainers[len(m.AdditionalContainers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigVolumes = append(m.ConfigVolumes, &types.Struct{})
			if err := m.ConfigVolumes[len(m.ConfigVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Certificates == nil {
				m.Certificates = &types.BoolValue{}
			}
			if err := m.Certificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tls == nil {
				m.Tls = &types.BoolValue{}
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryAddonGateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TelemetryAddonGateways == nil {
				m.TelemetryAddonGateways = &types.Struct{}
			}
			if err := m.TelemetryAddonGateways.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = append(m.Hosts, &types.Struct{})
			if err := m.Hosts[len(m.Hosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryDomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelemetryDomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IngressGatewaySdsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IngressGatewaySdsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IngressGatewaySdsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IngressGatewayZvpnConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IngressGatewayZvpnConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IngressGatewayZvpnConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesEnvMixerAdapterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesEnvMixerAdapterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesEnvMixerAdapterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadSheddingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadSheddingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadSheddingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatencyThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MTLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MTLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MTLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auto == nil {
				m.Auto = &types.BoolValue{}
			}
			if err := m.Auto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshExpansionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeshExpansionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeshExpansionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseILB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseILB == nil {
				m.UseILB = &types.BoolValue{}
			}
			if err := m.UseILB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixerTelemetryAdaptersConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixerTelemetryAdaptersConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixerTelemetryAdaptersConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubernetesenv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kubernetesenv == nil {
				m.Kubernetesenv = &KubernetesEnvMixerAdapterConfig{}
			}
			if err := m.Kubernetesenv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prometheus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prometheus == nil {
				m.Prometheus = &PrometheusMixerAdapterConfig{}
			}
			if err := m.Prometheus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stdio == nil {
				m.Stdio = &StdioMixerAdapterConfig{}
			}
			if err := m.Stdio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stackdriver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stackdriver == nil {
				m.Stackdriver = &StackdriverMixerAdapterConfig{}
			}
			if err := m.Stackdriver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseAdapterCRDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseAdapterCRDs == nil {
				m.UseAdapterCRDs = &types.BoolValue{}
			}
			if err := m.UseAdapterCRDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixerPolicyAdaptersConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixerPolicyAdaptersConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixerPolicyAdaptersConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubernetesenv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kubernetesenv == nil {
				m.Kubernetesenv = &KubernetesEnvMixerAdapterConfig{}
			}
			if err := m.Kubernetesenv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prometheus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prometheus == nil {
				m.Prometheus = &PrometheusMixerAdapterConfig{}
			}
			if err := m.Prometheus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stdio == nil {
				m.Stdio = &StdioMixerAdapterConfig{}
			}
			if err := m.Stdio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stackdriver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stackdriver == nil {
				m.Stackdriver = &StackdriverMixerAdapterConfig{}
			}
			if err := m.Stackdriver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseAdapterCRDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseAdapterCRDs == nil {
				m.UseAdapterCRDs = &types.BoolValue{}
			}
			if err := m.UseAdapterCRDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &MixerPolicyConfig{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telemetry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Telemetry == nil {
				m.Telemetry = &MixerTelemetryConfig{}
			}
			if err := m.Telemetry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adapters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Adapters == nil {
				m.Adapters = &MixerTelemetryAdaptersConfig{}
			}
			if err := m.Adapters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixerPolicyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixerPolicyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixerPolicyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoscaleEnabled == nil {
				m.AutoscaleEnabled = &types.BoolValue{}
			}
			if err := m.AutoscaleEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMax", wireType)
			}
			m.AutoscaleMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMin", wireType)
			}
			m.AutoscaleMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpu == nil {
				m.Cpu = &CPUTargetUtilizationConfig{}
			}
			if err := m.Cpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adapters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Adapters == nil {
				m.Adapters = &MixerPolicyAdaptersConfig{}
			}
			if err := m.Adapters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAffinityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionAffinityEnabled == nil {
				m.SessionAffinityEnabled = &types.BoolValue{}
			}
			if err := m.SessionAffinityEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxSurge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxSurge == nil {
				m.RollingMaxSurge = &types.Value{}
			}
			if err := m.RollingMaxSurge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxUnavailable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxUnavailable == nil {
				m.RollingMaxUnavailable = &types.Value{}
			}
			if err := m.RollingMaxUnavailable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityLabelSelector = append(m.PodAntiAffinityLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityLabelSelector[len(m.PodAntiAffinityLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityTermLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityTermLabelSelector = append(m.PodAntiAffinityTermLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityTermLabelSelector[len(m.PodAntiAffinityTermLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &types.Struct{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = &types.Struct{}
			}
			if err := m.Env.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, &types.Struct{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixerTelemetryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixerTelemetryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixerTelemetryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoscaleEnabled == nil {
				m.AutoscaleEnabled = &types.BoolValue{}
			}
			if err := m.AutoscaleEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMax", wireType)
			}
			m.AutoscaleMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMin", wireType)
			}
			m.AutoscaleMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpu == nil {
				m.Cpu = &CPUTargetUtilizationConfig{}
			}
			if err := m.Cpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = &types.Struct{}
			}
			if err := m.Env.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadshedding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loadshedding == nil {
				m.Loadshedding = &LoadSheddingConfig{}
			}
			if err := m.Loadshedding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &types.Struct{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAffinityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionAffinityEnabled == nil {
				m.SessionAffinityEnabled = &types.BoolValue{}
			}
			if err := m.SessionAffinityEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxSurge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollingMaxSurge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxUnavailable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollingMaxUnavailable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseMCP == nil {
				m.UseMCP = &types.BoolValue{}
			}
			if err := m.UseMCP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportBatchMaxTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportBatchMaxTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportBatchMaxEntries", wireType)
			}
			m.ReportBatchMaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportBatchMaxEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityLabelSelector = append(m.PodAntiAffinityLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityLabelSelector[len(m.PodAntiAffinityLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityTermLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityTermLabelSelector = append(m.PodAntiAffinityTermLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityTermLabelSelector[len(m.PodAntiAffinityTermLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, &types.Struct{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiClusterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiClusterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiClusterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundTrafficPolicyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundTrafficPolicyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundTrafficPolicyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= OutboundTrafficPolicyConfig_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PilotConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PilotConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PilotConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoscaleEnabled == nil {
				m.AutoscaleEnabled = &types.BoolValue{}
			}
			if err := m.AutoscaleEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMin", wireType)
			}
			m.AutoscaleMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscaleMax", wireType)
			}
			m.AutoscaleMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscaleMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sidecar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sidecar == nil {
				m.Sidecar = &types.BoolValue{}
			}
			if err := m.Sidecar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceSampling", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TraceSampling = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpu == nil {
				m.Cpu = &CPUTargetUtilizationConfig{}
			}
			if err := m.Cpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &types.Struct{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepaliveMaxServerConnectionAge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeepaliveMaxServerConnectionAge == nil {
				m.KeepaliveMaxServerConnectionAge = &types.Duration{}
			}
			if err := m.KeepaliveMaxServerConnectionAge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeploymentLabels == nil {
				m.DeploymentLabels = &types.Struct{}
			}
			if err := m.DeploymentLabels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityLabelSelector = append(m.PodAntiAffinityLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityLabelSelector[len(m.PodAntiAffinityLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityTermLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityTermLabelSelector = append(m.PodAntiAffinityTermLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityTermLabelSelector[len(m.PodAntiAffinityTermLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigMap == nil {
				m.ConfigMap = &types.BoolValue{}
			}
			if err := m.ConfigMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ingress == nil {
				m.Ingress = &PilotIngressConfig{}
			}
			if err := m.Ingress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseMCP == nil {
				m.UseMCP = &types.BoolValue{}
			}
			if err := m.UseMCP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = &types.Struct{}
			}
			if err := m.Env.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &PilotPolicyConfig{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxSurge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxSurge == nil {
				m.RollingMaxSurge = &types.Value{}
			}
			if err := m.RollingMaxSurge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingMaxUnavailable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollingMaxUnavailable == nil {
				m.RollingMaxUnavailable = &types.Value{}
			}
			if err := m.RollingMaxUnavailable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, &types.Struct{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppNamespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppNamespaces = append(m.AppNamespaces, &types.Struct{})
			if err := m.AppNamespaces[len(m.AppNamespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableProtocolSniffingForOutbound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableProtocolSniffingForOutbound == nil {
				m.EnableProtocolSniffingForOutbound = &types.BoolValue{}
			}
			if err := m.EnableProtocolSniffingForOutbound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableProtocolSniffingForInbound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableProtocolSniffingForInbound == nil {
				m.EnableProtocolSniffingForInbound = &types.BoolValue{}
			}
			if err := m.EnableProtocolSniffingForInbound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigSource == nil {
				m.ConfigSource = &PilotConfigSource{}
			}
			if err := m.ConfigSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwksResolverExtraRootCA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwksResolverExtraRootCA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plugins = append(m.Plugins, &types.Struct{})
			if err := m.Plugins[len(m.Plugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PilotIngressConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PilotIngressConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PilotIngressConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngressService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressControllerMode", wireType)
			}
			m.IngressControllerMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IngressControllerMode |= IngressControllerMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngressClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PilotPolicyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PilotPolicyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PilotPolicyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.V1 == nil {
				m.V1 = &TelemetryV1Config{}
			}
			if err := m.V1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.V2 == nil {
				m.V2 = &TelemetryV2Config{}
			}
			if err := m.V2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryV1Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryV1Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryV1Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryV2Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryV2Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryV2Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prometheus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prometheus == nil {
				m.Prometheus = &TelemetryV2PrometheusConfig{}
			}
			if err := m.Prometheus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stackdriver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stackdriver == nil {
				m.Stackdriver = &TelemetryV2StackDriverConfig{}
			}
			if err := m.Stackdriver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataExchange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetadataExchange == nil {
				m.MetadataExchange = &TelemetryV2MetadataExchangeConfig{}
			}
			if err := m.MetadataExchange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryV2MetadataExchangeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryV2MetadataExchangeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryV2MetadataExchangeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasmEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WasmEnabled == nil {
				m.WasmEnabled = &types.BoolValue{}
			}
			if err := m.WasmEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryV2PrometheusConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryV2PrometheusConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryV2PrometheusConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasmEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WasmEnabled == nil {
				m.WasmEnabled = &types.BoolValue{}
			}
			if err := m.WasmEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryV2StackDriverConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryV2StackDriverConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryV2StackDriverConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logging", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logging == nil {
				m.Logging = &types.BoolValue{}
			}
			if err := m.Logging.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Monitoring == nil {
				m.Monitoring = &types.BoolValue{}
			}
			if err := m.Monitoring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topology", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topology == nil {
				m.Topology = &types.BoolValue{}
			}
			if err := m.Topology.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigOverride == nil {
				m.ConfigOverride = &types.Struct{}
			}
			if err := m.ConfigOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOutbound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisableOutbound == nil {
				m.DisableOutbound = &types.BoolValue{}
			}
			if err := m.DisableOutbound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PilotConfigSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PilotConfigSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PilotConfigSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribedResources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscribedResources = append(m.SubscribedResources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePort", wireType)
			}
			m.NodePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPort", wireType)
			}
			m.TargetPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrometheusConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrometheusConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrometheusConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePrometheusResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatePrometheusResource == nil {
				m.CreatePrometheusResource = &types.BoolValue{}
			}
			if err := m.CreatePrometheusResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Retention = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &types.Struct{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrapeInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScrapeInterval == nil {
				m.ScrapeInterval = &types.Duration{}
			}
			if err := m.ScrapeInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &PrometheusServiceConfig{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &PrometheusSecurityConfig{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, &types.Struct{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityLabelSelector = append(m.PodAntiAffinityLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityLabelSelector[len(m.PodAntiAffinityLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityTermLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityTermLabelSelector = append(m.PodAntiAffinityTermLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityTermLabelSelector[len(m.PodAntiAffinityTermLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datasources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datasources = append(m.Datasources, &types.Struct{})
			if err := m.Datasources[len(m.Datasources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionPrometheusCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProvisionPrometheusCert == nil {
				m.ProvisionPrometheusCert = &types.BoolValue{}
			}
			if err := m.ProvisionPrometheusCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrometheusMixerAdapterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrometheusMixerAdapterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrometheusMixerAdapterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricsExpiryDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetricsExpiryDuration == nil {
				m.MetricsExpiryDuration = &types.Duration{}
			}
			if err := m.MetricsExpiryDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrometheusSecurityConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrometheusSecurityConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrometheusSecurityConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrometheusServiceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrometheusServiceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrometheusServiceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = &types.Struct{}
			}
			if err := m.Annotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodePort == nil {
				m.NodePort = &PrometheusServiceNodePortConfig{}
			}
			if err := m.NodePort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrometheusServiceNodePortConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrometheusServiceNodePortConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrometheusServiceNodePortConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLogFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessLogFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLogFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessLogFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLogEncoding", wireType)
			}
			m.AccessLogEncoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessLogEncoding |= AccessLogEncoding(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoInject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoInject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentLogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentLogLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Concurrency", wireType)
			}
			m.Concurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Concurrency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCoreDump", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableCoreDump == nil {
				m.EnableCoreDump = &types.BoolValue{}
			}
			if err := m.EnableCoreDump.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvoyMetricsService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnvoyMetricsService == nil {
				m.EnvoyMetricsService = &EnvoyMetricsConfig{}
			}
			if err := m.EnvoyMetricsService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvoyStatsd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnvoyStatsd == nil {
				m.EnvoyStatsd = &EnvoyMetricsConfig{}
			}
			if err := m.EnvoyStatsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeInboundPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeInboundPorts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIPRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeIPRanges = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeIPRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeIPRanges = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Privileged == nil {
				m.Privileged = &types.BoolValue{}
			}
			if err := m.Privileged.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadinessInitialDelaySeconds", wireType)
			}
			m.ReadinessInitialDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadinessInitialDelaySeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadinessPeriodSeconds", wireType)
			}
			m.ReadinessPeriodSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadinessPeriodSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadinessFailureThreshold", wireType)
			}
			m.ReadinessFailureThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadinessFailureThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusPort", wireType)
			}
			m.StatusPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracer", wireType)
			}
			m.Tracer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tracer |= Tracer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolDetectionTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolDetectionTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvoyAccessLogService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnvoyAccessLogService == nil {
				m.EnvoyAccessLogService = &EnvoyAccessLogConfig{}
			}
			if err := m.EnvoyAccessLogService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeOutboundPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeOutboundPorts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrainDuration == nil {
				m.DrainDuration = &types.Duration{}
			}
			if err := m.DrainDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentShutdownDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentShutdownDuration == nil {
				m.ParentShutdownDuration = &types.Duration{}
			}
			if err := m.ParentShutdownDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCoreDumpImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnableCoreDumpImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierLogPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutlierLogPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lifecycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lifecycle == nil {
				m.Lifecycle = &types.Struct{}
			}
			if err := m.Lifecycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvoyAccessLogConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyAccessLogConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyAccessLogConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsSettings == nil {
				m.TlsSettings = &EnvoyAccessLogtlsSettings{}
			}
			if err := m.TlsSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpKeepalive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpKeepalive == nil {
				m.TcpKeepalive = &types.Struct{}
			}
			if err := m.TcpKeepalive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvoyAccessLogtlsSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyAccessLogtlsSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyAccessLogtlsSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCertificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCertificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCertificates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCertificates = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sni", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sni = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectAltNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectAltNames = append(m.SubjectAltNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyInitConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyInitConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyInitConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourcesRequestsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcesRequestsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcesRequestsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UdsPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseNormalJwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseNormalJwt == nil {
				m.UseNormalJwt = &types.BoolValue{}
			}
			if err := m.UseNormalJwt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTrustworthyJwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseTrustworthyJwt == nil {
				m.UseTrustworthyJwt = &types.BoolValue{}
			}
			if err := m.UseTrustworthyJwt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &types.Struct{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretVolume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretVolume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretVolume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = &types.Struct{}
			}
			if err := m.Annotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			m.ExternalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SidecarInjectorConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SidecarInjectorConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SidecarInjectorConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableNamespacesByDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableNamespacesByDefault == nil {
				m.EnableNamespacesByDefault = &types.BoolValue{}
			}
			if err := m.EnableNamespacesByDefault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeverInjectSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NeverInjectSelector = append(m.NeverInjectSelector, &types.Struct{})
			if err := m.NeverInjectSelector[len(m.NeverInjectSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysInjectSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlwaysInjectSelector = append(m.AlwaysInjectSelector, &types.Struct{})
			if err := m.AlwaysInjectSelector[len(m.AlwaysInjectSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewriteAppHTTPProbe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewriteAppHTTPProbe == nil {
				m.RewriteAppHTTPProbe = &types.BoolValue{}
			}
			if err := m.RewriteAppHTTPProbe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InjectLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InjectLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InjectedAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InjectedAnnotations == nil {
				m.InjectedAnnotations = &types.Struct{}
			}
			if err := m.InjectedAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectSelector == nil {
				m.ObjectSelector = &types.Struct{}
			}
			if err := m.ObjectSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StdioMixerAdapterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StdioMixerAdapterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StdioMixerAdapterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputAsJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputAsJson == nil {
				m.OutputAsJson = &types.BoolValue{}
			}
			if err := m.OutputAsJson.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackdriverMixerAdapterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackdriverMixerAdapterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackdriverMixerAdapterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &StackdriverAuthConfig{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracer == nil {
				m.Tracer = &StackdriverTracerConfig{}
			}
			if err := m.Tracer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextGraph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContextGraph == nil {
				m.ContextGraph = &StackdriverContextGraph{}
			}
			if err := m.ContextGraph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logging", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logging == nil {
				m.Logging = &StackdriverMixerAdapterConfig_EnabledConfig{}
			}
			if err := m.Logging.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &StackdriverMixerAdapterConfig_EnabledConfig{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackdriverMixerAdapterConfig_EnabledConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnabledConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnabledConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackdriverAuthConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackdriverAuthConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackdriverAuthConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppCredentials == nil {
				m.AppCredentials = &types.BoolValue{}
			}
			if err := m.AppCredentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackdriverTracerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackdriverTracerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackdriverTracerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleProbability", wireType)
			}
			m.SampleProbability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleProbability |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackdriverContextGraph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackdriverContextGraph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackdriverContextGraph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datadog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Datadog == nil {
				m.Datadog = &TracerDatadogConfig{}
			}
			if err := m.Datadog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lightstep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lightstep == nil {
				m.Lightstep = &TracerLightStepConfig{}
			}
			if err := m.Lightstep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zipkin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Zipkin == nil {
				m.Zipkin = &TracerZipkinConfig{}
			}
			if err := m.Zipkin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stackdriver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stackdriver == nil {
				m.Stackdriver = &TracerStackdriverConfig{}
			}
			if err := m.Stackdriver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracerDatadogConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracerDatadogConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracerDatadogConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracerLightStepConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracerLightStepConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracerLightStepConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacertPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacertPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secure == nil {
				m.Secure = &types.BoolValue{}
			}
			if err := m.Secure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracerZipkinConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracerZipkinConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracerZipkinConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracerStackdriverConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracerStackdriverConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracerStackdriverConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &types.BoolValue{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumberOfAttributes", wireType)
			}
			m.MaxNumberOfAttributes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumberOfAttributes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumberOfAnnotations", wireType)
			}
			m.MaxNumberOfAnnotations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumberOfAnnotations |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumberOfMessageEvents", wireType)
			}
			m.MaxNumberOfMessageEvents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumberOfMessageEvents |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jaeger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jaeger == nil {
				m.Jaeger = &TracingJaegerConfig{}
			}
			if err := m.Jaeger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &types.Struct{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &ServiceConfig{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zipkin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Zipkin == nil {
				m.Zipkin = &TracingZipkinConfig{}
			}
			if err := m.Zipkin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opencensus == nil {
				m.Opencensus = &TracingOpencensusConfig{}
			}
			if err := m.Opencensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityLabelSelector = append(m.PodAntiAffinityLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityLabelSelector[len(m.PodAntiAffinityLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityTermLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityTermLabelSelector = append(m.PodAntiAffinityTermLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityTermLabelSelector[len(m.PodAntiAffinityTermLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, &types.Struct{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracingOpencensusConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracingOpencensusConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracingOpencensusConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exporters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exporters == nil {
				m.Exporters = &TracingOpencensusExportersConfig{}
			}
			if err := m.Exporters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &types.Struct{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracingOpencensusExportersConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracingOpencensusExportersConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracingOpencensusExportersConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stackdriver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stackdriver == nil {
				m.Stackdriver = &types.Struct{}
			}
			if err := m.Stackdriver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracingJaegerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracingJaegerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracingJaegerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memory == nil {
				m.Memory = &TracingJaegerMemoryConfig{}
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanStorageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanStorageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Persist == nil {
				m.Persist = &types.BoolValue{}
			}
			if err := m.Persist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &types.Struct{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracingJaegerMemoryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracingJaegerMemoryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracingJaegerMemoryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTraces", wireType)
			}
			m.MaxTraces = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTraces |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracingZipkinConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracingZipkinConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracingZipkinConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeStartupDelay", wireType)
			}
			m.ProbeStartupDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProbeStartupDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryPort", wireType)
			}
			m.QueryPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavaOptsHeap", wireType)
			}
			m.JavaOptsHeap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JavaOptsHeap |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSpans", wireType)
			}
			m.MaxSpans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSpans |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &TracingZipkinNodeConfig{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessProbeStartupDelay", wireType)
			}
			m.LivenessProbeStartupDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivenessProbeStartupDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracingZipkinNodeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracingZipkinNodeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracingZipkinNodeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			m.Cpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpus |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KialiSecurityConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KialiSecurityConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KialiSecurityConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeyFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKeyFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KialiServiceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KialiServiceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KialiServiceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = &types.Struct{}
			}
			if err := m.Annotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KialiDashboardConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KialiDashboardConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KialiDashboardConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsernameKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassphraseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassphraseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewOnlyMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewOnlyMode == nil {
				m.ViewOnlyMode = &types.BoolValue{}
			}
			if err := m.ViewOnlyMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrafanaURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrafanaURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JaegerURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JaegerURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &types.Struct{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrafanaInClusterURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrafanaInClusterURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JaegerInClusterURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JaegerInClusterURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KialiConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KialiConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KialiConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDemoSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateDemoSecret == nil {
				m.CreateDemoSecret = &types.BoolValue{}
			}
			if err := m.CreateDemoSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &types.Value{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrometheusNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrometheusNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &KialiSecurityConfig{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dashboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dashboard == nil {
				m.Dashboard = &KialiDashboardConfig{}
			}
			if err := m.Dashboard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &types.Struct{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = &types.Struct{}
			}
			if err := m.PodAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityLabelSelector = append(m.PodAntiAffinityLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityLabelSelector[len(m.PodAntiAffinityLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinityTermLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAntiAffinityTermLabelSelector = append(m.PodAntiAffinityTermLabelSelector, &types.Struct{})
			if err := m.PodAntiAffinityTermLabelSelector[len(m.PodAntiAffinityTermLabelSelector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, &types.Struct{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrometheusAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrometheusAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &KialiServiceConfig{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Values) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Values: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Values: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cni == nil {
				m.Cni = &CNIConfig{}
			}
			if err := m.Cni.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Istiocoredns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Istiocoredns == nil {
				m.Istiocoredns = &CoreDNSConfig{}
			}
			if err := m.Istiocoredns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateways == nil {
				m.Gateways = &GatewaysConfig{}
			}
			if err := m.Gateways.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Global", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Global == nil {
				m.Global = &GlobalConfig{}
			}
			if err := m.Global.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grafana", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grafana == nil {
				m.Grafana = &types.Struct{}
			}
			if err := m.Grafana.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mixer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mixer == nil {
				m.Mixer = &MixerConfig{}
			}
			if err := m.Mixer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pilot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pilot == nil {
				m.Pilot = &PilotConfig{}
			}
			if err := m.Pilot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prometheus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prometheus == nil {
				m.Prometheus = &PrometheusConfig{}
			}
			if err := m.Prometheus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidecarInjectorWebhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SidecarInjectorWebhook == nil {
				m.SidecarInjectorWebhook = &SidecarInjectorConfig{}
			}
			if err := m.SidecarInjectorWebhook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracing == nil {
				m.Tracing = &TracingConfig{}
			}
			if err := m.Tracing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kiali", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kiali == nil {
				m.Kiali = &KialiConfig{}
			}
			if err := m.Kiali.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterResources == nil {
				m.ClusterResources = &types.BoolValue{}
			}
			if err := m.ClusterResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrometheusOperator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrometheusOperator == nil {
				m.PrometheusOperator = &types.Struct{}
			}
			if err := m.PrometheusOperator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstioCni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IstioCni == nil {
				m.IstioCni = &CNIConfig{}
			}
			if err := m.IstioCni.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kustomize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kustomize == nil {
				m.Kustomize = &types.BoolValue{}
			}
			if err := m.Kustomize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telemetry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Telemetry == nil {
				m.Telemetry = &TelemetryConfig{}
			}
			if err := m.Telemetry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeshConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MeshConfig == nil {
				m.MeshConfig = &types.Struct{}
			}
			if err := m.MeshConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZeroVPNConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroVPNConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroVPNConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValuesTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValuesTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValuesTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValuesTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValuesTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValuesTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValuesTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthValuesTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValuesTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValuesTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthValuesTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValuesTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValuesTypes   = fmt.Errorf("proto: integer overflow")
)
