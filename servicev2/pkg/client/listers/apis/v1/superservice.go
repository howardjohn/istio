// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "istio.io/istio/servicev2/apis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SuperServiceLister helps list SuperServices.
// All objects returned here must be treated as read-only.
type SuperServiceLister interface {
	// List lists all SuperServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SuperService, err error)
	// SuperServices returns an object that can list and get SuperServices.
	SuperServices(namespace string) SuperServiceNamespaceLister
	SuperServiceListerExpansion
}

// superServiceLister implements the SuperServiceLister interface.
type superServiceLister struct {
	indexer cache.Indexer
}

// NewSuperServiceLister returns a new SuperServiceLister.
func NewSuperServiceLister(indexer cache.Indexer) SuperServiceLister {
	return &superServiceLister{indexer: indexer}
}

// List lists all SuperServices in the indexer.
func (s *superServiceLister) List(selector labels.Selector) (ret []*v1.SuperService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SuperService))
	})
	return ret, err
}

// SuperServices returns an object that can list and get SuperServices.
func (s *superServiceLister) SuperServices(namespace string) SuperServiceNamespaceLister {
	return superServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SuperServiceNamespaceLister helps list and get SuperServices.
// All objects returned here must be treated as read-only.
type SuperServiceNamespaceLister interface {
	// List lists all SuperServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SuperService, err error)
	// Get retrieves the SuperService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SuperService, error)
	SuperServiceNamespaceListerExpansion
}

// superServiceNamespaceLister implements the SuperServiceNamespaceLister
// interface.
type superServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SuperServices in the indexer for a given namespace.
func (s superServiceNamespaceLister) List(selector labels.Selector) (ret []*v1.SuperService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SuperService))
	})
	return ret, err
}

// Get retrieves the SuperService from the indexer for a given namespace and name.
func (s superServiceNamespaceLister) Get(name string) (*v1.SuperService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("superservice"), name)
	}
	return obj.(*v1.SuperService), nil
}
